// ignore_for_file: type=lint
import 'dart:ffi';

typedef LookupFunc = Pointer<T> Function<T extends NativeType>(String symbolName);

class OpenGL {
  final LookupFunc _lookup;
  OpenGL(this._lookup);

  void cullFace(int mode) => _glCullFace(mode);
  late final _glCullFace =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glCullFace').asFunction<void Function(int)>(isLeaf: true);

  void frontFace(int mode) => _glFrontFace(mode);
  late final _glFrontFace =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glFrontFace').asFunction<void Function(int)>(isLeaf: true);

  void hint(int target, int mode) => _glHint(target, mode);
  late final _glHint = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glHint')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void lineWidth(double width) => _glLineWidth(width);
  late final _glLineWidth =
      _lookup<NativeFunction<Void Function(Float)>>('glLineWidth').asFunction<void Function(double)>(isLeaf: true);

  void pointSize(double size) => _glPointSize(size);
  late final _glPointSize =
      _lookup<NativeFunction<Void Function(Float)>>('glPointSize').asFunction<void Function(double)>(isLeaf: true);

  void polygonMode(int face, int mode) => _glPolygonMode(face, mode);
  late final _glPolygonMode = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glPolygonMode')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void scissor(int x, int y, int width, int height) => _glScissor(x, y, width, height);
  late final _glScissor = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glScissor')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texParameterf(int target, int pname, double param) => _glTexParameterf(target, pname, param);
  late final _glTexParameterf =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glTexParameterf')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void texParameterfv(int target, int pname, Pointer<Float> params) => _glTexParameterfv(target, pname, params);
  late final _glTexParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glTexParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void texParameteri(int target, int pname, int param) => _glTexParameteri(target, pname, param);
  late final _glTexParameteri = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glTexParameteri')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texParameteriv(int target, int pname, Pointer<Int> params) => _glTexParameteriv(target, pname, params);
  late final _glTexParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glTexParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void texImage1D(int target, int level, int internalformat, int width, int border, int format, int type,
          Pointer<Void> pixels) =>
      _glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
  late final _glTexImage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glTexImage1D')
          .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void texImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type,
          Pointer<Void> pixels) =>
      _glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
  late final _glTexImage2D = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>('glTexImage2D')
      .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void drawBuffer(int buf) => _glDrawBuffer(buf);
  late final _glDrawBuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDrawBuffer').asFunction<void Function(int)>(isLeaf: true);

  void clear(int mask) => _glClear(mask);
  late final _glClear =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glClear').asFunction<void Function(int)>(isLeaf: true);

  void clearColor(double red, double green, double blue, double alpha) => _glClearColor(red, green, blue, alpha);
  late final _glClearColor = _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glClearColor')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void clearStencil(int s) => _glClearStencil(s);
  late final _glClearStencil =
      _lookup<NativeFunction<Void Function(Int)>>('glClearStencil').asFunction<void Function(int)>(isLeaf: true);

  void clearDepth(double depth) => _glClearDepth(depth);
  late final _glClearDepth =
      _lookup<NativeFunction<Void Function(Double)>>('glClearDepth').asFunction<void Function(double)>(isLeaf: true);

  void stencilMask(int mask) => _glStencilMask(mask);
  late final _glStencilMask =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glStencilMask').asFunction<void Function(int)>(isLeaf: true);

  void colorMask(int red, int green, int blue, int alpha) => _glColorMask(red, green, blue, alpha);
  late final _glColorMask =
      _lookup<NativeFunction<Void Function(UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar)>>('glColorMask')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void depthMask(int flag) => _glDepthMask(flag);
  late final _glDepthMask =
      _lookup<NativeFunction<Void Function(UnsignedChar)>>('glDepthMask').asFunction<void Function(int)>(isLeaf: true);

  void disable(int cap) => _glDisable(cap);
  late final _glDisable =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDisable').asFunction<void Function(int)>(isLeaf: true);

  void enable(int cap) => _glEnable(cap);
  late final _glEnable =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glEnable').asFunction<void Function(int)>(isLeaf: true);

  void finish() => _glFinish();
  late final _glFinish = _lookup<NativeFunction<Void Function()>>('glFinish').asFunction<void Function()>(isLeaf: true);

  void flush() => _glFlush();
  late final _glFlush = _lookup<NativeFunction<Void Function()>>('glFlush').asFunction<void Function()>(isLeaf: true);

  void blendFunc(int sfactor, int dfactor) => _glBlendFunc(sfactor, dfactor);
  late final _glBlendFunc = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBlendFunc')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void logicOp(int opcode) => _glLogicOp(opcode);
  late final _glLogicOp =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glLogicOp').asFunction<void Function(int)>(isLeaf: true);

  void stencilFunc(int func, int ref, int mask) => _glStencilFunc(func, ref, mask);
  late final _glStencilFunc = _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt)>>('glStencilFunc')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void stencilOp(int fail, int zfail, int zpass) => _glStencilOp(fail, zfail, zpass);
  late final _glStencilOp = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glStencilOp')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void depthFunc(int func) => _glDepthFunc(func);
  late final _glDepthFunc =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDepthFunc').asFunction<void Function(int)>(isLeaf: true);

  void pixelStoref(int pname, double param) => _glPixelStoref(pname, param);
  late final _glPixelStoref = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glPixelStoref')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void pixelStorei(int pname, int param) => _glPixelStorei(pname, param);
  late final _glPixelStorei = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glPixelStorei')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void readBuffer(int src) => _glReadBuffer(src);
  late final _glReadBuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glReadBuffer').asFunction<void Function(int)>(isLeaf: true);

  void readPixels(int x, int y, int width, int height, int format, int type, Pointer<Void> pixels) =>
      _glReadPixels(x, y, width, height, format, type, pixels);
  late final _glReadPixels =
      _lookup<NativeFunction<Void Function(Int, Int, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glReadPixels')
          .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getBooleanv(int pname, Pointer<UnsignedChar> data) => _glGetBooleanv(pname, data);
  late final _glGetBooleanv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glGetBooleanv')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void getDoublev(int pname, Pointer<Double> data) => _glGetDoublev(pname, data);
  late final _glGetDoublev = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glGetDoublev')
      .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  int getError() => _glGetError();
  late final _glGetError =
      _lookup<NativeFunction<UnsignedInt Function()>>('glGetError').asFunction<int Function()>(isLeaf: true);

  void getFloatv(int pname, Pointer<Float> data) => _glGetFloatv(pname, data);
  late final _glGetFloatv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glGetFloatv')
      .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void getIntegerv(int pname, Pointer<Int> data) => _glGetIntegerv(pname, data);
  late final _glGetIntegerv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glGetIntegerv')
      .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  Pointer<UnsignedChar> getString(int name) => _glGetString(name);
  late final _glGetString = _lookup<NativeFunction<Pointer<UnsignedChar> Function(UnsignedInt)>>('glGetString')
      .asFunction<Pointer<UnsignedChar> Function(int)>(isLeaf: true);

  void getTexImage(int target, int level, int format, int type, Pointer<Void> pixels) =>
      _glGetTexImage(target, level, format, type, pixels);
  late final _glGetTexImage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>('glGetTexImage')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getTexParameterfv(int target, int pname, Pointer<Float> params) => _glGetTexParameterfv(target, pname, params);
  late final _glGetTexParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetTexParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getTexParameteriv(int target, int pname, Pointer<Int> params) => _glGetTexParameteriv(target, pname, params);
  late final _glGetTexParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetTexParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getTexLevelParameterfv(int target, int level, int pname, Pointer<Float> params) =>
      _glGetTexLevelParameterfv(target, level, pname, params);
  late final _glGetTexLevelParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Float>)>>('glGetTexLevelParameterfv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getTexLevelParameteriv(int target, int level, int pname, Pointer<Int> params) =>
      _glGetTexLevelParameteriv(target, level, pname, params);
  late final _glGetTexLevelParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Int>)>>('glGetTexLevelParameteriv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  int isEnabled(int cap) => _glIsEnabled(cap);
  late final _glIsEnabled = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsEnabled')
      .asFunction<int Function(int)>(isLeaf: true);

  void depthRange(double n, double f) => _glDepthRange(n, f);
  late final _glDepthRange = _lookup<NativeFunction<Void Function(Double, Double)>>('glDepthRange')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void viewport(int x, int y, int width, int height) => _glViewport(x, y, width, height);
  late final _glViewport = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glViewport')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void newList(int list, int mode) => _glNewList(list, mode);
  late final _glNewList = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glNewList')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void endList() => _glEndList();
  late final _glEndList =
      _lookup<NativeFunction<Void Function()>>('glEndList').asFunction<void Function()>(isLeaf: true);

  void callList(int list) => _glCallList(list);
  late final _glCallList =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glCallList').asFunction<void Function(int)>(isLeaf: true);

  void callLists(int n, int type, Pointer<Void> lists) => _glCallLists(n, type, lists);
  late final _glCallLists = _lookup<NativeFunction<Void Function(Int, UnsignedInt, Pointer<Void>)>>('glCallLists')
      .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void deleteLists(int list, int range) => _glDeleteLists(list, range);
  late final _glDeleteLists = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glDeleteLists')
      .asFunction<void Function(int, int)>(isLeaf: true);

  int genLists(int range) => _glGenLists(range);
  late final _glGenLists =
      _lookup<NativeFunction<UnsignedInt Function(Int)>>('glGenLists').asFunction<int Function(int)>(isLeaf: true);

  void listBase(int base) => _glListBase(base);
  late final _glListBase =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glListBase').asFunction<void Function(int)>(isLeaf: true);

  void begin(int mode) => _glBegin(mode);
  late final _glBegin =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBegin').asFunction<void Function(int)>(isLeaf: true);

  void bitmap(int width, int height, double xorig, double yorig, double xmove, double ymove,
          Pointer<UnsignedChar> bitmap) =>
      _glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
  late final _glBitmap =
      _lookup<NativeFunction<Void Function(Int, Int, Float, Float, Float, Float, Pointer<UnsignedChar>)>>('glBitmap')
          .asFunction<void Function(int, int, double, double, double, double, Pointer<UnsignedChar>)>(isLeaf: true);

  void color3b(int red, int green, int blue) => _glColor3b(red, green, blue);
  late final _glColor3b = _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar)>>('glColor3b')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void color3bv(Pointer<SignedChar> v) => _glColor3bv(v);
  late final _glColor3bv = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glColor3bv')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void color3d(double red, double green, double blue) => _glColor3d(red, green, blue);
  late final _glColor3d = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glColor3d')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void color3dv(Pointer<Double> v) => _glColor3dv(v);
  late final _glColor3dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glColor3dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void color3f(double red, double green, double blue) => _glColor3f(red, green, blue);
  late final _glColor3f = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glColor3f')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void color3fv(Pointer<Float> v) => _glColor3fv(v);
  late final _glColor3fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glColor3fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void color3i(int red, int green, int blue) => _glColor3i(red, green, blue);
  late final _glColor3i = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glColor3i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void color3iv(Pointer<Int> v) => _glColor3iv(v);
  late final _glColor3iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glColor3iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void color3s(int red, int green, int blue) => _glColor3s(red, green, blue);
  late final _glColor3s = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glColor3s')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void color3sv(Pointer<Short> v) => _glColor3sv(v);
  late final _glColor3sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glColor3sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void color3ub(int red, int green, int blue) => _glColor3ub(red, green, blue);
  late final _glColor3ub =
      _lookup<NativeFunction<Void Function(UnsignedChar, UnsignedChar, UnsignedChar)>>('glColor3ub')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void color3ubv(Pointer<UnsignedChar> v) => _glColor3ubv(v);
  late final _glColor3ubv = _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>)>>('glColor3ubv')
      .asFunction<void Function(Pointer<UnsignedChar>)>(isLeaf: true);

  void color3ui(int red, int green, int blue) => _glColor3ui(red, green, blue);
  late final _glColor3ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glColor3ui')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void color3uiv(Pointer<UnsignedInt> v) => _glColor3uiv(v);
  late final _glColor3uiv = _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>)>>('glColor3uiv')
      .asFunction<void Function(Pointer<UnsignedInt>)>(isLeaf: true);

  void color3us(int red, int green, int blue) => _glColor3us(red, green, blue);
  late final _glColor3us =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort)>>('glColor3us')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void color3usv(Pointer<UnsignedShort> v) => _glColor3usv(v);
  late final _glColor3usv = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glColor3usv')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void color4b(int red, int green, int blue, int alpha) => _glColor4b(red, green, blue, alpha);
  late final _glColor4b =
      _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar, SignedChar)>>('glColor4b')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void color4bv(Pointer<SignedChar> v) => _glColor4bv(v);
  late final _glColor4bv = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glColor4bv')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void color4d(double red, double green, double blue, double alpha) => _glColor4d(red, green, blue, alpha);
  late final _glColor4d = _lookup<NativeFunction<Void Function(Double, Double, Double, Double)>>('glColor4d')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void color4dv(Pointer<Double> v) => _glColor4dv(v);
  late final _glColor4dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glColor4dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void color4f(double red, double green, double blue, double alpha) => _glColor4f(red, green, blue, alpha);
  late final _glColor4f = _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glColor4f')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void color4fv(Pointer<Float> v) => _glColor4fv(v);
  late final _glColor4fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glColor4fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void color4i(int red, int green, int blue, int alpha) => _glColor4i(red, green, blue, alpha);
  late final _glColor4i = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glColor4i')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void color4iv(Pointer<Int> v) => _glColor4iv(v);
  late final _glColor4iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glColor4iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void color4s(int red, int green, int blue, int alpha) => _glColor4s(red, green, blue, alpha);
  late final _glColor4s = _lookup<NativeFunction<Void Function(Short, Short, Short, Short)>>('glColor4s')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void color4sv(Pointer<Short> v) => _glColor4sv(v);
  late final _glColor4sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glColor4sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void color4ub(int red, int green, int blue, int alpha) => _glColor4ub(red, green, blue, alpha);
  late final _glColor4ub =
      _lookup<NativeFunction<Void Function(UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar)>>('glColor4ub')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void color4ubv(Pointer<UnsignedChar> v) => _glColor4ubv(v);
  late final _glColor4ubv = _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>)>>('glColor4ubv')
      .asFunction<void Function(Pointer<UnsignedChar>)>(isLeaf: true);

  void color4ui(int red, int green, int blue, int alpha) => _glColor4ui(red, green, blue, alpha);
  late final _glColor4ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glColor4ui')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void color4uiv(Pointer<UnsignedInt> v) => _glColor4uiv(v);
  late final _glColor4uiv = _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>)>>('glColor4uiv')
      .asFunction<void Function(Pointer<UnsignedInt>)>(isLeaf: true);

  void color4us(int red, int green, int blue, int alpha) => _glColor4us(red, green, blue, alpha);
  late final _glColor4us =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort, UnsignedShort)>>('glColor4us')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void color4usv(Pointer<UnsignedShort> v) => _glColor4usv(v);
  late final _glColor4usv = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glColor4usv')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void edgeFlag(int flag) => _glEdgeFlag(flag);
  late final _glEdgeFlag =
      _lookup<NativeFunction<Void Function(UnsignedChar)>>('glEdgeFlag').asFunction<void Function(int)>(isLeaf: true);

  void edgeFlagv(Pointer<UnsignedChar> flag) => _glEdgeFlagv(flag);
  late final _glEdgeFlagv = _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>)>>('glEdgeFlagv')
      .asFunction<void Function(Pointer<UnsignedChar>)>(isLeaf: true);

  void end() => _glEnd();
  late final _glEnd = _lookup<NativeFunction<Void Function()>>('glEnd').asFunction<void Function()>(isLeaf: true);

  void indexd(double c) => _glIndexd(c);
  late final _glIndexd =
      _lookup<NativeFunction<Void Function(Double)>>('glIndexd').asFunction<void Function(double)>(isLeaf: true);

  void indexdv(Pointer<Double> c) => _glIndexdv(c);
  late final _glIndexdv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glIndexdv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void indexf(double c) => _glIndexf(c);
  late final _glIndexf =
      _lookup<NativeFunction<Void Function(Float)>>('glIndexf').asFunction<void Function(double)>(isLeaf: true);

  void indexfv(Pointer<Float> c) => _glIndexfv(c);
  late final _glIndexfv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glIndexfv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void indexi(int c) => _glIndexi(c);
  late final _glIndexi =
      _lookup<NativeFunction<Void Function(Int)>>('glIndexi').asFunction<void Function(int)>(isLeaf: true);

  void indexiv(Pointer<Int> c) => _glIndexiv(c);
  late final _glIndexiv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glIndexiv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void indexs(int c) => _glIndexs(c);
  late final _glIndexs =
      _lookup<NativeFunction<Void Function(Short)>>('glIndexs').asFunction<void Function(int)>(isLeaf: true);

  void indexsv(Pointer<Short> c) => _glIndexsv(c);
  late final _glIndexsv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glIndexsv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void normal3b(int nx, int ny, int nz) => _glNormal3b(nx, ny, nz);
  late final _glNormal3b = _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar)>>('glNormal3b')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void normal3bv(Pointer<SignedChar> v) => _glNormal3bv(v);
  late final _glNormal3bv = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glNormal3bv')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void normal3d(double nx, double ny, double nz) => _glNormal3d(nx, ny, nz);
  late final _glNormal3d = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glNormal3d')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void normal3dv(Pointer<Double> v) => _glNormal3dv(v);
  late final _glNormal3dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glNormal3dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void normal3f(double nx, double ny, double nz) => _glNormal3f(nx, ny, nz);
  late final _glNormal3f = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glNormal3f')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void normal3fv(Pointer<Float> v) => _glNormal3fv(v);
  late final _glNormal3fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glNormal3fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void normal3i(int nx, int ny, int nz) => _glNormal3i(nx, ny, nz);
  late final _glNormal3i = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glNormal3i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void normal3iv(Pointer<Int> v) => _glNormal3iv(v);
  late final _glNormal3iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glNormal3iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void normal3s(int nx, int ny, int nz) => _glNormal3s(nx, ny, nz);
  late final _glNormal3s = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glNormal3s')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void normal3sv(Pointer<Short> v) => _glNormal3sv(v);
  late final _glNormal3sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glNormal3sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void rasterPos2d(double x, double y) => _glRasterPos2d(x, y);
  late final _glRasterPos2d = _lookup<NativeFunction<Void Function(Double, Double)>>('glRasterPos2d')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void rasterPos2dv(Pointer<Double> v) => _glRasterPos2dv(v);
  late final _glRasterPos2dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glRasterPos2dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void rasterPos2f(double x, double y) => _glRasterPos2f(x, y);
  late final _glRasterPos2f = _lookup<NativeFunction<Void Function(Float, Float)>>('glRasterPos2f')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void rasterPos2fv(Pointer<Float> v) => _glRasterPos2fv(v);
  late final _glRasterPos2fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glRasterPos2fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void rasterPos2i(int x, int y) => _glRasterPos2i(x, y);
  late final _glRasterPos2i = _lookup<NativeFunction<Void Function(Int, Int)>>('glRasterPos2i')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void rasterPos2iv(Pointer<Int> v) => _glRasterPos2iv(v);
  late final _glRasterPos2iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glRasterPos2iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void rasterPos2s(int x, int y) => _glRasterPos2s(x, y);
  late final _glRasterPos2s = _lookup<NativeFunction<Void Function(Short, Short)>>('glRasterPos2s')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void rasterPos2sv(Pointer<Short> v) => _glRasterPos2sv(v);
  late final _glRasterPos2sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glRasterPos2sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void rasterPos3d(double x, double y, double z) => _glRasterPos3d(x, y, z);
  late final _glRasterPos3d = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glRasterPos3d')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void rasterPos3dv(Pointer<Double> v) => _glRasterPos3dv(v);
  late final _glRasterPos3dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glRasterPos3dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void rasterPos3f(double x, double y, double z) => _glRasterPos3f(x, y, z);
  late final _glRasterPos3f = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glRasterPos3f')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void rasterPos3fv(Pointer<Float> v) => _glRasterPos3fv(v);
  late final _glRasterPos3fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glRasterPos3fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void rasterPos3i(int x, int y, int z) => _glRasterPos3i(x, y, z);
  late final _glRasterPos3i = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glRasterPos3i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void rasterPos3iv(Pointer<Int> v) => _glRasterPos3iv(v);
  late final _glRasterPos3iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glRasterPos3iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void rasterPos3s(int x, int y, int z) => _glRasterPos3s(x, y, z);
  late final _glRasterPos3s = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glRasterPos3s')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void rasterPos3sv(Pointer<Short> v) => _glRasterPos3sv(v);
  late final _glRasterPos3sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glRasterPos3sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void rasterPos4d(double x, double y, double z, double w) => _glRasterPos4d(x, y, z, w);
  late final _glRasterPos4d = _lookup<NativeFunction<Void Function(Double, Double, Double, Double)>>('glRasterPos4d')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void rasterPos4dv(Pointer<Double> v) => _glRasterPos4dv(v);
  late final _glRasterPos4dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glRasterPos4dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void rasterPos4f(double x, double y, double z, double w) => _glRasterPos4f(x, y, z, w);
  late final _glRasterPos4f = _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glRasterPos4f')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void rasterPos4fv(Pointer<Float> v) => _glRasterPos4fv(v);
  late final _glRasterPos4fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glRasterPos4fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void rasterPos4i(int x, int y, int z, int w) => _glRasterPos4i(x, y, z, w);
  late final _glRasterPos4i = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glRasterPos4i')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void rasterPos4iv(Pointer<Int> v) => _glRasterPos4iv(v);
  late final _glRasterPos4iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glRasterPos4iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void rasterPos4s(int x, int y, int z, int w) => _glRasterPos4s(x, y, z, w);
  late final _glRasterPos4s = _lookup<NativeFunction<Void Function(Short, Short, Short, Short)>>('glRasterPos4s')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void rasterPos4sv(Pointer<Short> v) => _glRasterPos4sv(v);
  late final _glRasterPos4sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glRasterPos4sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void rectd(double x1, double y1, double x2, double y2) => _glRectd(x1, y1, x2, y2);
  late final _glRectd = _lookup<NativeFunction<Void Function(Double, Double, Double, Double)>>('glRectd')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void rectdv(Pointer<Double> v1, Pointer<Double> v2) => _glRectdv(v1, v2);
  late final _glRectdv = _lookup<NativeFunction<Void Function(Pointer<Double>, Pointer<Double>)>>('glRectdv')
      .asFunction<void Function(Pointer<Double>, Pointer<Double>)>(isLeaf: true);

  void rectf(double x1, double y1, double x2, double y2) => _glRectf(x1, y1, x2, y2);
  late final _glRectf = _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glRectf')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void rectfv(Pointer<Float> v1, Pointer<Float> v2) => _glRectfv(v1, v2);
  late final _glRectfv = _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<Float>)>>('glRectfv')
      .asFunction<void Function(Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void recti(int x1, int y1, int x2, int y2) => _glRecti(x1, y1, x2, y2);
  late final _glRecti = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glRecti')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void rectiv(Pointer<Int> v1, Pointer<Int> v2) => _glRectiv(v1, v2);
  late final _glRectiv = _lookup<NativeFunction<Void Function(Pointer<Int>, Pointer<Int>)>>('glRectiv')
      .asFunction<void Function(Pointer<Int>, Pointer<Int>)>(isLeaf: true);

  void rects(int x1, int y1, int x2, int y2) => _glRects(x1, y1, x2, y2);
  late final _glRects = _lookup<NativeFunction<Void Function(Short, Short, Short, Short)>>('glRects')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void rectsv(Pointer<Short> v1, Pointer<Short> v2) => _glRectsv(v1, v2);
  late final _glRectsv = _lookup<NativeFunction<Void Function(Pointer<Short>, Pointer<Short>)>>('glRectsv')
      .asFunction<void Function(Pointer<Short>, Pointer<Short>)>(isLeaf: true);

  void texCoord1d(double s) => _glTexCoord1d(s);
  late final _glTexCoord1d =
      _lookup<NativeFunction<Void Function(Double)>>('glTexCoord1d').asFunction<void Function(double)>(isLeaf: true);

  void texCoord1dv(Pointer<Double> v) => _glTexCoord1dv(v);
  late final _glTexCoord1dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glTexCoord1dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void texCoord1f(double s) => _glTexCoord1f(s);
  late final _glTexCoord1f =
      _lookup<NativeFunction<Void Function(Float)>>('glTexCoord1f').asFunction<void Function(double)>(isLeaf: true);

  void texCoord1fv(Pointer<Float> v) => _glTexCoord1fv(v);
  late final _glTexCoord1fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glTexCoord1fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void texCoord1i(int s) => _glTexCoord1i(s);
  late final _glTexCoord1i =
      _lookup<NativeFunction<Void Function(Int)>>('glTexCoord1i').asFunction<void Function(int)>(isLeaf: true);

  void texCoord1iv(Pointer<Int> v) => _glTexCoord1iv(v);
  late final _glTexCoord1iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glTexCoord1iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void texCoord1s(int s) => _glTexCoord1s(s);
  late final _glTexCoord1s =
      _lookup<NativeFunction<Void Function(Short)>>('glTexCoord1s').asFunction<void Function(int)>(isLeaf: true);

  void texCoord1sv(Pointer<Short> v) => _glTexCoord1sv(v);
  late final _glTexCoord1sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glTexCoord1sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void texCoord2d(double s, double t) => _glTexCoord2d(s, t);
  late final _glTexCoord2d = _lookup<NativeFunction<Void Function(Double, Double)>>('glTexCoord2d')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void texCoord2dv(Pointer<Double> v) => _glTexCoord2dv(v);
  late final _glTexCoord2dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glTexCoord2dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void texCoord2f(double s, double t) => _glTexCoord2f(s, t);
  late final _glTexCoord2f = _lookup<NativeFunction<Void Function(Float, Float)>>('glTexCoord2f')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void texCoord2fv(Pointer<Float> v) => _glTexCoord2fv(v);
  late final _glTexCoord2fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glTexCoord2fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void texCoord2i(int s, int t) => _glTexCoord2i(s, t);
  late final _glTexCoord2i = _lookup<NativeFunction<Void Function(Int, Int)>>('glTexCoord2i')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void texCoord2iv(Pointer<Int> v) => _glTexCoord2iv(v);
  late final _glTexCoord2iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glTexCoord2iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void texCoord2s(int s, int t) => _glTexCoord2s(s, t);
  late final _glTexCoord2s = _lookup<NativeFunction<Void Function(Short, Short)>>('glTexCoord2s')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void texCoord2sv(Pointer<Short> v) => _glTexCoord2sv(v);
  late final _glTexCoord2sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glTexCoord2sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void texCoord3d(double s, double t, double r) => _glTexCoord3d(s, t, r);
  late final _glTexCoord3d = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glTexCoord3d')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void texCoord3dv(Pointer<Double> v) => _glTexCoord3dv(v);
  late final _glTexCoord3dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glTexCoord3dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void texCoord3f(double s, double t, double r) => _glTexCoord3f(s, t, r);
  late final _glTexCoord3f = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glTexCoord3f')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void texCoord3fv(Pointer<Float> v) => _glTexCoord3fv(v);
  late final _glTexCoord3fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glTexCoord3fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void texCoord3i(int s, int t, int r) => _glTexCoord3i(s, t, r);
  late final _glTexCoord3i = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glTexCoord3i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texCoord3iv(Pointer<Int> v) => _glTexCoord3iv(v);
  late final _glTexCoord3iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glTexCoord3iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void texCoord3s(int s, int t, int r) => _glTexCoord3s(s, t, r);
  late final _glTexCoord3s = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glTexCoord3s')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texCoord3sv(Pointer<Short> v) => _glTexCoord3sv(v);
  late final _glTexCoord3sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glTexCoord3sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void texCoord4d(double s, double t, double r, double q) => _glTexCoord4d(s, t, r, q);
  late final _glTexCoord4d = _lookup<NativeFunction<Void Function(Double, Double, Double, Double)>>('glTexCoord4d')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void texCoord4dv(Pointer<Double> v) => _glTexCoord4dv(v);
  late final _glTexCoord4dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glTexCoord4dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void texCoord4f(double s, double t, double r, double q) => _glTexCoord4f(s, t, r, q);
  late final _glTexCoord4f = _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glTexCoord4f')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void texCoord4fv(Pointer<Float> v) => _glTexCoord4fv(v);
  late final _glTexCoord4fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glTexCoord4fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void texCoord4i(int s, int t, int r, int q) => _glTexCoord4i(s, t, r, q);
  late final _glTexCoord4i = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glTexCoord4i')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texCoord4iv(Pointer<Int> v) => _glTexCoord4iv(v);
  late final _glTexCoord4iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glTexCoord4iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void texCoord4s(int s, int t, int r, int q) => _glTexCoord4s(s, t, r, q);
  late final _glTexCoord4s = _lookup<NativeFunction<Void Function(Short, Short, Short, Short)>>('glTexCoord4s')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texCoord4sv(Pointer<Short> v) => _glTexCoord4sv(v);
  late final _glTexCoord4sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glTexCoord4sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void vertex2d(double x, double y) => _glVertex2d(x, y);
  late final _glVertex2d = _lookup<NativeFunction<Void Function(Double, Double)>>('glVertex2d')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void vertex2dv(Pointer<Double> v) => _glVertex2dv(v);
  late final _glVertex2dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glVertex2dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void vertex2f(double x, double y) => _glVertex2f(x, y);
  late final _glVertex2f = _lookup<NativeFunction<Void Function(Float, Float)>>('glVertex2f')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void vertex2fv(Pointer<Float> v) => _glVertex2fv(v);
  late final _glVertex2fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glVertex2fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void vertex2i(int x, int y) => _glVertex2i(x, y);
  late final _glVertex2i =
      _lookup<NativeFunction<Void Function(Int, Int)>>('glVertex2i').asFunction<void Function(int, int)>(isLeaf: true);

  void vertex2iv(Pointer<Int> v) => _glVertex2iv(v);
  late final _glVertex2iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glVertex2iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void vertex2s(int x, int y) => _glVertex2s(x, y);
  late final _glVertex2s = _lookup<NativeFunction<Void Function(Short, Short)>>('glVertex2s')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertex2sv(Pointer<Short> v) => _glVertex2sv(v);
  late final _glVertex2sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glVertex2sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void vertex3d(double x, double y, double z) => _glVertex3d(x, y, z);
  late final _glVertex3d = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glVertex3d')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void vertex3dv(Pointer<Double> v) => _glVertex3dv(v);
  late final _glVertex3dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glVertex3dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void vertex3f(double x, double y, double z) => _glVertex3f(x, y, z);
  late final _glVertex3f = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glVertex3f')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void vertex3fv(Pointer<Float> v) => _glVertex3fv(v);
  late final _glVertex3fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glVertex3fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void vertex3i(int x, int y, int z) => _glVertex3i(x, y, z);
  late final _glVertex3i = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glVertex3i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertex3iv(Pointer<Int> v) => _glVertex3iv(v);
  late final _glVertex3iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glVertex3iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void vertex3s(int x, int y, int z) => _glVertex3s(x, y, z);
  late final _glVertex3s = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glVertex3s')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertex3sv(Pointer<Short> v) => _glVertex3sv(v);
  late final _glVertex3sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glVertex3sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void vertex4d(double x, double y, double z, double w) => _glVertex4d(x, y, z, w);
  late final _glVertex4d = _lookup<NativeFunction<Void Function(Double, Double, Double, Double)>>('glVertex4d')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void vertex4dv(Pointer<Double> v) => _glVertex4dv(v);
  late final _glVertex4dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glVertex4dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void vertex4f(double x, double y, double z, double w) => _glVertex4f(x, y, z, w);
  late final _glVertex4f = _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glVertex4f')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void vertex4fv(Pointer<Float> v) => _glVertex4fv(v);
  late final _glVertex4fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glVertex4fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void vertex4i(int x, int y, int z, int w) => _glVertex4i(x, y, z, w);
  late final _glVertex4i = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glVertex4i')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertex4iv(Pointer<Int> v) => _glVertex4iv(v);
  late final _glVertex4iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glVertex4iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void vertex4s(int x, int y, int z, int w) => _glVertex4s(x, y, z, w);
  late final _glVertex4s = _lookup<NativeFunction<Void Function(Short, Short, Short, Short)>>('glVertex4s')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertex4sv(Pointer<Short> v) => _glVertex4sv(v);
  late final _glVertex4sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glVertex4sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void clipPlane(int plane, Pointer<Double> equation) => _glClipPlane(plane, equation);
  late final _glClipPlane = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glClipPlane')
      .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void colorMaterial(int face, int mode) => _glColorMaterial(face, mode);
  late final _glColorMaterial = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glColorMaterial')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void fogf(int pname, double param) => _glFogf(pname, param);
  late final _glFogf = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glFogf')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void fogfv(int pname, Pointer<Float> params) => _glFogfv(pname, params);
  late final _glFogfv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glFogfv')
      .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void fogi(int pname, int param) => _glFogi(pname, param);
  late final _glFogi = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glFogi')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void fogiv(int pname, Pointer<Int> params) => _glFogiv(pname, params);
  late final _glFogiv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glFogiv')
      .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void lightf(int light, int pname, double param) => _glLightf(light, pname, param);
  late final _glLightf = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glLightf')
      .asFunction<void Function(int, int, double)>(isLeaf: true);

  void lightfv(int light, int pname, Pointer<Float> params) => _glLightfv(light, pname, params);
  late final _glLightfv = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glLightfv')
      .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void lighti(int light, int pname, int param) => _glLighti(light, pname, param);
  late final _glLighti = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glLighti')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void lightiv(int light, int pname, Pointer<Int> params) => _glLightiv(light, pname, params);
  late final _glLightiv = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glLightiv')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void lightModelf(int pname, double param) => _glLightModelf(pname, param);
  late final _glLightModelf = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glLightModelf')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void lightModelfv(int pname, Pointer<Float> params) => _glLightModelfv(pname, params);
  late final _glLightModelfv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glLightModelfv')
      .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void lightModeli(int pname, int param) => _glLightModeli(pname, param);
  late final _glLightModeli = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glLightModeli')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void lightModeliv(int pname, Pointer<Int> params) => _glLightModeliv(pname, params);
  late final _glLightModeliv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glLightModeliv')
      .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void lineStipple(int factor, int pattern) => _glLineStipple(factor, pattern);
  late final _glLineStipple = _lookup<NativeFunction<Void Function(Int, UnsignedShort)>>('glLineStipple')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void materialf(int face, int pname, double param) => _glMaterialf(face, pname, param);
  late final _glMaterialf = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glMaterialf')
      .asFunction<void Function(int, int, double)>(isLeaf: true);

  void materialfv(int face, int pname, Pointer<Float> params) => _glMaterialfv(face, pname, params);
  late final _glMaterialfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glMaterialfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void materiali(int face, int pname, int param) => _glMateriali(face, pname, param);
  late final _glMateriali = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glMateriali')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void materialiv(int face, int pname, Pointer<Int> params) => _glMaterialiv(face, pname, params);
  late final _glMaterialiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glMaterialiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void polygonStipple(Pointer<UnsignedChar> mask) => _glPolygonStipple(mask);
  late final _glPolygonStipple = _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>)>>('glPolygonStipple')
      .asFunction<void Function(Pointer<UnsignedChar>)>(isLeaf: true);

  void shadeModel(int mode) => _glShadeModel(mode);
  late final _glShadeModel =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glShadeModel').asFunction<void Function(int)>(isLeaf: true);

  void texEnvf(int target, int pname, double param) => _glTexEnvf(target, pname, param);
  late final _glTexEnvf = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glTexEnvf')
      .asFunction<void Function(int, int, double)>(isLeaf: true);

  void texEnvfv(int target, int pname, Pointer<Float> params) => _glTexEnvfv(target, pname, params);
  late final _glTexEnvfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glTexEnvfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void texEnvi(int target, int pname, int param) => _glTexEnvi(target, pname, param);
  late final _glTexEnvi = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glTexEnvi')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texEnviv(int target, int pname, Pointer<Int> params) => _glTexEnviv(target, pname, params);
  late final _glTexEnviv = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glTexEnviv')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void texGend(int coord, int pname, double param) => _glTexGend(coord, pname, param);
  late final _glTexGend = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Double)>>('glTexGend')
      .asFunction<void Function(int, int, double)>(isLeaf: true);

  void texGendv(int coord, int pname, Pointer<Double> params) => _glTexGendv(coord, pname, params);
  late final _glTexGendv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glTexGendv')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void texGenf(int coord, int pname, double param) => _glTexGenf(coord, pname, param);
  late final _glTexGenf = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glTexGenf')
      .asFunction<void Function(int, int, double)>(isLeaf: true);

  void texGenfv(int coord, int pname, Pointer<Float> params) => _glTexGenfv(coord, pname, params);
  late final _glTexGenfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glTexGenfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void texGeni(int coord, int pname, int param) => _glTexGeni(coord, pname, param);
  late final _glTexGeni = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glTexGeni')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texGeniv(int coord, int pname, Pointer<Int> params) => _glTexGeniv(coord, pname, params);
  late final _glTexGeniv = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glTexGeniv')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void feedbackBuffer(int size, int type, Pointer<Float> buffer) => _glFeedbackBuffer(size, type, buffer);
  late final _glFeedbackBuffer =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Pointer<Float>)>>('glFeedbackBuffer')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void selectBuffer(int size, Pointer<UnsignedInt> buffer) => _glSelectBuffer(size, buffer);
  late final _glSelectBuffer = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glSelectBuffer')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int renderMode(int mode) => _glRenderMode(mode);
  late final _glRenderMode =
      _lookup<NativeFunction<Int Function(UnsignedInt)>>('glRenderMode').asFunction<int Function(int)>(isLeaf: true);

  void initNames() => _glInitNames();
  late final _glInitNames =
      _lookup<NativeFunction<Void Function()>>('glInitNames').asFunction<void Function()>(isLeaf: true);

  void loadName(int name) => _glLoadName(name);
  late final _glLoadName =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glLoadName').asFunction<void Function(int)>(isLeaf: true);

  void passThrough(double token) => _glPassThrough(token);
  late final _glPassThrough =
      _lookup<NativeFunction<Void Function(Float)>>('glPassThrough').asFunction<void Function(double)>(isLeaf: true);

  void popName() => _glPopName();
  late final _glPopName =
      _lookup<NativeFunction<Void Function()>>('glPopName').asFunction<void Function()>(isLeaf: true);

  void pushName(int name) => _glPushName(name);
  late final _glPushName =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glPushName').asFunction<void Function(int)>(isLeaf: true);

  void clearAccum(double red, double green, double blue, double alpha) => _glClearAccum(red, green, blue, alpha);
  late final _glClearAccum = _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glClearAccum')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void clearIndex(double c) => _glClearIndex(c);
  late final _glClearIndex =
      _lookup<NativeFunction<Void Function(Float)>>('glClearIndex').asFunction<void Function(double)>(isLeaf: true);

  void indexMask(int mask) => _glIndexMask(mask);
  late final _glIndexMask =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glIndexMask').asFunction<void Function(int)>(isLeaf: true);

  void accum(int op, double value) => _glAccum(op, value);
  late final _glAccum = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glAccum')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void popAttrib() => _glPopAttrib();
  late final _glPopAttrib =
      _lookup<NativeFunction<Void Function()>>('glPopAttrib').asFunction<void Function()>(isLeaf: true);

  void pushAttrib(int mask) => _glPushAttrib(mask);
  late final _glPushAttrib =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glPushAttrib').asFunction<void Function(int)>(isLeaf: true);

  void map1d(int target, double u1, double u2, int stride, int order, Pointer<Double> points) =>
      _glMap1d(target, u1, u2, stride, order, points);
  late final _glMap1d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Int, Int, Pointer<Double>)>>('glMap1d')
          .asFunction<void Function(int, double, double, int, int, Pointer<Double>)>(isLeaf: true);

  void map1f(int target, double u1, double u2, int stride, int order, Pointer<Float> points) =>
      _glMap1f(target, u1, u2, stride, order, points);
  late final _glMap1f =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Int, Int, Pointer<Float>)>>('glMap1f')
          .asFunction<void Function(int, double, double, int, int, Pointer<Float>)>(isLeaf: true);

  void map2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder,
          Pointer<Double> points) =>
      _glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  late final _glMap2d = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt, Double, Double, Int, Int, Double, Double, Int, Int, Pointer<Double>)>>('glMap2d')
      .asFunction<void Function(int, double, double, int, int, double, double, int, int, Pointer<Double>)>(
          isLeaf: true);

  void map2f(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder,
          Pointer<Float> points) =>
      _glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  late final _glMap2f = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Float, Float, Int, Int, Float, Float, Int, Int, Pointer<Float>)>>('glMap2f')
      .asFunction<void Function(int, double, double, int, int, double, double, int, int, Pointer<Float>)>(isLeaf: true);

  void mapGrid1d(int un, double u1, double u2) => _glMapGrid1d(un, u1, u2);
  late final _glMapGrid1d = _lookup<NativeFunction<Void Function(Int, Double, Double)>>('glMapGrid1d')
      .asFunction<void Function(int, double, double)>(isLeaf: true);

  void mapGrid1f(int un, double u1, double u2) => _glMapGrid1f(un, u1, u2);
  late final _glMapGrid1f = _lookup<NativeFunction<Void Function(Int, Float, Float)>>('glMapGrid1f')
      .asFunction<void Function(int, double, double)>(isLeaf: true);

  void mapGrid2d(int un, double u1, double u2, int vn, double v1, double v2) => _glMapGrid2d(un, u1, u2, vn, v1, v2);
  late final _glMapGrid2d =
      _lookup<NativeFunction<Void Function(Int, Double, Double, Int, Double, Double)>>('glMapGrid2d')
          .asFunction<void Function(int, double, double, int, double, double)>(isLeaf: true);

  void mapGrid2f(int un, double u1, double u2, int vn, double v1, double v2) => _glMapGrid2f(un, u1, u2, vn, v1, v2);
  late final _glMapGrid2f = _lookup<NativeFunction<Void Function(Int, Float, Float, Int, Float, Float)>>('glMapGrid2f')
      .asFunction<void Function(int, double, double, int, double, double)>(isLeaf: true);

  void evalCoord1d(double u) => _glEvalCoord1d(u);
  late final _glEvalCoord1d =
      _lookup<NativeFunction<Void Function(Double)>>('glEvalCoord1d').asFunction<void Function(double)>(isLeaf: true);

  void evalCoord1dv(Pointer<Double> u) => _glEvalCoord1dv(u);
  late final _glEvalCoord1dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glEvalCoord1dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void evalCoord1f(double u) => _glEvalCoord1f(u);
  late final _glEvalCoord1f =
      _lookup<NativeFunction<Void Function(Float)>>('glEvalCoord1f').asFunction<void Function(double)>(isLeaf: true);

  void evalCoord1fv(Pointer<Float> u) => _glEvalCoord1fv(u);
  late final _glEvalCoord1fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glEvalCoord1fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void evalCoord2d(double u, double v) => _glEvalCoord2d(u, v);
  late final _glEvalCoord2d = _lookup<NativeFunction<Void Function(Double, Double)>>('glEvalCoord2d')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void evalCoord2dv(Pointer<Double> u) => _glEvalCoord2dv(u);
  late final _glEvalCoord2dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glEvalCoord2dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void evalCoord2f(double u, double v) => _glEvalCoord2f(u, v);
  late final _glEvalCoord2f = _lookup<NativeFunction<Void Function(Float, Float)>>('glEvalCoord2f')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void evalCoord2fv(Pointer<Float> u) => _glEvalCoord2fv(u);
  late final _glEvalCoord2fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glEvalCoord2fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void evalMesh1(int mode, int i1, int i2) => _glEvalMesh1(mode, i1, i2);
  late final _glEvalMesh1 = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glEvalMesh1')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void evalPoint1(int i) => _glEvalPoint1(i);
  late final _glEvalPoint1 =
      _lookup<NativeFunction<Void Function(Int)>>('glEvalPoint1').asFunction<void Function(int)>(isLeaf: true);

  void evalMesh2(int mode, int i1, int i2, int j1, int j2) => _glEvalMesh2(mode, i1, i2, j1, j2);
  late final _glEvalMesh2 = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glEvalMesh2')
      .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void evalPoint2(int i, int j) => _glEvalPoint2(i, j);
  late final _glEvalPoint2 = _lookup<NativeFunction<Void Function(Int, Int)>>('glEvalPoint2')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void alphaFunc(int func, double ref) => _glAlphaFunc(func, ref);
  late final _glAlphaFunc = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glAlphaFunc')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void pixelZoom(double xfactor, double yfactor) => _glPixelZoom(xfactor, yfactor);
  late final _glPixelZoom = _lookup<NativeFunction<Void Function(Float, Float)>>('glPixelZoom')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void pixelTransferf(int pname, double param) => _glPixelTransferf(pname, param);
  late final _glPixelTransferf = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glPixelTransferf')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void pixelTransferi(int pname, int param) => _glPixelTransferi(pname, param);
  late final _glPixelTransferi = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glPixelTransferi')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void pixelMapfv(int map, int mapsize, Pointer<Float> values) => _glPixelMapfv(map, mapsize, values);
  late final _glPixelMapfv = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glPixelMapfv')
      .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void pixelMapuiv(int map, int mapsize, Pointer<UnsignedInt> values) => _glPixelMapuiv(map, mapsize, values);
  late final _glPixelMapuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glPixelMapuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void pixelMapusv(int map, int mapsize, Pointer<UnsignedShort> values) => _glPixelMapusv(map, mapsize, values);
  late final _glPixelMapusv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedShort>)>>('glPixelMapusv')
          .asFunction<void Function(int, int, Pointer<UnsignedShort>)>(isLeaf: true);

  void copyPixels(int x, int y, int width, int height, int type) => _glCopyPixels(x, y, width, height, type);
  late final _glCopyPixels = _lookup<NativeFunction<Void Function(Int, Int, Int, Int, UnsignedInt)>>('glCopyPixels')
      .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void drawPixels(int width, int height, int format, int type, Pointer<Void> pixels) =>
      _glDrawPixels(width, height, format, type, pixels);
  late final _glDrawPixels =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>('glDrawPixels')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getClipPlane(int plane, Pointer<Double> equation) => _glGetClipPlane(plane, equation);
  late final _glGetClipPlane = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glGetClipPlane')
      .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void getLightfv(int light, int pname, Pointer<Float> params) => _glGetLightfv(light, pname, params);
  late final _glGetLightfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetLightfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getLightiv(int light, int pname, Pointer<Int> params) => _glGetLightiv(light, pname, params);
  late final _glGetLightiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetLightiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getMapdv(int target, int query, Pointer<Double> v) => _glGetMapdv(target, query, v);
  late final _glGetMapdv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetMapdv')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void getMapfv(int target, int query, Pointer<Float> v) => _glGetMapfv(target, query, v);
  late final _glGetMapfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetMapfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getMapiv(int target, int query, Pointer<Int> v) => _glGetMapiv(target, query, v);
  late final _glGetMapiv = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetMapiv')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getMaterialfv(int face, int pname, Pointer<Float> params) => _glGetMaterialfv(face, pname, params);
  late final _glGetMaterialfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetMaterialfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getMaterialiv(int face, int pname, Pointer<Int> params) => _glGetMaterialiv(face, pname, params);
  late final _glGetMaterialiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetMaterialiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getPixelMapfv(int map, Pointer<Float> values) => _glGetPixelMapfv(map, values);
  late final _glGetPixelMapfv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glGetPixelMapfv')
      .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void getPixelMapuiv(int map, Pointer<UnsignedInt> values) => _glGetPixelMapuiv(map, values);
  late final _glGetPixelMapuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glGetPixelMapuiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getPixelMapusv(int map, Pointer<UnsignedShort> values) => _glGetPixelMapusv(map, values);
  late final _glGetPixelMapusv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glGetPixelMapusv')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void getPolygonStipple(Pointer<UnsignedChar> mask) => _glGetPolygonStipple(mask);
  late final _glGetPolygonStipple = _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>)>>('glGetPolygonStipple')
      .asFunction<void Function(Pointer<UnsignedChar>)>(isLeaf: true);

  void getTexEnvfv(int target, int pname, Pointer<Float> params) => _glGetTexEnvfv(target, pname, params);
  late final _glGetTexEnvfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetTexEnvfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getTexEnviv(int target, int pname, Pointer<Int> params) => _glGetTexEnviv(target, pname, params);
  late final _glGetTexEnviv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetTexEnviv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getTexGendv(int coord, int pname, Pointer<Double> params) => _glGetTexGendv(coord, pname, params);
  late final _glGetTexGendv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetTexGendv')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void getTexGenfv(int coord, int pname, Pointer<Float> params) => _glGetTexGenfv(coord, pname, params);
  late final _glGetTexGenfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetTexGenfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getTexGeniv(int coord, int pname, Pointer<Int> params) => _glGetTexGeniv(coord, pname, params);
  late final _glGetTexGeniv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetTexGeniv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  int isList(int list) => _glIsList(list);
  late final _glIsList = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsList')
      .asFunction<int Function(int)>(isLeaf: true);

  void frustum(double left, double right, double bottom, double top, double zNear, double zFar) =>
      _glFrustum(left, right, bottom, top, zNear, zFar);
  late final _glFrustum =
      _lookup<NativeFunction<Void Function(Double, Double, Double, Double, Double, Double)>>('glFrustum')
          .asFunction<void Function(double, double, double, double, double, double)>(isLeaf: true);

  void loadIdentity() => _glLoadIdentity();
  late final _glLoadIdentity =
      _lookup<NativeFunction<Void Function()>>('glLoadIdentity').asFunction<void Function()>(isLeaf: true);

  void loadMatrixf(Pointer<Float> m) => _glLoadMatrixf(m);
  late final _glLoadMatrixf = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glLoadMatrixf')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void loadMatrixd(Pointer<Double> m) => _glLoadMatrixd(m);
  late final _glLoadMatrixd = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glLoadMatrixd')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void matrixMode(int mode) => _glMatrixMode(mode);
  late final _glMatrixMode =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMatrixMode').asFunction<void Function(int)>(isLeaf: true);

  void multMatrixf(Pointer<Float> m) => _glMultMatrixf(m);
  late final _glMultMatrixf = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glMultMatrixf')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void multMatrixd(Pointer<Double> m) => _glMultMatrixd(m);
  late final _glMultMatrixd = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glMultMatrixd')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void ortho(double left, double right, double bottom, double top, double zNear, double zFar) =>
      _glOrtho(left, right, bottom, top, zNear, zFar);
  late final _glOrtho =
      _lookup<NativeFunction<Void Function(Double, Double, Double, Double, Double, Double)>>('glOrtho')
          .asFunction<void Function(double, double, double, double, double, double)>(isLeaf: true);

  void popMatrix() => _glPopMatrix();
  late final _glPopMatrix =
      _lookup<NativeFunction<Void Function()>>('glPopMatrix').asFunction<void Function()>(isLeaf: true);

  void pushMatrix() => _glPushMatrix();
  late final _glPushMatrix =
      _lookup<NativeFunction<Void Function()>>('glPushMatrix').asFunction<void Function()>(isLeaf: true);

  void rotated(double angle, double x, double y, double z) => _glRotated(angle, x, y, z);
  late final _glRotated = _lookup<NativeFunction<Void Function(Double, Double, Double, Double)>>('glRotated')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void rotatef(double angle, double x, double y, double z) => _glRotatef(angle, x, y, z);
  late final _glRotatef = _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glRotatef')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void scaled(double x, double y, double z) => _glScaled(x, y, z);
  late final _glScaled = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glScaled')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void scalef(double x, double y, double z) => _glScalef(x, y, z);
  late final _glScalef = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glScalef')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void translated(double x, double y, double z) => _glTranslated(x, y, z);
  late final _glTranslated = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glTranslated')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void translatef(double x, double y, double z) => _glTranslatef(x, y, z);
  late final _glTranslatef = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glTranslatef')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void drawArrays(int mode, int first, int count) => _glDrawArrays(mode, first, count);
  late final _glDrawArrays = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glDrawArrays')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void drawElements(int mode, int count, int type, Pointer<Void> indices) =>
      _glDrawElements(mode, count, type, indices);
  late final _glDrawElements =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>)>>('glDrawElements')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getPointerv(int pname, Pointer<Pointer<Void>> params) => _glGetPointerv(pname, params);
  late final _glGetPointerv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Pointer<Void>>)>>('glGetPointerv')
          .asFunction<void Function(int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void polygonOffset(double factor, double units) => _glPolygonOffset(factor, units);
  late final _glPolygonOffset = _lookup<NativeFunction<Void Function(Float, Float)>>('glPolygonOffset')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void copyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border) =>
      _glCopyTexImage1D(target, level, internalformat, x, y, width, border);
  late final _glCopyTexImage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int)>>('glCopyTexImage1D')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void copyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border) =>
      _glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
  late final _glCopyTexImage2D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Int)>>('glCopyTexImage2D')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void copyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width) =>
      _glCopyTexSubImage1D(target, level, xoffset, x, y, width);
  late final _glCopyTexSubImage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int)>>('glCopyTexSubImage1D')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void copyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) =>
      _glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
  late final _glCopyTexSubImage2D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int)>>('glCopyTexSubImage2D')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void texSubImage1D(int target, int level, int xoffset, int width, int format, int type, Pointer<Void> pixels) =>
      _glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
  late final _glTexSubImage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glTexSubImage1D')
          .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void texSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
          Pointer<Void> pixels) =>
      _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
  late final _glTexSubImage2D = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>('glTexSubImage2D')
      .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void bindTexture(int target, int texture) => _glBindTexture(target, texture);
  late final _glBindTexture = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindTexture')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteTextures(int n, Pointer<UnsignedInt> textures) => _glDeleteTextures(n, textures);
  late final _glDeleteTextures = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteTextures')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genTextures(int n, Pointer<UnsignedInt> textures) => _glGenTextures(n, textures);
  late final _glGenTextures = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenTextures')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isTexture(int texture) => _glIsTexture(texture);
  late final _glIsTexture = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsTexture')
      .asFunction<int Function(int)>(isLeaf: true);

  void arrayElement(int i) => _glArrayElement(i);
  late final _glArrayElement =
      _lookup<NativeFunction<Void Function(Int)>>('glArrayElement').asFunction<void Function(int)>(isLeaf: true);

  void colorPointer(int size, int type, int stride, Pointer<Void> pointer) =>
      _glColorPointer(size, type, stride, pointer);
  late final _glColorPointer =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Void>)>>('glColorPointer')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void disableClientState(int array) => _glDisableClientState(array);
  late final _glDisableClientState = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDisableClientState')
      .asFunction<void Function(int)>(isLeaf: true);

  void edgeFlagPointer(int stride, Pointer<Void> pointer) => _glEdgeFlagPointer(stride, pointer);
  late final _glEdgeFlagPointer = _lookup<NativeFunction<Void Function(Int, Pointer<Void>)>>('glEdgeFlagPointer')
      .asFunction<void Function(int, Pointer<Void>)>(isLeaf: true);

  void enableClientState(int array) => _glEnableClientState(array);
  late final _glEnableClientState = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glEnableClientState')
      .asFunction<void Function(int)>(isLeaf: true);

  void indexPointer(int type, int stride, Pointer<Void> pointer) => _glIndexPointer(type, stride, pointer);
  late final _glIndexPointer = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glIndexPointer')
      .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void interleavedArrays(int format, int stride, Pointer<Void> pointer) =>
      _glInterleavedArrays(format, stride, pointer);
  late final _glInterleavedArrays =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glInterleavedArrays')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void normalPointer(int type, int stride, Pointer<Void> pointer) => _glNormalPointer(type, stride, pointer);
  late final _glNormalPointer =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glNormalPointer')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void texCoordPointer(int size, int type, int stride, Pointer<Void> pointer) =>
      _glTexCoordPointer(size, type, stride, pointer);
  late final _glTexCoordPointer =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Void>)>>('glTexCoordPointer')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void vertexPointer(int size, int type, int stride, Pointer<Void> pointer) =>
      _glVertexPointer(size, type, stride, pointer);
  late final _glVertexPointer =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Void>)>>('glVertexPointer')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  int areTexturesResident(int n, Pointer<UnsignedInt> textures, Pointer<UnsignedChar> residences) =>
      _glAreTexturesResident(n, textures, residences);
  late final _glAreTexturesResident =
      _lookup<NativeFunction<UnsignedChar Function(Int, Pointer<UnsignedInt>, Pointer<UnsignedChar>)>>(
              'glAreTexturesResident')
          .asFunction<int Function(int, Pointer<UnsignedInt>, Pointer<UnsignedChar>)>(isLeaf: true);

  void prioritizeTextures(int n, Pointer<UnsignedInt> textures, Pointer<Float> priorities) =>
      _glPrioritizeTextures(n, textures, priorities);
  late final _glPrioritizeTextures =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>, Pointer<Float>)>>('glPrioritizeTextures')
          .asFunction<void Function(int, Pointer<UnsignedInt>, Pointer<Float>)>(isLeaf: true);

  void indexub(int c) => _glIndexub(c);
  late final _glIndexub =
      _lookup<NativeFunction<Void Function(UnsignedChar)>>('glIndexub').asFunction<void Function(int)>(isLeaf: true);

  void indexubv(Pointer<UnsignedChar> c) => _glIndexubv(c);
  late final _glIndexubv = _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>)>>('glIndexubv')
      .asFunction<void Function(Pointer<UnsignedChar>)>(isLeaf: true);

  void popClientAttrib() => _glPopClientAttrib();
  late final _glPopClientAttrib =
      _lookup<NativeFunction<Void Function()>>('glPopClientAttrib').asFunction<void Function()>(isLeaf: true);

  void pushClientAttrib(int mask) => _glPushClientAttrib(mask);
  late final _glPushClientAttrib = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glPushClientAttrib')
      .asFunction<void Function(int)>(isLeaf: true);

  void drawRangeElements(int mode, int start, int end, int count, int type, Pointer<Void> indices) =>
      _glDrawRangeElements(mode, start, end, count, type, indices);
  late final _glDrawRangeElements =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, UnsignedInt, Pointer<Void>)>>(
              'glDrawRangeElements')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void texImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format,
          int type, Pointer<Void> pixels) =>
      _glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
  late final _glTexImage3D = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>('glTexImage3D')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void texSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth,
          int format, int type, Pointer<Void> pixels) =>
      _glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  late final _glTexSubImage3D = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTexSubImage3D')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void copyTexSubImage3D(
          int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) =>
      _glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  late final _glCopyTexSubImage3D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int)>>('glCopyTexSubImage3D')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void activeTexture(int texture) => _glActiveTexture(texture);
  late final _glActiveTexture = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glActiveTexture')
      .asFunction<void Function(int)>(isLeaf: true);

  void sampleCoverage(double value, int invert) => _glSampleCoverage(value, invert);
  late final _glSampleCoverage = _lookup<NativeFunction<Void Function(Float, UnsignedChar)>>('glSampleCoverage')
      .asFunction<void Function(double, int)>(isLeaf: true);

  void compressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border,
          int imageSize, Pointer<Void> data) =>
      _glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
  late final _glCompressedTexImage3D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Int, Pointer<Void>)>>(
              'glCompressedTexImage3D')
          .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize,
          Pointer<Void> data) =>
      _glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
  late final _glCompressedTexImage2D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Pointer<Void>)>>(
              'glCompressedTexImage2D')
          .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTexImage1D(
          int target, int level, int internalformat, int width, int border, int imageSize, Pointer<Void> data) =>
      _glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
  late final _glCompressedTexImage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Pointer<Void>)>>(
              'glCompressedTexImage1D')
          .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height,
          int depth, int format, int imageSize, Pointer<Void> data) =>
      _glCompressedTexSubImage3D(
          target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  late final _glCompressedTexSubImage3D = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, Int,
                  Pointer<Void>)>>('glCompressedTexSubImage3D')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format,
          int imageSize, Pointer<Void> data) =>
      _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  late final _glCompressedTexSubImage2D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glCompressedTexSubImage2D')
          .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTexSubImage1D(
          int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void> data) =>
      _glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
  late final _glCompressedTexSubImage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glCompressedTexSubImage1D')
          .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getCompressedTexImage(int target, int level, Pointer<Void> img) => _glGetCompressedTexImage(target, level, img);
  late final _glGetCompressedTexImage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glGetCompressedTexImage')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void clientActiveTexture(int texture) => _glClientActiveTexture(texture);
  late final _glClientActiveTexture = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glClientActiveTexture')
      .asFunction<void Function(int)>(isLeaf: true);

  void multiTexCoord1d(int target, double s) => _glMultiTexCoord1d(target, s);
  late final _glMultiTexCoord1d = _lookup<NativeFunction<Void Function(UnsignedInt, Double)>>('glMultiTexCoord1d')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void multiTexCoord1dv(int target, Pointer<Double> v) => _glMultiTexCoord1dv(target, v);
  late final _glMultiTexCoord1dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMultiTexCoord1dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void multiTexCoord1f(int target, double s) => _glMultiTexCoord1f(target, s);
  late final _glMultiTexCoord1f = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glMultiTexCoord1f')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void multiTexCoord1fv(int target, Pointer<Float> v) => _glMultiTexCoord1fv(target, v);
  late final _glMultiTexCoord1fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMultiTexCoord1fv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void multiTexCoord1i(int target, int s) => _glMultiTexCoord1i(target, s);
  late final _glMultiTexCoord1i = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glMultiTexCoord1i')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void multiTexCoord1iv(int target, Pointer<Int> v) => _glMultiTexCoord1iv(target, v);
  late final _glMultiTexCoord1iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glMultiTexCoord1iv')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void multiTexCoord1s(int target, int s) => _glMultiTexCoord1s(target, s);
  late final _glMultiTexCoord1s = _lookup<NativeFunction<Void Function(UnsignedInt, Short)>>('glMultiTexCoord1s')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void multiTexCoord1sv(int target, Pointer<Short> v) => _glMultiTexCoord1sv(target, v);
  late final _glMultiTexCoord1sv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glMultiTexCoord1sv')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void multiTexCoord2d(int target, double s, double t) => _glMultiTexCoord2d(target, s, t);
  late final _glMultiTexCoord2d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double)>>('glMultiTexCoord2d')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void multiTexCoord2dv(int target, Pointer<Double> v) => _glMultiTexCoord2dv(target, v);
  late final _glMultiTexCoord2dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMultiTexCoord2dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void multiTexCoord2f(int target, double s, double t) => _glMultiTexCoord2f(target, s, t);
  late final _glMultiTexCoord2f = _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float)>>('glMultiTexCoord2f')
      .asFunction<void Function(int, double, double)>(isLeaf: true);

  void multiTexCoord2fv(int target, Pointer<Float> v) => _glMultiTexCoord2fv(target, v);
  late final _glMultiTexCoord2fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMultiTexCoord2fv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void multiTexCoord2i(int target, int s, int t) => _glMultiTexCoord2i(target, s, t);
  late final _glMultiTexCoord2i = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glMultiTexCoord2i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoord2iv(int target, Pointer<Int> v) => _glMultiTexCoord2iv(target, v);
  late final _glMultiTexCoord2iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glMultiTexCoord2iv')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void multiTexCoord2s(int target, int s, int t) => _glMultiTexCoord2s(target, s, t);
  late final _glMultiTexCoord2s = _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short)>>('glMultiTexCoord2s')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoord2sv(int target, Pointer<Short> v) => _glMultiTexCoord2sv(target, v);
  late final _glMultiTexCoord2sv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glMultiTexCoord2sv')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void multiTexCoord3d(int target, double s, double t, double r) => _glMultiTexCoord3d(target, s, t, r);
  late final _glMultiTexCoord3d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glMultiTexCoord3d')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void multiTexCoord3dv(int target, Pointer<Double> v) => _glMultiTexCoord3dv(target, v);
  late final _glMultiTexCoord3dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMultiTexCoord3dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void multiTexCoord3f(int target, double s, double t, double r) => _glMultiTexCoord3f(target, s, t, r);
  late final _glMultiTexCoord3f =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float)>>('glMultiTexCoord3f')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void multiTexCoord3fv(int target, Pointer<Float> v) => _glMultiTexCoord3fv(target, v);
  late final _glMultiTexCoord3fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMultiTexCoord3fv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void multiTexCoord3i(int target, int s, int t, int r) => _glMultiTexCoord3i(target, s, t, r);
  late final _glMultiTexCoord3i =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glMultiTexCoord3i')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexCoord3iv(int target, Pointer<Int> v) => _glMultiTexCoord3iv(target, v);
  late final _glMultiTexCoord3iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glMultiTexCoord3iv')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void multiTexCoord3s(int target, int s, int t, int r) => _glMultiTexCoord3s(target, s, t, r);
  late final _glMultiTexCoord3s =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short)>>('glMultiTexCoord3s')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexCoord3sv(int target, Pointer<Short> v) => _glMultiTexCoord3sv(target, v);
  late final _glMultiTexCoord3sv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glMultiTexCoord3sv')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void multiTexCoord4d(int target, double s, double t, double r, double q) => _glMultiTexCoord4d(target, s, t, r, q);
  late final _glMultiTexCoord4d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double)>>('glMultiTexCoord4d')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void multiTexCoord4dv(int target, Pointer<Double> v) => _glMultiTexCoord4dv(target, v);
  late final _glMultiTexCoord4dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMultiTexCoord4dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void multiTexCoord4f(int target, double s, double t, double r, double q) => _glMultiTexCoord4f(target, s, t, r, q);
  late final _glMultiTexCoord4f =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float)>>('glMultiTexCoord4f')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void multiTexCoord4fv(int target, Pointer<Float> v) => _glMultiTexCoord4fv(target, v);
  late final _glMultiTexCoord4fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMultiTexCoord4fv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void multiTexCoord4i(int target, int s, int t, int r, int q) => _glMultiTexCoord4i(target, s, t, r, q);
  late final _glMultiTexCoord4i =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glMultiTexCoord4i')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void multiTexCoord4iv(int target, Pointer<Int> v) => _glMultiTexCoord4iv(target, v);
  late final _glMultiTexCoord4iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glMultiTexCoord4iv')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void multiTexCoord4s(int target, int s, int t, int r, int q) => _glMultiTexCoord4s(target, s, t, r, q);
  late final _glMultiTexCoord4s =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short, Short)>>('glMultiTexCoord4s')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void multiTexCoord4sv(int target, Pointer<Short> v) => _glMultiTexCoord4sv(target, v);
  late final _glMultiTexCoord4sv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glMultiTexCoord4sv')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void loadTransposeMatrixf(Pointer<Float> m) => _glLoadTransposeMatrixf(m);
  late final _glLoadTransposeMatrixf = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glLoadTransposeMatrixf')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void loadTransposeMatrixd(Pointer<Double> m) => _glLoadTransposeMatrixd(m);
  late final _glLoadTransposeMatrixd = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glLoadTransposeMatrixd')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void multTransposeMatrixf(Pointer<Float> m) => _glMultTransposeMatrixf(m);
  late final _glMultTransposeMatrixf = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glMultTransposeMatrixf')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void multTransposeMatrixd(Pointer<Double> m) => _glMultTransposeMatrixd(m);
  late final _glMultTransposeMatrixd = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glMultTransposeMatrixd')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void blendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) =>
      _glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  late final _glBlendFuncSeparate =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glBlendFuncSeparate')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiDrawArrays(int mode, Pointer<Int> first, Pointer<Int> count, int drawcount) =>
      _glMultiDrawArrays(mode, first, count, drawcount);
  late final _glMultiDrawArrays =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>, Pointer<Int>, Int)>>('glMultiDrawArrays')
          .asFunction<void Function(int, Pointer<Int>, Pointer<Int>, int)>(isLeaf: true);

  void multiDrawElements(int mode, Pointer<Int> count, int type, Pointer<Pointer<Void>> indices, int drawcount) =>
      _glMultiDrawElements(mode, count, type, indices, drawcount);
  late final _glMultiDrawElements =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>, UnsignedInt, Pointer<Pointer<Void>>, Int)>>(
              'glMultiDrawElements')
          .asFunction<void Function(int, Pointer<Int>, int, Pointer<Pointer<Void>>, int)>(isLeaf: true);

  void pointParameterf(int pname, double param) => _glPointParameterf(pname, param);
  late final _glPointParameterf = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glPointParameterf')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void pointParameterfv(int pname, Pointer<Float> params) => _glPointParameterfv(pname, params);
  late final _glPointParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glPointParameterfv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void pointParameteri(int pname, int param) => _glPointParameteri(pname, param);
  late final _glPointParameteri = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glPointParameteri')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void pointParameteriv(int pname, Pointer<Int> params) => _glPointParameteriv(pname, params);
  late final _glPointParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glPointParameteriv')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void fogCoordf(double coord) => _glFogCoordf(coord);
  late final _glFogCoordf =
      _lookup<NativeFunction<Void Function(Float)>>('glFogCoordf').asFunction<void Function(double)>(isLeaf: true);

  void fogCoordfv(Pointer<Float> coord) => _glFogCoordfv(coord);
  late final _glFogCoordfv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glFogCoordfv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void fogCoordd(double coord) => _glFogCoordd(coord);
  late final _glFogCoordd =
      _lookup<NativeFunction<Void Function(Double)>>('glFogCoordd').asFunction<void Function(double)>(isLeaf: true);

  void fogCoorddv(Pointer<Double> coord) => _glFogCoorddv(coord);
  late final _glFogCoorddv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glFogCoorddv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void fogCoordPointer(int type, int stride, Pointer<Void> pointer) => _glFogCoordPointer(type, stride, pointer);
  late final _glFogCoordPointer =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glFogCoordPointer')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void secondaryColor3b(int red, int green, int blue) => _glSecondaryColor3b(red, green, blue);
  late final _glSecondaryColor3b =
      _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar)>>('glSecondaryColor3b')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3bv(Pointer<SignedChar> v) => _glSecondaryColor3bv(v);
  late final _glSecondaryColor3bv = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glSecondaryColor3bv')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void secondaryColor3d(double red, double green, double blue) => _glSecondaryColor3d(red, green, blue);
  late final _glSecondaryColor3d = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glSecondaryColor3d')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void secondaryColor3dv(Pointer<Double> v) => _glSecondaryColor3dv(v);
  late final _glSecondaryColor3dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glSecondaryColor3dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void secondaryColor3f(double red, double green, double blue) => _glSecondaryColor3f(red, green, blue);
  late final _glSecondaryColor3f = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glSecondaryColor3f')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void secondaryColor3fv(Pointer<Float> v) => _glSecondaryColor3fv(v);
  late final _glSecondaryColor3fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glSecondaryColor3fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void secondaryColor3i(int red, int green, int blue) => _glSecondaryColor3i(red, green, blue);
  late final _glSecondaryColor3i = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glSecondaryColor3i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3iv(Pointer<Int> v) => _glSecondaryColor3iv(v);
  late final _glSecondaryColor3iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glSecondaryColor3iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void secondaryColor3s(int red, int green, int blue) => _glSecondaryColor3s(red, green, blue);
  late final _glSecondaryColor3s = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glSecondaryColor3s')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3sv(Pointer<Short> v) => _glSecondaryColor3sv(v);
  late final _glSecondaryColor3sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glSecondaryColor3sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void secondaryColor3ub(int red, int green, int blue) => _glSecondaryColor3ub(red, green, blue);
  late final _glSecondaryColor3ub =
      _lookup<NativeFunction<Void Function(UnsignedChar, UnsignedChar, UnsignedChar)>>('glSecondaryColor3ub')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3ubv(Pointer<UnsignedChar> v) => _glSecondaryColor3ubv(v);
  late final _glSecondaryColor3ubv =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>)>>('glSecondaryColor3ubv')
          .asFunction<void Function(Pointer<UnsignedChar>)>(isLeaf: true);

  void secondaryColor3ui(int red, int green, int blue) => _glSecondaryColor3ui(red, green, blue);
  late final _glSecondaryColor3ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glSecondaryColor3ui')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3uiv(Pointer<UnsignedInt> v) => _glSecondaryColor3uiv(v);
  late final _glSecondaryColor3uiv =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>)>>('glSecondaryColor3uiv')
          .asFunction<void Function(Pointer<UnsignedInt>)>(isLeaf: true);

  void secondaryColor3us(int red, int green, int blue) => _glSecondaryColor3us(red, green, blue);
  late final _glSecondaryColor3us =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort)>>('glSecondaryColor3us')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3usv(Pointer<UnsignedShort> v) => _glSecondaryColor3usv(v);
  late final _glSecondaryColor3usv =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glSecondaryColor3usv')
          .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void secondaryColorPointer(int size, int type, int stride, Pointer<Void> pointer) =>
      _glSecondaryColorPointer(size, type, stride, pointer);
  late final _glSecondaryColorPointer =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Void>)>>('glSecondaryColorPointer')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void windowPos2d(double x, double y) => _glWindowPos2d(x, y);
  late final _glWindowPos2d = _lookup<NativeFunction<Void Function(Double, Double)>>('glWindowPos2d')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void windowPos2dv(Pointer<Double> v) => _glWindowPos2dv(v);
  late final _glWindowPos2dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glWindowPos2dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void windowPos2f(double x, double y) => _glWindowPos2f(x, y);
  late final _glWindowPos2f = _lookup<NativeFunction<Void Function(Float, Float)>>('glWindowPos2f')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void windowPos2fv(Pointer<Float> v) => _glWindowPos2fv(v);
  late final _glWindowPos2fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glWindowPos2fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void windowPos2i(int x, int y) => _glWindowPos2i(x, y);
  late final _glWindowPos2i = _lookup<NativeFunction<Void Function(Int, Int)>>('glWindowPos2i')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void windowPos2iv(Pointer<Int> v) => _glWindowPos2iv(v);
  late final _glWindowPos2iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glWindowPos2iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void windowPos2s(int x, int y) => _glWindowPos2s(x, y);
  late final _glWindowPos2s = _lookup<NativeFunction<Void Function(Short, Short)>>('glWindowPos2s')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void windowPos2sv(Pointer<Short> v) => _glWindowPos2sv(v);
  late final _glWindowPos2sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glWindowPos2sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void windowPos3d(double x, double y, double z) => _glWindowPos3d(x, y, z);
  late final _glWindowPos3d = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glWindowPos3d')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void windowPos3dv(Pointer<Double> v) => _glWindowPos3dv(v);
  late final _glWindowPos3dv = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glWindowPos3dv')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void windowPos3f(double x, double y, double z) => _glWindowPos3f(x, y, z);
  late final _glWindowPos3f = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glWindowPos3f')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void windowPos3fv(Pointer<Float> v) => _glWindowPos3fv(v);
  late final _glWindowPos3fv = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glWindowPos3fv')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void windowPos3i(int x, int y, int z) => _glWindowPos3i(x, y, z);
  late final _glWindowPos3i = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glWindowPos3i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void windowPos3iv(Pointer<Int> v) => _glWindowPos3iv(v);
  late final _glWindowPos3iv = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glWindowPos3iv')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void windowPos3s(int x, int y, int z) => _glWindowPos3s(x, y, z);
  late final _glWindowPos3s = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glWindowPos3s')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void windowPos3sv(Pointer<Short> v) => _glWindowPos3sv(v);
  late final _glWindowPos3sv = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glWindowPos3sv')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void blendColor(double red, double green, double blue, double alpha) => _glBlendColor(red, green, blue, alpha);
  late final _glBlendColor = _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glBlendColor')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void blendEquation(int mode) => _glBlendEquation(mode);
  late final _glBlendEquation = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBlendEquation')
      .asFunction<void Function(int)>(isLeaf: true);

  void genQueries(int n, Pointer<UnsignedInt> ids) => _glGenQueries(n, ids);
  late final _glGenQueries = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenQueries')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deleteQueries(int n, Pointer<UnsignedInt> ids) => _glDeleteQueries(n, ids);
  late final _glDeleteQueries = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteQueries')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isQuery(int id) => _glIsQuery(id);
  late final _glIsQuery = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsQuery')
      .asFunction<int Function(int)>(isLeaf: true);

  void beginQuery(int target, int id) => _glBeginQuery(target, id);
  late final _glBeginQuery = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBeginQuery')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void endQuery(int target) => _glEndQuery(target);
  late final _glEndQuery =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glEndQuery').asFunction<void Function(int)>(isLeaf: true);

  void getQueryiv(int target, int pname, Pointer<Int> params) => _glGetQueryiv(target, pname, params);
  late final _glGetQueryiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetQueryiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getQueryObjectiv(int id, int pname, Pointer<Int> params) => _glGetQueryObjectiv(id, pname, params);
  late final _glGetQueryObjectiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetQueryObjectiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getQueryObjectuiv(int id, int pname, Pointer<UnsignedInt> params) => _glGetQueryObjectuiv(id, pname, params);
  late final _glGetQueryObjectuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glGetQueryObjectuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void bindBuffer(int target, int buffer) => _glBindBuffer(target, buffer);
  late final _glBindBuffer = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindBuffer')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteBuffers(int n, Pointer<UnsignedInt> buffers) => _glDeleteBuffers(n, buffers);
  late final _glDeleteBuffers = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteBuffers')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genBuffers(int n, Pointer<UnsignedInt> buffers) => _glGenBuffers(n, buffers);
  late final _glGenBuffers = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenBuffers')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isBuffer(int buffer) => _glIsBuffer(buffer);
  late final _glIsBuffer = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsBuffer')
      .asFunction<int Function(int)>(isLeaf: true);

  void bufferData(int target, int size, Pointer<Void> data, int usage) => _glBufferData(target, size, data, usage);
  late final _glBufferData =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Pointer<Void>, UnsignedInt)>>('glBufferData')
          .asFunction<void Function(int, int, Pointer<Void>, int)>(isLeaf: true);

  void bufferSubData(int target, int offset, int size, Pointer<Void> data) =>
      _glBufferSubData(target, offset, size, data);
  late final _glBufferSubData =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, Pointer<Void>)>>('glBufferSubData')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getBufferSubData(int target, int offset, int size, Pointer<Void> data) =>
      _glGetBufferSubData(target, offset, size, data);
  late final _glGetBufferSubData =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, Pointer<Void>)>>('glGetBufferSubData')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  Pointer<Void> mapBuffer(int target, int access) => _glMapBuffer(target, access);
  late final _glMapBuffer = _lookup<NativeFunction<Pointer<Void> Function(UnsignedInt, UnsignedInt)>>('glMapBuffer')
      .asFunction<Pointer<Void> Function(int, int)>(isLeaf: true);

  int unmapBuffer(int target) => _glUnmapBuffer(target);
  late final _glUnmapBuffer = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glUnmapBuffer')
      .asFunction<int Function(int)>(isLeaf: true);

  void getBufferParameteriv(int target, int pname, Pointer<Int> params) =>
      _glGetBufferParameteriv(target, pname, params);
  late final _glGetBufferParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetBufferParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getBufferPointerv(int target, int pname, Pointer<Pointer<Void>> params) =>
      _glGetBufferPointerv(target, pname, params);
  late final _glGetBufferPointerv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>('glGetBufferPointerv')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void blendEquationSeparate(int modeRGB, int modeAlpha) => _glBlendEquationSeparate(modeRGB, modeAlpha);
  late final _glBlendEquationSeparate =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBlendEquationSeparate')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void drawBuffers(int n, Pointer<UnsignedInt> bufs) => _glDrawBuffers(n, bufs);
  late final _glDrawBuffers = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDrawBuffers')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void stencilOpSeparate(int face, int sfail, int dpfail, int dppass) =>
      _glStencilOpSeparate(face, sfail, dpfail, dppass);
  late final _glStencilOpSeparate =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glStencilOpSeparate')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void stencilFuncSeparate(int face, int func, int ref, int mask) => _glStencilFuncSeparate(face, func, ref, mask);
  late final _glStencilFuncSeparate =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt)>>('glStencilFuncSeparate')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void stencilMaskSeparate(int face, int mask) => _glStencilMaskSeparate(face, mask);
  late final _glStencilMaskSeparate =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glStencilMaskSeparate')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void attachShader(int program, int shader) => _glAttachShader(program, shader);
  late final _glAttachShader = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glAttachShader')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void bindAttribLocation(int program, int index, Pointer<Char> name) => _glBindAttribLocation(program, index, name);
  late final _glBindAttribLocation =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Char>)>>('glBindAttribLocation')
          .asFunction<void Function(int, int, Pointer<Char>)>(isLeaf: true);

  void compileShader(int shader) => _glCompileShader(shader);
  late final _glCompileShader = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glCompileShader')
      .asFunction<void Function(int)>(isLeaf: true);

  int createProgram() => _glCreateProgram();
  late final _glCreateProgram =
      _lookup<NativeFunction<UnsignedInt Function()>>('glCreateProgram').asFunction<int Function()>(isLeaf: true);

  int createShader(int type) => _glCreateShader(type);
  late final _glCreateShader = _lookup<NativeFunction<UnsignedInt Function(UnsignedInt)>>('glCreateShader')
      .asFunction<int Function(int)>(isLeaf: true);

  void deleteProgram(int program) => _glDeleteProgram(program);
  late final _glDeleteProgram = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDeleteProgram')
      .asFunction<void Function(int)>(isLeaf: true);

  void deleteShader(int shader) => _glDeleteShader(shader);
  late final _glDeleteShader = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDeleteShader')
      .asFunction<void Function(int)>(isLeaf: true);

  void detachShader(int program, int shader) => _glDetachShader(program, shader);
  late final _glDetachShader = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDetachShader')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void disableVertexAttribArray(int index) => _glDisableVertexAttribArray(index);
  late final _glDisableVertexAttribArray =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDisableVertexAttribArray')
          .asFunction<void Function(int)>(isLeaf: true);

  void enableVertexAttribArray(int index) => _glEnableVertexAttribArray(index);
  late final _glEnableVertexAttribArray =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glEnableVertexAttribArray')
          .asFunction<void Function(int)>(isLeaf: true);

  void getActiveAttrib(int program, int index, int bufSize, Pointer<Int> length, Pointer<Int> size,
          Pointer<UnsignedInt> type, Pointer<Char> name) =>
      _glGetActiveAttrib(program, index, bufSize, length, size, type, name);
  late final _glGetActiveAttrib = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>,
                  Pointer<Char>)>>('glGetActiveAttrib')
      .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<Char>)>(
          isLeaf: true);

  void getActiveUniform(int program, int index, int bufSize, Pointer<Int> length, Pointer<Int> size,
          Pointer<UnsignedInt> type, Pointer<Char> name) =>
      _glGetActiveUniform(program, index, bufSize, length, size, type, name);
  late final _glGetActiveUniform = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>,
                  Pointer<Char>)>>('glGetActiveUniform')
      .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<Char>)>(
          isLeaf: true);

  void getAttachedShaders(int program, int maxCount, Pointer<Int> count, Pointer<UnsignedInt> shaders) =>
      _glGetAttachedShaders(program, maxCount, count, shaders);
  late final _glGetAttachedShaders =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, Pointer<UnsignedInt>)>>(
              'glGetAttachedShaders')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<UnsignedInt>)>(isLeaf: true);

  int getAttribLocation(int program, Pointer<Char> name) => _glGetAttribLocation(program, name);
  late final _glGetAttribLocation =
      _lookup<NativeFunction<Int Function(UnsignedInt, Pointer<Char>)>>('glGetAttribLocation')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void getProgramiv(int program, int pname, Pointer<Int> params) => _glGetProgramiv(program, pname, params);
  late final _glGetProgramiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetProgramiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getProgramInfoLog(int program, int bufSize, Pointer<Int> length, Pointer<Char> infoLog) =>
      _glGetProgramInfoLog(program, bufSize, length, infoLog);
  late final _glGetProgramInfoLog =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>('glGetProgramInfoLog')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void getShaderiv(int shader, int pname, Pointer<Int> params) => _glGetShaderiv(shader, pname, params);
  late final _glGetShaderiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetShaderiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getShaderInfoLog(int shader, int bufSize, Pointer<Int> length, Pointer<Char> infoLog) =>
      _glGetShaderInfoLog(shader, bufSize, length, infoLog);
  late final _glGetShaderInfoLog =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>('glGetShaderInfoLog')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void getShaderSource(int shader, int bufSize, Pointer<Int> length, Pointer<Char> source) =>
      _glGetShaderSource(shader, bufSize, length, source);
  late final _glGetShaderSource =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>('glGetShaderSource')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  int getUniformLocation(int program, Pointer<Char> name) => _glGetUniformLocation(program, name);
  late final _glGetUniformLocation =
      _lookup<NativeFunction<Int Function(UnsignedInt, Pointer<Char>)>>('glGetUniformLocation')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void getUniformfv(int program, int location, Pointer<Float> params) => _glGetUniformfv(program, location, params);
  late final _glGetUniformfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glGetUniformfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getUniformiv(int program, int location, Pointer<Int> params) => _glGetUniformiv(program, location, params);
  late final _glGetUniformiv = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>)>>('glGetUniformiv')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexAttribdv(int index, int pname, Pointer<Double> params) => _glGetVertexAttribdv(index, pname, params);
  late final _glGetVertexAttribdv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetVertexAttribdv')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void getVertexAttribfv(int index, int pname, Pointer<Float> params) => _glGetVertexAttribfv(index, pname, params);
  late final _glGetVertexAttribfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetVertexAttribfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getVertexAttribiv(int index, int pname, Pointer<Int> params) => _glGetVertexAttribiv(index, pname, params);
  late final _glGetVertexAttribiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVertexAttribiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexAttribPointerv(int index, int pname, Pointer<Pointer<Void>> pointer) =>
      _glGetVertexAttribPointerv(index, pname, pointer);
  late final _glGetVertexAttribPointerv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>(
              'glGetVertexAttribPointerv')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  int isProgram(int program) => _glIsProgram(program);
  late final _glIsProgram = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsProgram')
      .asFunction<int Function(int)>(isLeaf: true);

  int isShader(int shader) => _glIsShader(shader);
  late final _glIsShader = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsShader')
      .asFunction<int Function(int)>(isLeaf: true);

  void linkProgram(int program) => _glLinkProgram(program);
  late final _glLinkProgram =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glLinkProgram').asFunction<void Function(int)>(isLeaf: true);

  void shaderSource(int shader, int count, Pointer<Pointer<Char>> string, Pointer<Int> length) =>
      _glShaderSource(shader, count, string, length);
  late final _glShaderSource =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Pointer<Char>>, Pointer<Int>)>>('glShaderSource')
          .asFunction<void Function(int, int, Pointer<Pointer<Char>>, Pointer<Int>)>(isLeaf: true);

  void useProgram(int program) => _glUseProgram(program);
  late final _glUseProgram =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glUseProgram').asFunction<void Function(int)>(isLeaf: true);

  void uniform1f(int location, double v0) => _glUniform1f(location, v0);
  late final _glUniform1f = _lookup<NativeFunction<Void Function(Int, Float)>>('glUniform1f')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void uniform2f(int location, double v0, double v1) => _glUniform2f(location, v0, v1);
  late final _glUniform2f = _lookup<NativeFunction<Void Function(Int, Float, Float)>>('glUniform2f')
      .asFunction<void Function(int, double, double)>(isLeaf: true);

  void uniform3f(int location, double v0, double v1, double v2) => _glUniform3f(location, v0, v1, v2);
  late final _glUniform3f = _lookup<NativeFunction<Void Function(Int, Float, Float, Float)>>('glUniform3f')
      .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void uniform4f(int location, double v0, double v1, double v2, double v3) => _glUniform4f(location, v0, v1, v2, v3);
  late final _glUniform4f = _lookup<NativeFunction<Void Function(Int, Float, Float, Float, Float)>>('glUniform4f')
      .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void uniform1i(int location, int v0) => _glUniform1i(location, v0);
  late final _glUniform1i =
      _lookup<NativeFunction<Void Function(Int, Int)>>('glUniform1i').asFunction<void Function(int, int)>(isLeaf: true);

  void uniform2i(int location, int v0, int v1) => _glUniform2i(location, v0, v1);
  late final _glUniform2i = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glUniform2i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void uniform3i(int location, int v0, int v1, int v2) => _glUniform3i(location, v0, v1, v2);
  late final _glUniform3i = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glUniform3i')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void uniform4i(int location, int v0, int v1, int v2, int v3) => _glUniform4i(location, v0, v1, v2, v3);
  late final _glUniform4i = _lookup<NativeFunction<Void Function(Int, Int, Int, Int, Int)>>('glUniform4i')
      .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void uniform1fv(int location, int count, Pointer<Float> value) => _glUniform1fv(location, count, value);
  late final _glUniform1fv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Float>)>>('glUniform1fv')
      .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void uniform2fv(int location, int count, Pointer<Float> value) => _glUniform2fv(location, count, value);
  late final _glUniform2fv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Float>)>>('glUniform2fv')
      .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void uniform3fv(int location, int count, Pointer<Float> value) => _glUniform3fv(location, count, value);
  late final _glUniform3fv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Float>)>>('glUniform3fv')
      .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void uniform4fv(int location, int count, Pointer<Float> value) => _glUniform4fv(location, count, value);
  late final _glUniform4fv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Float>)>>('glUniform4fv')
      .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void uniform1iv(int location, int count, Pointer<Int> value) => _glUniform1iv(location, count, value);
  late final _glUniform1iv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int>)>>('glUniform1iv')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void uniform2iv(int location, int count, Pointer<Int> value) => _glUniform2iv(location, count, value);
  late final _glUniform2iv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int>)>>('glUniform2iv')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void uniform3iv(int location, int count, Pointer<Int> value) => _glUniform3iv(location, count, value);
  late final _glUniform3iv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int>)>>('glUniform3iv')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void uniform4iv(int location, int count, Pointer<Int> value) => _glUniform4iv(location, count, value);
  late final _glUniform4iv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int>)>>('glUniform4iv')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void uniformMatrix2fv(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix2fv(location, count, transpose, value);
  late final _glUniformMatrix2fv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix2fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void uniformMatrix3fv(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix3fv(location, count, transpose, value);
  late final _glUniformMatrix3fv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix3fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void uniformMatrix4fv(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix4fv(location, count, transpose, value);
  late final _glUniformMatrix4fv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix4fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void validateProgram(int program) => _glValidateProgram(program);
  late final _glValidateProgram = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glValidateProgram')
      .asFunction<void Function(int)>(isLeaf: true);

  void vertexAttrib1d(int index, double x) => _glVertexAttrib1d(index, x);
  late final _glVertexAttrib1d = _lookup<NativeFunction<Void Function(UnsignedInt, Double)>>('glVertexAttrib1d')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void vertexAttrib1dv(int index, Pointer<Double> v) => _glVertexAttrib1dv(index, v);
  late final _glVertexAttrib1dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib1dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib1f(int index, double x) => _glVertexAttrib1f(index, x);
  late final _glVertexAttrib1f = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glVertexAttrib1f')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void vertexAttrib1fv(int index, Pointer<Float> v) => _glVertexAttrib1fv(index, v);
  late final _glVertexAttrib1fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib1fv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib1s(int index, int x) => _glVertexAttrib1s(index, x);
  late final _glVertexAttrib1s = _lookup<NativeFunction<Void Function(UnsignedInt, Short)>>('glVertexAttrib1s')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttrib1sv(int index, Pointer<Short> v) => _glVertexAttrib1sv(index, v);
  late final _glVertexAttrib1sv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib1sv')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib2d(int index, double x, double y) => _glVertexAttrib2d(index, x, y);
  late final _glVertexAttrib2d = _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double)>>('glVertexAttrib2d')
      .asFunction<void Function(int, double, double)>(isLeaf: true);

  void vertexAttrib2dv(int index, Pointer<Double> v) => _glVertexAttrib2dv(index, v);
  late final _glVertexAttrib2dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib2dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib2f(int index, double x, double y) => _glVertexAttrib2f(index, x, y);
  late final _glVertexAttrib2f = _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float)>>('glVertexAttrib2f')
      .asFunction<void Function(int, double, double)>(isLeaf: true);

  void vertexAttrib2fv(int index, Pointer<Float> v) => _glVertexAttrib2fv(index, v);
  late final _glVertexAttrib2fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib2fv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib2s(int index, int x, int y) => _glVertexAttrib2s(index, x, y);
  late final _glVertexAttrib2s = _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short)>>('glVertexAttrib2s')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexAttrib2sv(int index, Pointer<Short> v) => _glVertexAttrib2sv(index, v);
  late final _glVertexAttrib2sv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib2sv')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib3d(int index, double x, double y, double z) => _glVertexAttrib3d(index, x, y, z);
  late final _glVertexAttrib3d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glVertexAttrib3d')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void vertexAttrib3dv(int index, Pointer<Double> v) => _glVertexAttrib3dv(index, v);
  late final _glVertexAttrib3dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib3dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib3f(int index, double x, double y, double z) => _glVertexAttrib3f(index, x, y, z);
  late final _glVertexAttrib3f =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float)>>('glVertexAttrib3f')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void vertexAttrib3fv(int index, Pointer<Float> v) => _glVertexAttrib3fv(index, v);
  late final _glVertexAttrib3fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib3fv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib3s(int index, int x, int y, int z) => _glVertexAttrib3s(index, x, y, z);
  late final _glVertexAttrib3s =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short)>>('glVertexAttrib3s')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttrib3sv(int index, Pointer<Short> v) => _glVertexAttrib3sv(index, v);
  late final _glVertexAttrib3sv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib3sv')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib4Nbv(int index, Pointer<SignedChar> v) => _glVertexAttrib4Nbv(index, v);
  late final _glVertexAttrib4Nbv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glVertexAttrib4Nbv')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void vertexAttrib4Niv(int index, Pointer<Int> v) => _glVertexAttrib4Niv(index, v);
  late final _glVertexAttrib4Niv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttrib4Niv')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttrib4Nsv(int index, Pointer<Short> v) => _glVertexAttrib4Nsv(index, v);
  late final _glVertexAttrib4Nsv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib4Nsv')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib4Nub(int index, int x, int y, int z, int w) => _glVertexAttrib4Nub(index, x, y, z, w);
  late final _glVertexAttrib4Nub =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar)>>(
              'glVertexAttrib4Nub')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttrib4Nubv(int index, Pointer<UnsignedChar> v) => _glVertexAttrib4Nubv(index, v);
  late final _glVertexAttrib4Nubv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glVertexAttrib4Nubv')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void vertexAttrib4Nuiv(int index, Pointer<UnsignedInt> v) => _glVertexAttrib4Nuiv(index, v);
  late final _glVertexAttrib4Nuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttrib4Nuiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttrib4Nusv(int index, Pointer<UnsignedShort> v) => _glVertexAttrib4Nusv(index, v);
  late final _glVertexAttrib4Nusv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVertexAttrib4Nusv')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttrib4bv(int index, Pointer<SignedChar> v) => _glVertexAttrib4bv(index, v);
  late final _glVertexAttrib4bv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glVertexAttrib4bv')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void vertexAttrib4d(int index, double x, double y, double z, double w) => _glVertexAttrib4d(index, x, y, z, w);
  late final _glVertexAttrib4d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double)>>('glVertexAttrib4d')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void vertexAttrib4dv(int index, Pointer<Double> v) => _glVertexAttrib4dv(index, v);
  late final _glVertexAttrib4dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib4dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib4f(int index, double x, double y, double z, double w) => _glVertexAttrib4f(index, x, y, z, w);
  late final _glVertexAttrib4f =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float)>>('glVertexAttrib4f')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void vertexAttrib4fv(int index, Pointer<Float> v) => _glVertexAttrib4fv(index, v);
  late final _glVertexAttrib4fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib4fv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib4iv(int index, Pointer<Int> v) => _glVertexAttrib4iv(index, v);
  late final _glVertexAttrib4iv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttrib4iv')
      .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttrib4s(int index, int x, int y, int z, int w) => _glVertexAttrib4s(index, x, y, z, w);
  late final _glVertexAttrib4s =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short, Short)>>('glVertexAttrib4s')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttrib4sv(int index, Pointer<Short> v) => _glVertexAttrib4sv(index, v);
  late final _glVertexAttrib4sv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib4sv')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib4ubv(int index, Pointer<UnsignedChar> v) => _glVertexAttrib4ubv(index, v);
  late final _glVertexAttrib4ubv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glVertexAttrib4ubv')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void vertexAttrib4uiv(int index, Pointer<UnsignedInt> v) => _glVertexAttrib4uiv(index, v);
  late final _glVertexAttrib4uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttrib4uiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttrib4usv(int index, Pointer<UnsignedShort> v) => _glVertexAttrib4usv(index, v);
  late final _glVertexAttrib4usv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVertexAttrib4usv')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttribPointer(int index, int size, int type, int normalized, int stride, Pointer<Void> pointer) =>
      _glVertexAttribPointer(index, size, type, normalized, stride, pointer);
  late final _glVertexAttribPointer =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedChar, Int, Pointer<Void>)>>(
              'glVertexAttribPointer')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void uniformMatrix2x3fv(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix2x3fv(location, count, transpose, value);
  late final _glUniformMatrix2x3fv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix2x3fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void uniformMatrix3x2fv(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix3x2fv(location, count, transpose, value);
  late final _glUniformMatrix3x2fv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix3x2fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void uniformMatrix2x4fv(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix2x4fv(location, count, transpose, value);
  late final _glUniformMatrix2x4fv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix2x4fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void uniformMatrix4x2fv(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix4x2fv(location, count, transpose, value);
  late final _glUniformMatrix4x2fv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix4x2fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void uniformMatrix3x4fv(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix3x4fv(location, count, transpose, value);
  late final _glUniformMatrix3x4fv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix3x4fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void uniformMatrix4x3fv(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix4x3fv(location, count, transpose, value);
  late final _glUniformMatrix4x3fv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix4x3fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void colorMaski(int index, int r, int g, int b, int a) => _glColorMaski(index, r, g, b, a);
  late final _glColorMaski =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar)>>(
              'glColorMaski')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void getBooleani_v(int target, int index, Pointer<UnsignedChar> data) => _glGetBooleani_v(target, index, data);
  late final _glGetBooleani_v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedChar>)>>('glGetBooleani_v')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void glGetIntegeri_v(int target, int index, Pointer<Int> data) => _glGetIntegeri_v(target, index, data);
  late final _glGetIntegeri_v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetIntegeri_v')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void enablei(int target, int index) => _glEnablei(target, index);
  late final _glEnablei = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glEnablei')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void disablei(int target, int index) => _glDisablei(target, index);
  late final _glDisablei = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDisablei')
      .asFunction<void Function(int, int)>(isLeaf: true);

  int isEnabledi(int target, int index) => _glIsEnabledi(target, index);
  late final _glIsEnabledi = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt, UnsignedInt)>>('glIsEnabledi')
      .asFunction<int Function(int, int)>(isLeaf: true);

  void beginTransformFeedback(int primitiveMode) => _glBeginTransformFeedback(primitiveMode);
  late final _glBeginTransformFeedback = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBeginTransformFeedback')
      .asFunction<void Function(int)>(isLeaf: true);

  void endTransformFeedback() => _glEndTransformFeedback();
  late final _glEndTransformFeedback =
      _lookup<NativeFunction<Void Function()>>('glEndTransformFeedback').asFunction<void Function()>(isLeaf: true);

  void bindBufferRange(int target, int index, int buffer, int offset, int size) =>
      _glBindBufferRange(target, index, buffer, offset, size);
  late final _glBindBufferRange =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long, Long)>>('glBindBufferRange')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void bindBufferBase(int target, int index, int buffer) => _glBindBufferBase(target, index, buffer);
  late final _glBindBufferBase =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBindBufferBase')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void transformFeedbackVaryings(int program, int count, Pointer<Pointer<Char>> varyings, int bufferMode) =>
      _glTransformFeedbackVaryings(program, count, varyings, bufferMode);
  late final _glTransformFeedbackVaryings =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Pointer<Char>>, UnsignedInt)>>(
              'glTransformFeedbackVaryings')
          .asFunction<void Function(int, int, Pointer<Pointer<Char>>, int)>(isLeaf: true);

  void getTransformFeedbackVarying(int program, int index, int bufSize, Pointer<Int> length, Pointer<Int> size,
          Pointer<UnsignedInt> type, Pointer<Char> name) =>
      _glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
  late final _glGetTransformFeedbackVarying = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>,
                  Pointer<Char>)>>('glGetTransformFeedbackVarying')
      .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<Char>)>(
          isLeaf: true);

  void clampColor(int target, int clamp) => _glClampColor(target, clamp);
  late final _glClampColor = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glClampColor')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void beginConditionalRender(int id, int mode) => _glBeginConditionalRender(id, mode);
  late final _glBeginConditionalRender =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBeginConditionalRender')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void endConditionalRender() => _glEndConditionalRender();
  late final _glEndConditionalRender =
      _lookup<NativeFunction<Void Function()>>('glEndConditionalRender').asFunction<void Function()>(isLeaf: true);

  void vertexAttribIPointer(int index, int size, int type, int stride, Pointer<Void> pointer) =>
      _glVertexAttribIPointer(index, size, type, stride, pointer);
  late final _glVertexAttribIPointer =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glVertexAttribIPointer')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getVertexAttribIiv(int index, int pname, Pointer<Int> params) => _glGetVertexAttribIiv(index, pname, params);
  late final _glGetVertexAttribIiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVertexAttribIiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexAttribIuiv(int index, int pname, Pointer<UnsignedInt> params) =>
      _glGetVertexAttribIuiv(index, pname, params);
  late final _glGetVertexAttribIuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glGetVertexAttribIuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribI1i(int index, int x) => _glVertexAttribI1i(index, x);
  late final _glVertexAttribI1i = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glVertexAttribI1i')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttribI2i(int index, int x, int y) => _glVertexAttribI2i(index, x, y);
  late final _glVertexAttribI2i = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glVertexAttribI2i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexAttribI3i(int index, int x, int y, int z) => _glVertexAttribI3i(index, x, y, z);
  late final _glVertexAttribI3i =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glVertexAttribI3i')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribI4i(int index, int x, int y, int z, int w) => _glVertexAttribI4i(index, x, y, z, w);
  late final _glVertexAttribI4i =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glVertexAttribI4i')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttribI1ui(int index, int x) => _glVertexAttribI1ui(index, x);
  late final _glVertexAttribI1ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glVertexAttribI1ui')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttribI2ui(int index, int x, int y) => _glVertexAttribI2ui(index, x, y);
  late final _glVertexAttribI2ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glVertexAttribI2ui')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexAttribI3ui(int index, int x, int y, int z) => _glVertexAttribI3ui(index, x, y, z);
  late final _glVertexAttribI3ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glVertexAttribI3ui')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribI4ui(int index, int x, int y, int z, int w) => _glVertexAttribI4ui(index, x, y, z, w);
  late final _glVertexAttribI4ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glVertexAttribI4ui')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttribI1iv(int index, Pointer<Int> v) => _glVertexAttribI1iv(index, v);
  late final _glVertexAttribI1iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttribI1iv')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttribI2iv(int index, Pointer<Int> v) => _glVertexAttribI2iv(index, v);
  late final _glVertexAttribI2iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttribI2iv')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttribI3iv(int index, Pointer<Int> v) => _glVertexAttribI3iv(index, v);
  late final _glVertexAttribI3iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttribI3iv')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttribI4iv(int index, Pointer<Int> v) => _glVertexAttribI4iv(index, v);
  late final _glVertexAttribI4iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttribI4iv')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttribI1uiv(int index, Pointer<UnsignedInt> v) => _glVertexAttribI1uiv(index, v);
  late final _glVertexAttribI1uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttribI1uiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribI2uiv(int index, Pointer<UnsignedInt> v) => _glVertexAttribI2uiv(index, v);
  late final _glVertexAttribI2uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttribI2uiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribI3uiv(int index, Pointer<UnsignedInt> v) => _glVertexAttribI3uiv(index, v);
  late final _glVertexAttribI3uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttribI3uiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribI4uiv(int index, Pointer<UnsignedInt> v) => _glVertexAttribI4uiv(index, v);
  late final _glVertexAttribI4uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttribI4uiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribI4bv(int index, Pointer<SignedChar> v) => _glVertexAttribI4bv(index, v);
  late final _glVertexAttribI4bv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glVertexAttribI4bv')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void vertexAttribI4sv(int index, Pointer<Short> v) => _glVertexAttribI4sv(index, v);
  late final _glVertexAttribI4sv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttribI4sv')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttribI4ubv(int index, Pointer<UnsignedChar> v) => _glVertexAttribI4ubv(index, v);
  late final _glVertexAttribI4ubv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glVertexAttribI4ubv')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void vertexAttribI4usv(int index, Pointer<UnsignedShort> v) => _glVertexAttribI4usv(index, v);
  late final _glVertexAttribI4usv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVertexAttribI4usv')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void getUniformuiv(int program, int location, Pointer<UnsignedInt> params) =>
      _glGetUniformuiv(program, location, params);
  late final _glGetUniformuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glGetUniformuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void bindFragDataLocation(int program, int color, Pointer<Char> name) =>
      _glBindFragDataLocation(program, color, name);
  late final _glBindFragDataLocation =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Char>)>>('glBindFragDataLocation')
          .asFunction<void Function(int, int, Pointer<Char>)>(isLeaf: true);

  int getFragDataLocation(int program, Pointer<Char> name) => _glGetFragDataLocation(program, name);
  late final _glGetFragDataLocation =
      _lookup<NativeFunction<Int Function(UnsignedInt, Pointer<Char>)>>('glGetFragDataLocation')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void uniform1ui(int location, int v0) => _glUniform1ui(location, v0);
  late final _glUniform1ui = _lookup<NativeFunction<Void Function(Int, UnsignedInt)>>('glUniform1ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void uniform2ui(int location, int v0, int v1) => _glUniform2ui(location, v0, v1);
  late final _glUniform2ui = _lookup<NativeFunction<Void Function(Int, UnsignedInt, UnsignedInt)>>('glUniform2ui')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void uniform3ui(int location, int v0, int v1, int v2) => _glUniform3ui(location, v0, v1, v2);
  late final _glUniform3ui =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, UnsignedInt, UnsignedInt)>>('glUniform3ui')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void uniform4ui(int location, int v0, int v1, int v2, int v3) => _glUniform4ui(location, v0, v1, v2, v3);
  late final _glUniform4ui =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glUniform4ui')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void uniform1uiv(int location, int count, Pointer<UnsignedInt> value) => _glUniform1uiv(location, count, value);
  late final _glUniform1uiv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<UnsignedInt>)>>('glUniform1uiv')
      .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void uniform2uiv(int location, int count, Pointer<UnsignedInt> value) => _glUniform2uiv(location, count, value);
  late final _glUniform2uiv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<UnsignedInt>)>>('glUniform2uiv')
      .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void uniform3uiv(int location, int count, Pointer<UnsignedInt> value) => _glUniform3uiv(location, count, value);
  late final _glUniform3uiv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<UnsignedInt>)>>('glUniform3uiv')
      .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void uniform4uiv(int location, int count, Pointer<UnsignedInt> value) => _glUniform4uiv(location, count, value);
  late final _glUniform4uiv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<UnsignedInt>)>>('glUniform4uiv')
      .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void texParameterIiv(int target, int pname, Pointer<Int> params) => _glTexParameterIiv(target, pname, params);
  late final _glTexParameterIiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glTexParameterIiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void texParameterIuiv(int target, int pname, Pointer<UnsignedInt> params) =>
      _glTexParameterIuiv(target, pname, params);
  late final _glTexParameterIuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glTexParameterIuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getTexParameterIiv(int target, int pname, Pointer<Int> params) => _glGetTexParameterIiv(target, pname, params);
  late final _glGetTexParameterIiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetTexParameterIiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getTexParameterIuiv(int target, int pname, Pointer<UnsignedInt> params) =>
      _glGetTexParameterIuiv(target, pname, params);
  late final _glGetTexParameterIuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glGetTexParameterIuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void clearBufferiv(int buffer, int drawbuffer, Pointer<Int> value) => _glClearBufferiv(buffer, drawbuffer, value);
  late final _glClearBufferiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>)>>('glClearBufferiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void clearBufferuiv(int buffer, int drawbuffer, Pointer<UnsignedInt> value) =>
      _glClearBufferuiv(buffer, drawbuffer, value);
  late final _glClearBufferuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glClearBufferuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void clearBufferfv(int buffer, int drawbuffer, Pointer<Float> value) => _glClearBufferfv(buffer, drawbuffer, value);
  late final _glClearBufferfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glClearBufferfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void clearBufferfi(int buffer, int drawbuffer, double depth, int stencil) =>
      _glClearBufferfi(buffer, drawbuffer, depth, stencil);
  late final _glClearBufferfi = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Float, Int)>>('glClearBufferfi')
      .asFunction<void Function(int, int, double, int)>(isLeaf: true);

  Pointer<UnsignedChar> getStringi(int name, int index) => _glGetStringi(name, index);
  late final _glGetStringi =
      _lookup<NativeFunction<Pointer<UnsignedChar> Function(UnsignedInt, UnsignedInt)>>('glGetStringi')
          .asFunction<Pointer<UnsignedChar> Function(int, int)>(isLeaf: true);

  int isRenderbuffer(int renderbuffer) => _glIsRenderbuffer(renderbuffer);
  late final _glIsRenderbuffer = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsRenderbuffer')
      .asFunction<int Function(int)>(isLeaf: true);

  void bindRenderbuffer(int target, int renderbuffer) => _glBindRenderbuffer(target, renderbuffer);
  late final _glBindRenderbuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindRenderbuffer')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteRenderbuffers(int n, Pointer<UnsignedInt> renderbuffers) => _glDeleteRenderbuffers(n, renderbuffers);
  late final _glDeleteRenderbuffers =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteRenderbuffers')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genRenderbuffers(int n, Pointer<UnsignedInt> renderbuffers) => _glGenRenderbuffers(n, renderbuffers);
  late final _glGenRenderbuffers =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenRenderbuffers')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void renderbufferStorage(int target, int internalformat, int width, int height) =>
      _glRenderbufferStorage(target, internalformat, width, height);
  late final _glRenderbufferStorage =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int)>>('glRenderbufferStorage')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getRenderbufferParameteriv(int target, int pname, Pointer<Int> params) =>
      _glGetRenderbufferParameteriv(target, pname, params);
  late final _glGetRenderbufferParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetRenderbufferParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  int isFramebuffer(int framebuffer) => _glIsFramebuffer(framebuffer);
  late final _glIsFramebuffer = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsFramebuffer')
      .asFunction<int Function(int)>(isLeaf: true);

  void bindFramebuffer(int target, int framebuffer) => _glBindFramebuffer(target, framebuffer);
  late final _glBindFramebuffer = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindFramebuffer')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteFramebuffers(int n, Pointer<UnsignedInt> framebuffers) => _glDeleteFramebuffers(n, framebuffers);
  late final _glDeleteFramebuffers =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteFramebuffers')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genFramebuffers(int n, Pointer<UnsignedInt> framebuffers) => _glGenFramebuffers(n, framebuffers);
  late final _glGenFramebuffers = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenFramebuffers')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int checkFramebufferStatus(int target) => _glCheckFramebufferStatus(target);
  late final _glCheckFramebufferStatus =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt)>>('glCheckFramebufferStatus')
          .asFunction<int Function(int)>(isLeaf: true);

  void framebufferTexture1D(int target, int attachment, int textarget, int texture, int level) =>
      _glFramebufferTexture1D(target, attachment, textarget, texture, level);
  late final _glFramebufferTexture1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int)>>(
              'glFramebufferTexture1D')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void framebufferTexture2D(int target, int attachment, int textarget, int texture, int level) =>
      _glFramebufferTexture2D(target, attachment, textarget, texture, level);
  late final _glFramebufferTexture2D =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int)>>(
              'glFramebufferTexture2D')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void framebufferTexture3D(int target, int attachment, int textarget, int texture, int level, int zoffset) =>
      _glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
  late final _glFramebufferTexture3D =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Int)>>(
              'glFramebufferTexture3D')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void framebufferRenderbuffer(int target, int attachment, int renderbuffertarget, int renderbuffer) =>
      _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  late final _glFramebufferRenderbuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glFramebufferRenderbuffer')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getFramebufferAttachmentParameteriv(int target, int attachment, int pname, Pointer<Int> params) =>
      _glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
  late final _glGetFramebufferAttachmentParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetFramebufferAttachmentParameteriv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void generateMipmap(int target) => _glGenerateMipmap(target);
  late final _glGenerateMipmap = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glGenerateMipmap')
      .asFunction<void Function(int)>(isLeaf: true);

  void blitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask,
          int filter) =>
      _glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  late final _glBlitFramebuffer =
      _lookup<NativeFunction<Void Function(Int, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt)>>(
              'glBlitFramebuffer')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void renderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height) =>
      _glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
  late final _glRenderbufferStorageMultisample =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int)>>(
              'glRenderbufferStorageMultisample')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void framebufferTextureLayer(int target, int attachment, int texture, int level, int layer) =>
      _glFramebufferTextureLayer(target, attachment, texture, level, layer);
  late final _glFramebufferTextureLayer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int)>>(
              'glFramebufferTextureLayer')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  Pointer<Void> mapBufferRange(int target, int offset, int length, int access) =>
      _glMapBufferRange(target, offset, length, access);
  late final _glMapBufferRange =
      _lookup<NativeFunction<Pointer<Void> Function(UnsignedInt, Long, Long, UnsignedInt)>>('glMapBufferRange')
          .asFunction<Pointer<Void> Function(int, int, int, int)>(isLeaf: true);

  void flushMappedBufferRange(int target, int offset, int length) => _glFlushMappedBufferRange(target, offset, length);
  late final _glFlushMappedBufferRange =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long)>>('glFlushMappedBufferRange')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void bindVertexArray(int array) => _glBindVertexArray(array);
  late final _glBindVertexArray = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBindVertexArray')
      .asFunction<void Function(int)>(isLeaf: true);

  void deleteVertexArrays(int n, Pointer<UnsignedInt> arrays) => _glDeleteVertexArrays(n, arrays);
  late final _glDeleteVertexArrays =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteVertexArrays')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genVertexArrays(int n, Pointer<UnsignedInt> arrays) => _glGenVertexArrays(n, arrays);
  late final _glGenVertexArrays = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenVertexArrays')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isVertexArray(int array) => _glIsVertexArray(array);
  late final _glIsVertexArray = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsVertexArray')
      .asFunction<int Function(int)>(isLeaf: true);

  void drawArraysInstanced(int mode, int first, int count, int instancecount) =>
      _glDrawArraysInstanced(mode, first, count, instancecount);
  late final _glDrawArraysInstanced =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glDrawArraysInstanced')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void drawElementsInstanced(int mode, int count, int type, Pointer<Void> indices, int instancecount) =>
      _glDrawElementsInstanced(mode, count, type, indices, instancecount);
  late final _glDrawElementsInstanced =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>, Int)>>(
              'glDrawElementsInstanced')
          .asFunction<void Function(int, int, int, Pointer<Void>, int)>(isLeaf: true);

  void texBuffer(int target, int internalformat, int buffer) => _glTexBuffer(target, internalformat, buffer);
  late final _glTexBuffer = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glTexBuffer')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void primitiveRestartIndex(int index) => _glPrimitiveRestartIndex(index);
  late final _glPrimitiveRestartIndex = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glPrimitiveRestartIndex')
      .asFunction<void Function(int)>(isLeaf: true);

  void copyBufferSubData(int readTarget, int writeTarget, int readOffset, int writeOffset, int size) =>
      _glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
  late final _glCopyBufferSubData =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Long, Long, Long)>>('glCopyBufferSubData')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void getUniformIndices(
          int program, int uniformCount, Pointer<Pointer<Char>> uniformNames, Pointer<UnsignedInt> uniformIndices) =>
      _glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
  late final _glGetUniformIndices =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Pointer<Char>>, Pointer<UnsignedInt>)>>(
              'glGetUniformIndices')
          .asFunction<void Function(int, int, Pointer<Pointer<Char>>, Pointer<UnsignedInt>)>(isLeaf: true);

  void getActiveUniformsiv(
          int program, int uniformCount, Pointer<UnsignedInt> uniformIndices, int pname, Pointer<Int> params) =>
      _glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
  late final _glGetActiveUniformsiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>, UnsignedInt, Pointer<Int>)>>(
              'glGetActiveUniformsiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>, int, Pointer<Int>)>(isLeaf: true);

  void getActiveUniformName(
          int program, int uniformIndex, int bufSize, Pointer<Int> length, Pointer<Char> uniformName) =>
      _glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
  late final _glGetActiveUniformName =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetActiveUniformName')
          .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  int getUniformBlockIndex(int program, Pointer<Char> uniformBlockName) =>
      _glGetUniformBlockIndex(program, uniformBlockName);
  late final _glGetUniformBlockIndex =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, Pointer<Char>)>>('glGetUniformBlockIndex')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void getActiveUniformBlockiv(int program, int uniformBlockIndex, int pname, Pointer<Int> params) =>
      _glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
  late final _glGetActiveUniformBlockiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetActiveUniformBlockiv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getActiveUniformBlockName(
          int program, int uniformBlockIndex, int bufSize, Pointer<Int> length, Pointer<Char> uniformBlockName) =>
      _glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
  late final _glGetActiveUniformBlockName =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetActiveUniformBlockName')
          .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void uniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding) =>
      _glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
  late final _glUniformBlockBinding =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glUniformBlockBinding')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void drawElementsBaseVertex(int mode, int count, int type, Pointer<Void> indices, int basevertex) =>
      _glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
  late final _glDrawElementsBaseVertex =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>, Int)>>(
              'glDrawElementsBaseVertex')
          .asFunction<void Function(int, int, int, Pointer<Void>, int)>(isLeaf: true);

  void drawRangeElementsBaseVertex(
          int mode, int start, int end, int count, int type, Pointer<Void> indices, int basevertex) =>
      _glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
  late final _glDrawRangeElementsBaseVertex = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, UnsignedInt, Pointer<Void>,
                  Int)>>('glDrawRangeElementsBaseVertex')
      .asFunction<void Function(int, int, int, int, int, Pointer<Void>, int)>(isLeaf: true);

  void drawElementsInstancedBaseVertex(
          int mode, int count, int type, Pointer<Void> indices, int instancecount, int basevertex) =>
      _glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
  late final _glDrawElementsInstancedBaseVertex =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>, Int, Int)>>(
              'glDrawElementsInstancedBaseVertex')
          .asFunction<void Function(int, int, int, Pointer<Void>, int, int)>(isLeaf: true);

  void multiDrawElementsBaseVertex(int mode, Pointer<Int> count, int type, Pointer<Pointer<Void>> indices,
          int drawcount, Pointer<Int> basevertex) =>
      _glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
  late final _glMultiDrawElementsBaseVertex = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Pointer<Int>, UnsignedInt, Pointer<Pointer<Void>>, Int,
                  Pointer<Int>)>>('glMultiDrawElementsBaseVertex')
      .asFunction<void Function(int, Pointer<Int>, int, Pointer<Pointer<Void>>, int, Pointer<Int>)>(isLeaf: true);

  void provokingVertex(int mode) => _glProvokingVertex(mode);
  late final _glProvokingVertex = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glProvokingVertex')
      .asFunction<void Function(int)>(isLeaf: true);

  Pointer<NativeType> fenceSync(int condition, int flags) => _glFenceSync(condition, flags);
  late final _glFenceSync = _lookup<NativeFunction<Pointer<NativeType> Function(UnsignedInt, UnsignedInt)>>('glFenceSync')
      .asFunction<Pointer<NativeType> Function(int, int)>(isLeaf: true);

  int isSync(Pointer<NativeType> sync1) => _glIsSync(sync1);
  late final _glIsSync = _lookup<NativeFunction<UnsignedChar Function(Pointer<NativeType>)>>('glIsSync')
      .asFunction<int Function(Pointer<NativeType>)>(isLeaf: true);

  void deleteSync(Pointer<NativeType> sync1) => _glDeleteSync(sync1);
  late final _glDeleteSync = _lookup<NativeFunction<Void Function(Pointer<NativeType>)>>('glDeleteSync')
      .asFunction<void Function(Pointer<NativeType>)>(isLeaf: true);

  int clientWaitSync(Pointer<NativeType> sync1, int flags, int timeout) => _glClientWaitSync(sync1, flags, timeout);
  late final _glClientWaitSync =
      _lookup<NativeFunction<UnsignedInt Function(Pointer<NativeType>, UnsignedInt, Uint64)>>('glClientWaitSync')
          .asFunction<int Function(Pointer<NativeType>, int, int)>(isLeaf: true);

  void waitSync(Pointer<NativeType> sync1, int flags, int timeout) => _glWaitSync(sync1, flags, timeout);
  late final _glWaitSync = _lookup<NativeFunction<Void Function(Pointer<NativeType>, UnsignedInt, Uint64)>>('glWaitSync')
      .asFunction<void Function(Pointer<NativeType>, int, int)>(isLeaf: true);

  void getInteger64v(int pname, Pointer<Int64> data) => _glGetInteger64v(pname, data);
  late final _glGetInteger64v = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int64>)>>('glGetInteger64v')
      .asFunction<void Function(int, Pointer<Int64>)>(isLeaf: true);

  void getSynciv(Pointer<NativeType> sync1, int pname, int count, Pointer<Int> length, Pointer<Int> values) =>
      _glGetSynciv(sync1, pname, count, length, values);
  late final _glGetSynciv =
      _lookup<NativeFunction<Void Function(Pointer<NativeType>, UnsignedInt, Int, Pointer<Int>, Pointer<Int>)>>(
              'glGetSynciv')
          .asFunction<void Function(Pointer<NativeType>, int, int, Pointer<Int>, Pointer<Int>)>(isLeaf: true);

  void glGetInteger64i_v(int target, int index, Pointer<Int64> data) => _glGetInteger64i_v(target, index, data);
  late final _glGetInteger64i_v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int64>)>>('glGetInteger64i_v')
          .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void getBufferParameteri64v(int target, int pname, Pointer<Int64> params) =>
      _glGetBufferParameteri64v(target, pname, params);
  late final _glGetBufferParameteri64v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int64>)>>('glGetBufferParameteri64v')
          .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void framebufferTexture(int target, int attachment, int texture, int level) =>
      _glFramebufferTexture(target, attachment, texture, level);
  late final _glFramebufferTexture =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>('glFramebufferTexture')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texImage2DMultisample(
          int target, int samples, int internalformat, int width, int height, int fixedsamplelocations) =>
      _glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  late final _glTexImage2DMultisample =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, UnsignedChar)>>(
              'glTexImage2DMultisample')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void texImage3DMultisample(
          int target, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations) =>
      _glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  late final _glTexImage3DMultisample =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, UnsignedChar)>>(
              'glTexImage3DMultisample')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void getMultisamplefv(int pname, int index, Pointer<Float> val) => _glGetMultisamplefv(pname, index, val);
  late final _glGetMultisamplefv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetMultisamplefv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void sampleMaski(int maskNumber, int mask) => _glSampleMaski(maskNumber, mask);
  late final _glSampleMaski = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glSampleMaski')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void bindFragDataLocationIndexed(int program, int colorNumber, int index, Pointer<Char> name) =>
      _glBindFragDataLocationIndexed(program, colorNumber, index, name);
  late final _glBindFragDataLocationIndexed =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Char>)>>(
              'glBindFragDataLocationIndexed')
          .asFunction<void Function(int, int, int, Pointer<Char>)>(isLeaf: true);

  int getFragDataIndex(int program, Pointer<Char> name) => _glGetFragDataIndex(program, name);
  late final _glGetFragDataIndex =
      _lookup<NativeFunction<Int Function(UnsignedInt, Pointer<Char>)>>('glGetFragDataIndex')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void genSamplers(int count, Pointer<UnsignedInt> samplers) => _glGenSamplers(count, samplers);
  late final _glGenSamplers = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenSamplers')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deleteSamplers(int count, Pointer<UnsignedInt> samplers) => _glDeleteSamplers(count, samplers);
  late final _glDeleteSamplers = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteSamplers')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isSampler(int sampler) => _glIsSampler(sampler);
  late final _glIsSampler = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsSampler')
      .asFunction<int Function(int)>(isLeaf: true);

  void bindSampler(int unit, int sampler) => _glBindSampler(unit, sampler);
  late final _glBindSampler = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindSampler')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void samplerParameteri(int sampler, int pname, int param) => _glSamplerParameteri(sampler, pname, param);
  late final _glSamplerParameteri =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glSamplerParameteri')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void samplerParameteriv(int sampler, int pname, Pointer<Int> param) => _glSamplerParameteriv(sampler, pname, param);
  late final _glSamplerParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glSamplerParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void samplerParameterf(int sampler, int pname, double param) => _glSamplerParameterf(sampler, pname, param);
  late final _glSamplerParameterf =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glSamplerParameterf')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void samplerParameterfv(int sampler, int pname, Pointer<Float> param) => _glSamplerParameterfv(sampler, pname, param);
  late final _glSamplerParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glSamplerParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void samplerParameterIiv(int sampler, int pname, Pointer<Int> param) => _glSamplerParameterIiv(sampler, pname, param);
  late final _glSamplerParameterIiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glSamplerParameterIiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void samplerParameterIuiv(int sampler, int pname, Pointer<UnsignedInt> param) =>
      _glSamplerParameterIuiv(sampler, pname, param);
  late final _glSamplerParameterIuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glSamplerParameterIuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getSamplerParameteriv(int sampler, int pname, Pointer<Int> params) =>
      _glGetSamplerParameteriv(sampler, pname, params);
  late final _glGetSamplerParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetSamplerParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getSamplerParameterIiv(int sampler, int pname, Pointer<Int> params) =>
      _glGetSamplerParameterIiv(sampler, pname, params);
  late final _glGetSamplerParameterIiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetSamplerParameterIiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getSamplerParameterfv(int sampler, int pname, Pointer<Float> params) =>
      _glGetSamplerParameterfv(sampler, pname, params);
  late final _glGetSamplerParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetSamplerParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getSamplerParameterIuiv(int sampler, int pname, Pointer<UnsignedInt> params) =>
      _glGetSamplerParameterIuiv(sampler, pname, params);
  late final _glGetSamplerParameterIuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glGetSamplerParameterIuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void queryCounter(int id, int target) => _glQueryCounter(id, target);
  late final _glQueryCounter = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glQueryCounter')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void getQueryObjecti64v(int id, int pname, Pointer<Int64> params) => _glGetQueryObjecti64v(id, pname, params);
  late final _glGetQueryObjecti64v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int64>)>>('glGetQueryObjecti64v')
          .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void getQueryObjectui64v(int id, int pname, Pointer<Uint64> params) => _glGetQueryObjectui64v(id, pname, params);
  late final _glGetQueryObjectui64v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Uint64>)>>('glGetQueryObjectui64v')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void vertexAttribDivisor(int index, int divisor) => _glVertexAttribDivisor(index, divisor);
  late final _glVertexAttribDivisor =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glVertexAttribDivisor')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttribP1ui(int index, int type, int normalized, int value) =>
      _glVertexAttribP1ui(index, type, normalized, value);
  late final _glVertexAttribP1ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedChar, UnsignedInt)>>('glVertexAttribP1ui')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribP1uiv(int index, int type, int normalized, Pointer<UnsignedInt> value) =>
      _glVertexAttribP1uiv(index, type, normalized, value);
  late final _glVertexAttribP1uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedChar, Pointer<UnsignedInt>)>>(
              'glVertexAttribP1uiv')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribP2ui(int index, int type, int normalized, int value) =>
      _glVertexAttribP2ui(index, type, normalized, value);
  late final _glVertexAttribP2ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedChar, UnsignedInt)>>('glVertexAttribP2ui')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribP2uiv(int index, int type, int normalized, Pointer<UnsignedInt> value) =>
      _glVertexAttribP2uiv(index, type, normalized, value);
  late final _glVertexAttribP2uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedChar, Pointer<UnsignedInt>)>>(
              'glVertexAttribP2uiv')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribP3ui(int index, int type, int normalized, int value) =>
      _glVertexAttribP3ui(index, type, normalized, value);
  late final _glVertexAttribP3ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedChar, UnsignedInt)>>('glVertexAttribP3ui')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribP3uiv(int index, int type, int normalized, Pointer<UnsignedInt> value) =>
      _glVertexAttribP3uiv(index, type, normalized, value);
  late final _glVertexAttribP3uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedChar, Pointer<UnsignedInt>)>>(
              'glVertexAttribP3uiv')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribP4ui(int index, int type, int normalized, int value) =>
      _glVertexAttribP4ui(index, type, normalized, value);
  late final _glVertexAttribP4ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedChar, UnsignedInt)>>('glVertexAttribP4ui')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribP4uiv(int index, int type, int normalized, Pointer<UnsignedInt> value) =>
      _glVertexAttribP4uiv(index, type, normalized, value);
  late final _glVertexAttribP4uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedChar, Pointer<UnsignedInt>)>>(
              'glVertexAttribP4uiv')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexP2ui(int type, int value) => _glVertexP2ui(type, value);
  late final _glVertexP2ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glVertexP2ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexP2uiv(int type, Pointer<UnsignedInt> value) => _glVertexP2uiv(type, value);
  late final _glVertexP2uiv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexP2uiv')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexP3ui(int type, int value) => _glVertexP3ui(type, value);
  late final _glVertexP3ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glVertexP3ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexP3uiv(int type, Pointer<UnsignedInt> value) => _glVertexP3uiv(type, value);
  late final _glVertexP3uiv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexP3uiv')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexP4ui(int type, int value) => _glVertexP4ui(type, value);
  late final _glVertexP4ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glVertexP4ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexP4uiv(int type, Pointer<UnsignedInt> value) => _glVertexP4uiv(type, value);
  late final _glVertexP4uiv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexP4uiv')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void texCoordP1ui(int type, int coords) => _glTexCoordP1ui(type, coords);
  late final _glTexCoordP1ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glTexCoordP1ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void texCoordP1uiv(int type, Pointer<UnsignedInt> coords) => _glTexCoordP1uiv(type, coords);
  late final _glTexCoordP1uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glTexCoordP1uiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void texCoordP2ui(int type, int coords) => _glTexCoordP2ui(type, coords);
  late final _glTexCoordP2ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glTexCoordP2ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void texCoordP2uiv(int type, Pointer<UnsignedInt> coords) => _glTexCoordP2uiv(type, coords);
  late final _glTexCoordP2uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glTexCoordP2uiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void texCoordP3ui(int type, int coords) => _glTexCoordP3ui(type, coords);
  late final _glTexCoordP3ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glTexCoordP3ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void texCoordP3uiv(int type, Pointer<UnsignedInt> coords) => _glTexCoordP3uiv(type, coords);
  late final _glTexCoordP3uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glTexCoordP3uiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void texCoordP4ui(int type, int coords) => _glTexCoordP4ui(type, coords);
  late final _glTexCoordP4ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glTexCoordP4ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void texCoordP4uiv(int type, Pointer<UnsignedInt> coords) => _glTexCoordP4uiv(type, coords);
  late final _glTexCoordP4uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glTexCoordP4uiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void multiTexCoordP1ui(int texture, int type, int coords) => _glMultiTexCoordP1ui(texture, type, coords);
  late final _glMultiTexCoordP1ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glMultiTexCoordP1ui')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoordP1uiv(int texture, int type, Pointer<UnsignedInt> coords) =>
      _glMultiTexCoordP1uiv(texture, type, coords);
  late final _glMultiTexCoordP1uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glMultiTexCoordP1uiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void multiTexCoordP2ui(int texture, int type, int coords) => _glMultiTexCoordP2ui(texture, type, coords);
  late final _glMultiTexCoordP2ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glMultiTexCoordP2ui')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoordP2uiv(int texture, int type, Pointer<UnsignedInt> coords) =>
      _glMultiTexCoordP2uiv(texture, type, coords);
  late final _glMultiTexCoordP2uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glMultiTexCoordP2uiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void multiTexCoordP3ui(int texture, int type, int coords) => _glMultiTexCoordP3ui(texture, type, coords);
  late final _glMultiTexCoordP3ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glMultiTexCoordP3ui')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoordP3uiv(int texture, int type, Pointer<UnsignedInt> coords) =>
      _glMultiTexCoordP3uiv(texture, type, coords);
  late final _glMultiTexCoordP3uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glMultiTexCoordP3uiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void multiTexCoordP4ui(int texture, int type, int coords) => _glMultiTexCoordP4ui(texture, type, coords);
  late final _glMultiTexCoordP4ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glMultiTexCoordP4ui')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoordP4uiv(int texture, int type, Pointer<UnsignedInt> coords) =>
      _glMultiTexCoordP4uiv(texture, type, coords);
  late final _glMultiTexCoordP4uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glMultiTexCoordP4uiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void normalP3ui(int type, int coords) => _glNormalP3ui(type, coords);
  late final _glNormalP3ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glNormalP3ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void normalP3uiv(int type, Pointer<UnsignedInt> coords) => _glNormalP3uiv(type, coords);
  late final _glNormalP3uiv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glNormalP3uiv')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void colorP3ui(int type, int color) => _glColorP3ui(type, color);
  late final _glColorP3ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glColorP3ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void colorP3uiv(int type, Pointer<UnsignedInt> color) => _glColorP3uiv(type, color);
  late final _glColorP3uiv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glColorP3uiv')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void colorP4ui(int type, int color) => _glColorP4ui(type, color);
  late final _glColorP4ui = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glColorP4ui')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void colorP4uiv(int type, Pointer<UnsignedInt> color) => _glColorP4uiv(type, color);
  late final _glColorP4uiv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glColorP4uiv')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void secondaryColorP3ui(int type, int color) => _glSecondaryColorP3ui(type, color);
  late final _glSecondaryColorP3ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glSecondaryColorP3ui')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void secondaryColorP3uiv(int type, Pointer<UnsignedInt> color) => _glSecondaryColorP3uiv(type, color);
  late final _glSecondaryColorP3uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glSecondaryColorP3uiv')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void minSampleShading(double value) => _glMinSampleShading(value);
  late final _glMinSampleShading = _lookup<NativeFunction<Void Function(Float)>>('glMinSampleShading')
      .asFunction<void Function(double)>(isLeaf: true);

  void blendEquationi(int buf, int mode) => _glBlendEquationi(buf, mode);
  late final _glBlendEquationi = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBlendEquationi')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void blendEquationSeparatei(int buf, int modeRGB, int modeAlpha) =>
      _glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
  late final _glBlendEquationSeparatei =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBlendEquationSeparatei')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void blendFunci(int buf, int src, int dst) => _glBlendFunci(buf, src, dst);
  late final _glBlendFunci =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBlendFunci')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void blendFuncSeparatei(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) =>
      _glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  late final _glBlendFuncSeparatei =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glBlendFuncSeparatei')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void drawArraysIndirect(int mode, Pointer<Void> indirect) => _glDrawArraysIndirect(mode, indirect);
  late final _glDrawArraysIndirect =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>)>>('glDrawArraysIndirect')
          .asFunction<void Function(int, Pointer<Void>)>(isLeaf: true);

  void drawElementsIndirect(int mode, int type, Pointer<Void> indirect) =>
      _glDrawElementsIndirect(mode, type, indirect);
  late final _glDrawElementsIndirect =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>)>>('glDrawElementsIndirect')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void uniform1d(int location, double x) => _glUniform1d(location, x);
  late final _glUniform1d = _lookup<NativeFunction<Void Function(Int, Double)>>('glUniform1d')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void uniform2d(int location, double x, double y) => _glUniform2d(location, x, y);
  late final _glUniform2d = _lookup<NativeFunction<Void Function(Int, Double, Double)>>('glUniform2d')
      .asFunction<void Function(int, double, double)>(isLeaf: true);

  void uniform3d(int location, double x, double y, double z) => _glUniform3d(location, x, y, z);
  late final _glUniform3d = _lookup<NativeFunction<Void Function(Int, Double, Double, Double)>>('glUniform3d')
      .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void uniform4d(int location, double x, double y, double z, double w) => _glUniform4d(location, x, y, z, w);
  late final _glUniform4d = _lookup<NativeFunction<Void Function(Int, Double, Double, Double, Double)>>('glUniform4d')
      .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void uniform1dv(int location, int count, Pointer<Double> value) => _glUniform1dv(location, count, value);
  late final _glUniform1dv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Double>)>>('glUniform1dv')
      .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void uniform2dv(int location, int count, Pointer<Double> value) => _glUniform2dv(location, count, value);
  late final _glUniform2dv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Double>)>>('glUniform2dv')
      .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void uniform3dv(int location, int count, Pointer<Double> value) => _glUniform3dv(location, count, value);
  late final _glUniform3dv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Double>)>>('glUniform3dv')
      .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void uniform4dv(int location, int count, Pointer<Double> value) => _glUniform4dv(location, count, value);
  late final _glUniform4dv = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Double>)>>('glUniform4dv')
      .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void uniformMatrix2dv(int location, int count, int transpose, Pointer<Double> value) =>
      _glUniformMatrix2dv(location, count, transpose, value);
  late final _glUniformMatrix2dv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Double>)>>('glUniformMatrix2dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void uniformMatrix3dv(int location, int count, int transpose, Pointer<Double> value) =>
      _glUniformMatrix3dv(location, count, transpose, value);
  late final _glUniformMatrix3dv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Double>)>>('glUniformMatrix3dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void uniformMatrix4dv(int location, int count, int transpose, Pointer<Double> value) =>
      _glUniformMatrix4dv(location, count, transpose, value);
  late final _glUniformMatrix4dv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Double>)>>('glUniformMatrix4dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void uniformMatrix2x3dv(int location, int count, int transpose, Pointer<Double> value) =>
      _glUniformMatrix2x3dv(location, count, transpose, value);
  late final _glUniformMatrix2x3dv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Double>)>>('glUniformMatrix2x3dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void uniformMatrix2x4dv(int location, int count, int transpose, Pointer<Double> value) =>
      _glUniformMatrix2x4dv(location, count, transpose, value);
  late final _glUniformMatrix2x4dv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Double>)>>('glUniformMatrix2x4dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void uniformMatrix3x2dv(int location, int count, int transpose, Pointer<Double> value) =>
      _glUniformMatrix3x2dv(location, count, transpose, value);
  late final _glUniformMatrix3x2dv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Double>)>>('glUniformMatrix3x2dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void uniformMatrix3x4dv(int location, int count, int transpose, Pointer<Double> value) =>
      _glUniformMatrix3x4dv(location, count, transpose, value);
  late final _glUniformMatrix3x4dv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Double>)>>('glUniformMatrix3x4dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void uniformMatrix4x2dv(int location, int count, int transpose, Pointer<Double> value) =>
      _glUniformMatrix4x2dv(location, count, transpose, value);
  late final _glUniformMatrix4x2dv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Double>)>>('glUniformMatrix4x2dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void uniformMatrix4x3dv(int location, int count, int transpose, Pointer<Double> value) =>
      _glUniformMatrix4x3dv(location, count, transpose, value);
  late final _glUniformMatrix4x3dv =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Double>)>>('glUniformMatrix4x3dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void getUniformdv(int program, int location, Pointer<Double> params) => _glGetUniformdv(program, location, params);
  late final _glGetUniformdv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Double>)>>('glGetUniformdv')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  int getSubroutineUniformLocation(int program, int shadertype, Pointer<Char> name) =>
      _glGetSubroutineUniformLocation(program, shadertype, name);
  late final _glGetSubroutineUniformLocation =
      _lookup<NativeFunction<Int Function(UnsignedInt, UnsignedInt, Pointer<Char>)>>('glGetSubroutineUniformLocation')
          .asFunction<int Function(int, int, Pointer<Char>)>(isLeaf: true);

  int getSubroutineIndex(int program, int shadertype, Pointer<Char> name) =>
      _glGetSubroutineIndex(program, shadertype, name);
  late final _glGetSubroutineIndex =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt, Pointer<Char>)>>('glGetSubroutineIndex')
          .asFunction<int Function(int, int, Pointer<Char>)>(isLeaf: true);

  void getActiveSubroutineUniformiv(int program, int shadertype, int index, int pname, Pointer<Int> values) =>
      _glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
  late final _glGetActiveSubroutineUniformiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetActiveSubroutineUniformiv')
          .asFunction<void Function(int, int, int, int, Pointer<Int>)>(isLeaf: true);

  void getActiveSubroutineUniformName(
          int program, int shadertype, int index, int bufSize, Pointer<Int> length, Pointer<Char> name) =>
      _glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name);
  late final _glGetActiveSubroutineUniformName =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetActiveSubroutineUniformName')
          .asFunction<void Function(int, int, int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void getActiveSubroutineName(
          int program, int shadertype, int index, int bufSize, Pointer<Int> length, Pointer<Char> name) =>
      _glGetActiveSubroutineName(program, shadertype, index, bufSize, length, name);
  late final _glGetActiveSubroutineName =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetActiveSubroutineName')
          .asFunction<void Function(int, int, int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void uniformSubroutinesuiv(int shadertype, int count, Pointer<UnsignedInt> indices) =>
      _glUniformSubroutinesuiv(shadertype, count, indices);
  late final _glUniformSubroutinesuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glUniformSubroutinesuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getUniformSubroutineuiv(int shadertype, int location, Pointer<UnsignedInt> params) =>
      _glGetUniformSubroutineuiv(shadertype, location, params);
  late final _glGetUniformSubroutineuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glGetUniformSubroutineuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getProgramStageiv(int program, int shadertype, int pname, Pointer<Int> values) =>
      _glGetProgramStageiv(program, shadertype, pname, values);
  late final _glGetProgramStageiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetProgramStageiv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void patchParameteri(int pname, int value) => _glPatchParameteri(pname, value);
  late final _glPatchParameteri = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glPatchParameteri')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void patchParameterfv(int pname, Pointer<Float> values) => _glPatchParameterfv(pname, values);
  late final _glPatchParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glPatchParameterfv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void bindTransformFeedback(int target, int id) => _glBindTransformFeedback(target, id);
  late final _glBindTransformFeedback =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindTransformFeedback')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteTransformFeedbacks(int n, Pointer<UnsignedInt> ids) => _glDeleteTransformFeedbacks(n, ids);
  late final _glDeleteTransformFeedbacks =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteTransformFeedbacks')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genTransformFeedbacks(int n, Pointer<UnsignedInt> ids) => _glGenTransformFeedbacks(n, ids);
  late final _glGenTransformFeedbacks =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenTransformFeedbacks')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isTransformFeedback(int id) => _glIsTransformFeedback(id);
  late final _glIsTransformFeedback =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsTransformFeedback')
          .asFunction<int Function(int)>(isLeaf: true);

  void pauseTransformFeedback() => _glPauseTransformFeedback();
  late final _glPauseTransformFeedback =
      _lookup<NativeFunction<Void Function()>>('glPauseTransformFeedback').asFunction<void Function()>(isLeaf: true);

  void resumeTransformFeedback() => _glResumeTransformFeedback();
  late final _glResumeTransformFeedback =
      _lookup<NativeFunction<Void Function()>>('glResumeTransformFeedback').asFunction<void Function()>(isLeaf: true);

  void drawTransformFeedback(int mode, int id) => _glDrawTransformFeedback(mode, id);
  late final _glDrawTransformFeedback =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDrawTransformFeedback')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void drawTransformFeedbackStream(int mode, int id, int stream) => _glDrawTransformFeedbackStream(mode, id, stream);
  late final _glDrawTransformFeedbackStream =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glDrawTransformFeedbackStream')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void beginQueryIndexed(int target, int index, int id) => _glBeginQueryIndexed(target, index, id);
  late final _glBeginQueryIndexed =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBeginQueryIndexed')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void endQueryIndexed(int target, int index) => _glEndQueryIndexed(target, index);
  late final _glEndQueryIndexed = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glEndQueryIndexed')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void getQueryIndexediv(int target, int index, int pname, Pointer<Int> params) =>
      _glGetQueryIndexediv(target, index, pname, params);
  late final _glGetQueryIndexediv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetQueryIndexediv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void releaseShaderCompiler() => _glReleaseShaderCompiler();
  late final _glReleaseShaderCompiler =
      _lookup<NativeFunction<Void Function()>>('glReleaseShaderCompiler').asFunction<void Function()>(isLeaf: true);

  void shaderBinary(int count, Pointer<UnsignedInt> shaders, int binaryFormat, Pointer<Void> binary, int length) =>
      _glShaderBinary(count, shaders, binaryFormat, binary, length);
  late final _glShaderBinary =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>, UnsignedInt, Pointer<Void>, Int)>>(
              'glShaderBinary')
          .asFunction<void Function(int, Pointer<UnsignedInt>, int, Pointer<Void>, int)>(isLeaf: true);

  void getShaderPrecisionFormat(int shadertype, int precisiontype, Pointer<Int> range, Pointer<Int> precision) =>
      _glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
  late final _glGetShaderPrecisionFormat =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>, Pointer<Int>)>>(
              'glGetShaderPrecisionFormat')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<Int>)>(isLeaf: true);

  void depthRangef(double n, double f) => _glDepthRangef(n, f);
  late final _glDepthRangef = _lookup<NativeFunction<Void Function(Float, Float)>>('glDepthRangef')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void clearDepthf(double d) => _glClearDepthf(d);
  late final _glClearDepthf =
      _lookup<NativeFunction<Void Function(Float)>>('glClearDepthf').asFunction<void Function(double)>(isLeaf: true);

  void getProgramBinary(
          int program, int bufSize, Pointer<Int> length, Pointer<UnsignedInt> binaryFormat, Pointer<Void> binary) =>
      _glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
  late final _glGetProgramBinary =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, Pointer<UnsignedInt>, Pointer<Void>)>>(
              'glGetProgramBinary')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<UnsignedInt>, Pointer<Void>)>(isLeaf: true);

  void programBinary(int program, int binaryFormat, Pointer<Void> binary, int length) =>
      _glProgramBinary(program, binaryFormat, binary, length);
  late final _glProgramBinary =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>, Int)>>('glProgramBinary')
          .asFunction<void Function(int, int, Pointer<Void>, int)>(isLeaf: true);

  void programParameteri(int program, int pname, int value) => _glProgramParameteri(program, pname, value);
  late final _glProgramParameteri =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glProgramParameteri')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void useProgramStages(int pipeline, int stages, int program) => _glUseProgramStages(pipeline, stages, program);
  late final _glUseProgramStages =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glUseProgramStages')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void activeShaderProgram(int pipeline, int program) => _glActiveShaderProgram(pipeline, program);
  late final _glActiveShaderProgram =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glActiveShaderProgram')
          .asFunction<void Function(int, int)>(isLeaf: true);

  int createShaderProgramv(int type, int count, Pointer<Pointer<Char>> strings) =>
      _glCreateShaderProgramv(type, count, strings);
  late final _glCreateShaderProgramv =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, Int, Pointer<Pointer<Char>>)>>('glCreateShaderProgramv')
          .asFunction<int Function(int, int, Pointer<Pointer<Char>>)>(isLeaf: true);

  void bindProgramPipeline(int pipeline) => _glBindProgramPipeline(pipeline);
  late final _glBindProgramPipeline = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBindProgramPipeline')
      .asFunction<void Function(int)>(isLeaf: true);

  void deleteProgramPipelines(int n, Pointer<UnsignedInt> pipelines) => _glDeleteProgramPipelines(n, pipelines);
  late final _glDeleteProgramPipelines =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteProgramPipelines')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genProgramPipelines(int n, Pointer<UnsignedInt> pipelines) => _glGenProgramPipelines(n, pipelines);
  late final _glGenProgramPipelines =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenProgramPipelines')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isProgramPipeline(int pipeline) => _glIsProgramPipeline(pipeline);
  late final _glIsProgramPipeline = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsProgramPipeline')
      .asFunction<int Function(int)>(isLeaf: true);

  void getProgramPipelineiv(int pipeline, int pname, Pointer<Int> params) =>
      _glGetProgramPipelineiv(pipeline, pname, params);
  late final _glGetProgramPipelineiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetProgramPipelineiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void programUniform1i(int program, int location, int v0) => _glProgramUniform1i(program, location, v0);
  late final _glProgramUniform1i = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glProgramUniform1i')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniform1iv(int program, int location, int count, Pointer<Int> value) =>
      _glProgramUniform1iv(program, location, count, value);
  late final _glProgramUniform1iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int>)>>('glProgramUniform1iv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void programUniform1f(int program, int location, double v0) => _glProgramUniform1f(program, location, v0);
  late final _glProgramUniform1f = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Float)>>('glProgramUniform1f')
      .asFunction<void Function(int, int, double)>(isLeaf: true);

  void programUniform1fv(int program, int location, int count, Pointer<Float> value) =>
      _glProgramUniform1fv(program, location, count, value);
  late final _glProgramUniform1fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Float>)>>('glProgramUniform1fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniform1d(int program, int location, double v0) => _glProgramUniform1d(program, location, v0);
  late final _glProgramUniform1d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Double)>>('glProgramUniform1d')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void programUniform1dv(int program, int location, int count, Pointer<Double> value) =>
      _glProgramUniform1dv(program, location, count, value);
  late final _glProgramUniform1dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Double>)>>('glProgramUniform1dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniform1ui(int program, int location, int v0) => _glProgramUniform1ui(program, location, v0);
  late final _glProgramUniform1ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt)>>('glProgramUniform1ui')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniform1uiv(int program, int location, int count, Pointer<UnsignedInt> value) =>
      _glProgramUniform1uiv(program, location, count, value);
  late final _glProgramUniform1uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>('glProgramUniform1uiv')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programUniform2i(int program, int location, int v0, int v1) => _glProgramUniform2i(program, location, v0, v1);
  late final _glProgramUniform2i =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glProgramUniform2i')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void programUniform2iv(int program, int location, int count, Pointer<Int> value) =>
      _glProgramUniform2iv(program, location, count, value);
  late final _glProgramUniform2iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int>)>>('glProgramUniform2iv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void programUniform2f(int program, int location, double v0, double v1) =>
      _glProgramUniform2f(program, location, v0, v1);
  late final _glProgramUniform2f =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Float, Float)>>('glProgramUniform2f')
          .asFunction<void Function(int, int, double, double)>(isLeaf: true);

  void programUniform2fv(int program, int location, int count, Pointer<Float> value) =>
      _glProgramUniform2fv(program, location, count, value);
  late final _glProgramUniform2fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Float>)>>('glProgramUniform2fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniform2d(int program, int location, double v0, double v1) =>
      _glProgramUniform2d(program, location, v0, v1);
  late final _glProgramUniform2d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Double, Double)>>('glProgramUniform2d')
          .asFunction<void Function(int, int, double, double)>(isLeaf: true);

  void programUniform2dv(int program, int location, int count, Pointer<Double> value) =>
      _glProgramUniform2dv(program, location, count, value);
  late final _glProgramUniform2dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Double>)>>('glProgramUniform2dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniform2ui(int program, int location, int v0, int v1) => _glProgramUniform2ui(program, location, v0, v1);
  late final _glProgramUniform2ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt)>>('glProgramUniform2ui')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void programUniform2uiv(int program, int location, int count, Pointer<UnsignedInt> value) =>
      _glProgramUniform2uiv(program, location, count, value);
  late final _glProgramUniform2uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>('glProgramUniform2uiv')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programUniform3i(int program, int location, int v0, int v1, int v2) =>
      _glProgramUniform3i(program, location, v0, v1, v2);
  late final _glProgramUniform3i =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glProgramUniform3i')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void programUniform3iv(int program, int location, int count, Pointer<Int> value) =>
      _glProgramUniform3iv(program, location, count, value);
  late final _glProgramUniform3iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int>)>>('glProgramUniform3iv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void programUniform3f(int program, int location, double v0, double v1, double v2) =>
      _glProgramUniform3f(program, location, v0, v1, v2);
  late final _glProgramUniform3f =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Float, Float, Float)>>('glProgramUniform3f')
          .asFunction<void Function(int, int, double, double, double)>(isLeaf: true);

  void programUniform3fv(int program, int location, int count, Pointer<Float> value) =>
      _glProgramUniform3fv(program, location, count, value);
  late final _glProgramUniform3fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Float>)>>('glProgramUniform3fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniform3d(int program, int location, double v0, double v1, double v2) =>
      _glProgramUniform3d(program, location, v0, v1, v2);
  late final _glProgramUniform3d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Double, Double, Double)>>('glProgramUniform3d')
          .asFunction<void Function(int, int, double, double, double)>(isLeaf: true);

  void programUniform3dv(int program, int location, int count, Pointer<Double> value) =>
      _glProgramUniform3dv(program, location, count, value);
  late final _glProgramUniform3dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Double>)>>('glProgramUniform3dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniform3ui(int program, int location, int v0, int v1, int v2) =>
      _glProgramUniform3ui(program, location, v0, v1, v2);
  late final _glProgramUniform3ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glProgramUniform3ui')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void programUniform3uiv(int program, int location, int count, Pointer<UnsignedInt> value) =>
      _glProgramUniform3uiv(program, location, count, value);
  late final _glProgramUniform3uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>('glProgramUniform3uiv')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programUniform4i(int program, int location, int v0, int v1, int v2, int v3) =>
      _glProgramUniform4i(program, location, v0, v1, v2, v3);
  late final _glProgramUniform4i =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int)>>('glProgramUniform4i')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programUniform4iv(int program, int location, int count, Pointer<Int> value) =>
      _glProgramUniform4iv(program, location, count, value);
  late final _glProgramUniform4iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int>)>>('glProgramUniform4iv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void programUniform4f(int program, int location, double v0, double v1, double v2, double v3) =>
      _glProgramUniform4f(program, location, v0, v1, v2, v3);
  late final _glProgramUniform4f =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Float, Float, Float, Float)>>('glProgramUniform4f')
          .asFunction<void Function(int, int, double, double, double, double)>(isLeaf: true);

  void programUniform4fv(int program, int location, int count, Pointer<Float> value) =>
      _glProgramUniform4fv(program, location, count, value);
  late final _glProgramUniform4fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Float>)>>('glProgramUniform4fv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniform4d(int program, int location, double v0, double v1, double v2, double v3) =>
      _glProgramUniform4d(program, location, v0, v1, v2, v3);
  late final _glProgramUniform4d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Double, Double, Double, Double)>>('glProgramUniform4d')
          .asFunction<void Function(int, int, double, double, double, double)>(isLeaf: true);

  void programUniform4dv(int program, int location, int count, Pointer<Double> value) =>
      _glProgramUniform4dv(program, location, count, value);
  late final _glProgramUniform4dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Double>)>>('glProgramUniform4dv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniform4ui(int program, int location, int v0, int v1, int v2, int v3) =>
      _glProgramUniform4ui(program, location, v0, v1, v2, v3);
  late final _glProgramUniform4ui =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glProgramUniform4ui')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programUniform4uiv(int program, int location, int count, Pointer<UnsignedInt> value) =>
      _glProgramUniform4uiv(program, location, count, value);
  late final _glProgramUniform4uiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>('glProgramUniform4uiv')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programUniformMatrix2fv(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix2fv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix2fv')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix3fv(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix3fv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix3fv')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix4fv(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix4fv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix4fv')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix2dv(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix2dv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix2dv')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix3dv(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix3dv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix3dv')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix4dv(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix4dv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix4dv')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix2x3fv(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2x3fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix2x3fv')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix3x2fv(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3x2fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix3x2fv')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix2x4fv(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2x4fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix2x4fv')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix4x2fv(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4x2fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix4x2fv')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix3x4fv(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3x4fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix3x4fv')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix4x3fv(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4x3fv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix4x3fv')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix2x3dv(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2x3dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix2x3dv')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix3x2dv(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3x2dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix3x2dv')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix2x4dv(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2x4dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix2x4dv')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix4x2dv(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4x2dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix4x2dv')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix3x4dv(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3x4dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix3x4dv')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix4x3dv(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4x3dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix4x3dv')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void validateProgramPipeline(int pipeline) => _glValidateProgramPipeline(pipeline);
  late final _glValidateProgramPipeline =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glValidateProgramPipeline')
          .asFunction<void Function(int)>(isLeaf: true);

  void getProgramPipelineInfoLog(int pipeline, int bufSize, Pointer<Int> length, Pointer<Char> infoLog) =>
      _glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
  late final _glGetProgramPipelineInfoLog =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetProgramPipelineInfoLog')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void vertexAttribL1d(int index, double x) => _glVertexAttribL1d(index, x);
  late final _glVertexAttribL1d = _lookup<NativeFunction<Void Function(UnsignedInt, Double)>>('glVertexAttribL1d')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void vertexAttribL2d(int index, double x, double y) => _glVertexAttribL2d(index, x, y);
  late final _glVertexAttribL2d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double)>>('glVertexAttribL2d')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void vertexAttribL3d(int index, double x, double y, double z) => _glVertexAttribL3d(index, x, y, z);
  late final _glVertexAttribL3d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glVertexAttribL3d')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void vertexAttribL4d(int index, double x, double y, double z, double w) => _glVertexAttribL4d(index, x, y, z, w);
  late final _glVertexAttribL4d =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double)>>('glVertexAttribL4d')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void vertexAttribL1dv(int index, Pointer<Double> v) => _glVertexAttribL1dv(index, v);
  late final _glVertexAttribL1dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttribL1dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribL2dv(int index, Pointer<Double> v) => _glVertexAttribL2dv(index, v);
  late final _glVertexAttribL2dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttribL2dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribL3dv(int index, Pointer<Double> v) => _glVertexAttribL3dv(index, v);
  late final _glVertexAttribL3dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttribL3dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribL4dv(int index, Pointer<Double> v) => _glVertexAttribL4dv(index, v);
  late final _glVertexAttribL4dv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttribL4dv')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribLPointer(int index, int size, int type, int stride, Pointer<Void> pointer) =>
      _glVertexAttribLPointer(index, size, type, stride, pointer);
  late final _glVertexAttribLPointer =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glVertexAttribLPointer')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getVertexAttribLdv(int index, int pname, Pointer<Double> params) => _glGetVertexAttribLdv(index, pname, params);
  late final _glGetVertexAttribLdv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetVertexAttribLdv')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void viewportArrayv(int first, int count, Pointer<Float> v) => _glViewportArrayv(first, count, v);
  late final _glViewportArrayv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glViewportArrayv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void viewportIndexedf(int index, double x, double y, double w, double h) => _glViewportIndexedf(index, x, y, w, h);
  late final _glViewportIndexedf =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float)>>('glViewportIndexedf')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void viewportIndexedfv(int index, Pointer<Float> v) => _glViewportIndexedfv(index, v);
  late final _glViewportIndexedfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glViewportIndexedfv')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void scissorArrayv(int first, int count, Pointer<Int> v) => _glScissorArrayv(first, count, v);
  late final _glScissorArrayv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>)>>('glScissorArrayv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void scissorIndexed(int index, int left, int bottom, int width, int height) =>
      _glScissorIndexed(index, left, bottom, width, height);
  late final _glScissorIndexed =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glScissorIndexed')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void scissorIndexedv(int index, Pointer<Int> v) => _glScissorIndexedv(index, v);
  late final _glScissorIndexedv = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glScissorIndexedv')
      .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void depthRangeArrayv(int first, int count, Pointer<Double> v) => _glDepthRangeArrayv(first, count, v);
  late final _glDepthRangeArrayv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Double>)>>('glDepthRangeArrayv')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void depthRangeIndexed(int index, double n, double f) => _glDepthRangeIndexed(index, n, f);
  late final _glDepthRangeIndexed =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double)>>('glDepthRangeIndexed')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void glGetFloati_v(int target, int index, Pointer<Float> data) => _glGetFloati_v(target, index, data);
  late final _glGetFloati_v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetFloati_v')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void glGetDoublei_v(int target, int index, Pointer<Double> data) => _glGetDoublei_v(target, index, data);
  late final _glGetDoublei_v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetDoublei_v')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void drawArraysInstancedBaseInstance(int mode, int first, int count, int instancecount, int baseinstance) =>
      _glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
  late final _glDrawArraysInstancedBaseInstance =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, UnsignedInt)>>(
              'glDrawArraysInstancedBaseInstance')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void drawElementsInstancedBaseInstance(
          int mode, int count, int type, Pointer<Void> indices, int instancecount, int baseinstance) =>
      _glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
  late final _glDrawElementsInstancedBaseInstance =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>, Int, UnsignedInt)>>(
              'glDrawElementsInstancedBaseInstance')
          .asFunction<void Function(int, int, int, Pointer<Void>, int, int)>(isLeaf: true);

  void drawElementsInstancedBaseVertexBaseInstance(
          int mode, int count, int type, Pointer<Void> indices, int instancecount, int basevertex, int baseinstance) =>
      _glDrawElementsInstancedBaseVertexBaseInstance(
          mode, count, type, indices, instancecount, basevertex, baseinstance);
  late final _glDrawElementsInstancedBaseVertexBaseInstance =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>, Int, Int, UnsignedInt)>>(
              'glDrawElementsInstancedBaseVertexBaseInstance')
          .asFunction<void Function(int, int, int, Pointer<Void>, int, int, int)>(isLeaf: true);

  void getInternalformativ(int target, int internalformat, int pname, int count, Pointer<Int> params) =>
      _glGetInternalformativ(target, internalformat, pname, count, params);
  late final _glGetInternalformativ =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Int>)>>(
              'glGetInternalformativ')
          .asFunction<void Function(int, int, int, int, Pointer<Int>)>(isLeaf: true);

  void getActiveAtomicCounterBufferiv(int program, int bufferIndex, int pname, Pointer<Int> params) =>
      _glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
  late final _glGetActiveAtomicCounterBufferiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetActiveAtomicCounterBufferiv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void bindImageTexture(int unit, int texture, int level, int layered, int layer, int access, int format) =>
      _glBindImageTexture(unit, texture, level, layered, layer, access, format);
  late final _glBindImageTexture = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt, UnsignedInt, Int, UnsignedChar, Int, UnsignedInt, UnsignedInt)>>('glBindImageTexture')
      .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void memoryBarrier(int barriers) => _glMemoryBarrier(barriers);
  late final _glMemoryBarrier = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMemoryBarrier')
      .asFunction<void Function(int)>(isLeaf: true);

  void texStorage1D(int target, int levels, int internalformat, int width) =>
      _glTexStorage1D(target, levels, internalformat, width);
  late final _glTexStorage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int)>>('glTexStorage1D')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texStorage2D(int target, int levels, int internalformat, int width, int height) =>
      _glTexStorage2D(target, levels, internalformat, width, height);
  late final _glTexStorage2D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int)>>('glTexStorage2D')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void texStorage3D(int target, int levels, int internalformat, int width, int height, int depth) =>
      _glTexStorage3D(target, levels, internalformat, width, height, depth);
  late final _glTexStorage3D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int)>>('glTexStorage3D')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void drawTransformFeedbackInstanced(int mode, int id, int instancecount) =>
      _glDrawTransformFeedbackInstanced(mode, id, instancecount);
  late final _glDrawTransformFeedbackInstanced =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glDrawTransformFeedbackInstanced')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void drawTransformFeedbackStreamInstanced(int mode, int id, int stream, int instancecount) =>
      _glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
  late final _glDrawTransformFeedbackStreamInstanced =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>(
              'glDrawTransformFeedbackStreamInstanced')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void clearBufferData(int target, int internalformat, int format, int type, Pointer<Void> data) =>
      _glClearBufferData(target, internalformat, format, type, data);
  late final _glClearBufferData =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glClearBufferData')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void clearBufferSubData(
          int target, int internalformat, int offset, int size, int format, int type, Pointer<Void> data) =>
      _glClearBufferSubData(target, internalformat, offset, size, format, type, data);
  late final _glClearBufferSubData = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Long, Long, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glClearBufferSubData')
      .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void dispatchCompute(int num_groups_x, int num_groups_y, int num_groups_z) =>
      _glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
  late final _glDispatchCompute =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glDispatchCompute')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void dispatchComputeIndirect(int indirect) => _glDispatchComputeIndirect(indirect);
  late final _glDispatchComputeIndirect = _lookup<NativeFunction<Void Function(Long)>>('glDispatchComputeIndirect')
      .asFunction<void Function(int)>(isLeaf: true);

  void copyImageSubData(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName,
          int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) =>
      _glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY,
          dstZ, srcWidth, srcHeight, srcDepth);
  late final _glCopyImageSubData = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, UnsignedInt, UnsignedInt, Int, Int, Int, Int,
                  Int, Int, Int)>>('glCopyImageSubData')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)>(
          isLeaf: true);

  void framebufferParameteri(int target, int pname, int param) => _glFramebufferParameteri(target, pname, param);
  late final _glFramebufferParameteri =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glFramebufferParameteri')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void getFramebufferParameteriv(int target, int pname, Pointer<Int> params) =>
      _glGetFramebufferParameteriv(target, pname, params);
  late final _glGetFramebufferParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetFramebufferParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getInternalformati64v(int target, int internalformat, int pname, int count, Pointer<Int64> params) =>
      _glGetInternalformati64v(target, internalformat, pname, count, params);
  late final _glGetInternalformati64v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Int64>)>>(
              'glGetInternalformati64v')
          .asFunction<void Function(int, int, int, int, Pointer<Int64>)>(isLeaf: true);

  void invalidateTexSubImage(
          int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth) =>
      _glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
  late final _glInvalidateTexSubImage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int)>>('glInvalidateTexSubImage')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void invalidateTexImage(int texture, int level) => _glInvalidateTexImage(texture, level);
  late final _glInvalidateTexImage = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glInvalidateTexImage')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void invalidateBufferSubData(int buffer, int offset, int length) =>
      _glInvalidateBufferSubData(buffer, offset, length);
  late final _glInvalidateBufferSubData =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long)>>('glInvalidateBufferSubData')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void invalidateBufferData(int buffer) => _glInvalidateBufferData(buffer);
  late final _glInvalidateBufferData = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glInvalidateBufferData')
      .asFunction<void Function(int)>(isLeaf: true);

  void invalidateFramebuffer(int target, int numAttachments, Pointer<UnsignedInt> attachments) =>
      _glInvalidateFramebuffer(target, numAttachments, attachments);
  late final _glInvalidateFramebuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glInvalidateFramebuffer')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void invalidateSubFramebuffer(
          int target, int numAttachments, Pointer<UnsignedInt> attachments, int x, int y, int width, int height) =>
      _glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
  late final _glInvalidateSubFramebuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>, Int, Int, Int, Int)>>(
              'glInvalidateSubFramebuffer')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>, int, int, int, int)>(isLeaf: true);

  void multiDrawArraysIndirect(int mode, Pointer<Void> indirect, int drawcount, int stride) =>
      _glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
  late final _glMultiDrawArraysIndirect =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>, Int, Int)>>('glMultiDrawArraysIndirect')
          .asFunction<void Function(int, Pointer<Void>, int, int)>(isLeaf: true);

  void multiDrawElementsIndirect(int mode, int type, Pointer<Void> indirect, int drawcount, int stride) =>
      _glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
  late final _glMultiDrawElementsIndirect =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>, Int, Int)>>(
              'glMultiDrawElementsIndirect')
          .asFunction<void Function(int, int, Pointer<Void>, int, int)>(isLeaf: true);

  void getProgramInterfaceiv(int program, int programInterface, int pname, Pointer<Int> params) =>
      _glGetProgramInterfaceiv(program, programInterface, pname, params);
  late final _glGetProgramInterfaceiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetProgramInterfaceiv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  int getProgramResourceIndex(int program, int programInterface, Pointer<Char> name) =>
      _glGetProgramResourceIndex(program, programInterface, name);
  late final _glGetProgramResourceIndex =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt, Pointer<Char>)>>(
              'glGetProgramResourceIndex')
          .asFunction<int Function(int, int, Pointer<Char>)>(isLeaf: true);

  void getProgramResourceName(
          int program, int programInterface, int index, int bufSize, Pointer<Int> length, Pointer<Char> name) =>
      _glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
  late final _glGetProgramResourceName =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetProgramResourceName')
          .asFunction<void Function(int, int, int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void getProgramResourceiv(int program, int programInterface, int index, int propCount, Pointer<UnsignedInt> props,
          int count, Pointer<Int> length, Pointer<Int> params) =>
      _glGetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params);
  late final _glGetProgramResourceiv = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>, Int, Pointer<Int>,
                  Pointer<Int>)>>('glGetProgramResourceiv')
      .asFunction<void Function(int, int, int, int, Pointer<UnsignedInt>, int, Pointer<Int>, Pointer<Int>)>(
          isLeaf: true);

  int getProgramResourceLocation(int program, int programInterface, Pointer<Char> name) =>
      _glGetProgramResourceLocation(program, programInterface, name);
  late final _glGetProgramResourceLocation =
      _lookup<NativeFunction<Int Function(UnsignedInt, UnsignedInt, Pointer<Char>)>>('glGetProgramResourceLocation')
          .asFunction<int Function(int, int, Pointer<Char>)>(isLeaf: true);

  int getProgramResourceLocationIndex(int program, int programInterface, Pointer<Char> name) =>
      _glGetProgramResourceLocationIndex(program, programInterface, name);
  late final _glGetProgramResourceLocationIndex =
      _lookup<NativeFunction<Int Function(UnsignedInt, UnsignedInt, Pointer<Char>)>>(
              'glGetProgramResourceLocationIndex')
          .asFunction<int Function(int, int, Pointer<Char>)>(isLeaf: true);

  void shaderStorageBlockBinding(int program, int storageBlockIndex, int storageBlockBinding) =>
      _glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
  late final _glShaderStorageBlockBinding =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glShaderStorageBlockBinding')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texBufferRange(int target, int internalformat, int buffer, int offset, int size) =>
      _glTexBufferRange(target, internalformat, buffer, offset, size);
  late final _glTexBufferRange =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long, Long)>>('glTexBufferRange')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void texStorage2DMultisample(
          int target, int samples, int internalformat, int width, int height, int fixedsamplelocations) =>
      _glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  late final _glTexStorage2DMultisample =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, UnsignedChar)>>(
              'glTexStorage2DMultisample')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void texStorage3DMultisample(
          int target, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations) =>
      _glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  late final _glTexStorage3DMultisample =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, UnsignedChar)>>(
              'glTexStorage3DMultisample')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void textureView(int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels,
          int minlayer, int numlayers) =>
      _glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  late final _glTextureView = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt)>>('glTextureView')
      .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void bindVertexBuffer(int bindingindex, int buffer, int offset, int stride) =>
      _glBindVertexBuffer(bindingindex, buffer, offset, stride);
  late final _glBindVertexBuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Long, Int)>>('glBindVertexBuffer')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribFormat(int attribindex, int size, int type, int normalized, int relativeoffset) =>
      _glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
  late final _glVertexAttribFormat =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedChar, UnsignedInt)>>(
              'glVertexAttribFormat')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttribIFormat(int attribindex, int size, int type, int relativeoffset) =>
      _glVertexAttribIFormat(attribindex, size, type, relativeoffset);
  late final _glVertexAttribIFormat =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt)>>('glVertexAttribIFormat')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribLFormat(int attribindex, int size, int type, int relativeoffset) =>
      _glVertexAttribLFormat(attribindex, size, type, relativeoffset);
  late final _glVertexAttribLFormat =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt)>>('glVertexAttribLFormat')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribBinding(int attribindex, int bindingindex) => _glVertexAttribBinding(attribindex, bindingindex);
  late final _glVertexAttribBinding =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glVertexAttribBinding')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexBindingDivisor(int bindingindex, int divisor) => _glVertexBindingDivisor(bindingindex, divisor);
  late final _glVertexBindingDivisor =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glVertexBindingDivisor')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void debugMessageControl(int source, int type, int severity, int count, Pointer<UnsignedInt> ids, int enabled) =>
      _glDebugMessageControl(source, type, severity, count, ids, enabled);
  late final _glDebugMessageControl = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>,
                  UnsignedChar)>>('glDebugMessageControl')
      .asFunction<void Function(int, int, int, int, Pointer<UnsignedInt>, int)>(isLeaf: true);

  void debugMessageInsert(int source, int type, int id, int severity, int length, Pointer<Char> buf) =>
      _glDebugMessageInsert(source, type, id, severity, length, buf);
  late final _glDebugMessageInsert =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>)>>(
              'glDebugMessageInsert')
          .asFunction<void Function(int, int, int, int, int, Pointer<Char>)>(isLeaf: true);

  void debugMessageCallback(
          Pointer<
                  NativeFunction<
                      Void Function(
                          UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>, Pointer<Void>)>>
              callback,
          Pointer<Void> userParam) =>
      _glDebugMessageCallback(callback, userParam);
  late final _glDebugMessageCallback = _lookup<
          NativeFunction<
              Void Function(
                  Pointer<
                      NativeFunction<
                          Void Function(
                              UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>, Pointer<Void>)>>,
                  Pointer<Void>)>>('glDebugMessageCallback')
      .asFunction<
          void Function(
              Pointer<
                  NativeFunction<
                      Void Function(
                          UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>, Pointer<Void>)>>,
              Pointer<Void>)>();

  int getDebugMessageLog(int count, int bufSize, Pointer<UnsignedInt> sources, Pointer<UnsignedInt> types,
          Pointer<UnsignedInt> ids, Pointer<UnsignedInt> severities, Pointer<Int> lengths, Pointer<Char> messageLog) =>
      _glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  late final _glGetDebugMessageLog = _lookup<
          NativeFunction<
              UnsignedInt Function(UnsignedInt, Int, Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>, Pointer<Int>, Pointer<Char>)>>('glGetDebugMessageLog')
      .asFunction<
          int Function(int, int, Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<UnsignedInt>,
              Pointer<Int>, Pointer<Char>)>();

  void pushDebugGroup(int source, int id, int length, Pointer<Char> message) =>
      _glPushDebugGroup(source, id, length, message);
  late final _glPushDebugGroup =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Char>)>>('glPushDebugGroup')
          .asFunction<void Function(int, int, int, Pointer<Char>)>(isLeaf: true);

  void popDebugGroup() => _glPopDebugGroup();
  late final _glPopDebugGroup =
      _lookup<NativeFunction<Void Function()>>('glPopDebugGroup').asFunction<void Function()>(isLeaf: true);

  void objectLabel(int identifier, int name, int length, Pointer<Char> label) =>
      _glObjectLabel(identifier, name, length, label);
  late final _glObjectLabel =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Char>)>>('glObjectLabel')
          .asFunction<void Function(int, int, int, Pointer<Char>)>(isLeaf: true);

  void getObjectLabel(int identifier, int name, int bufSize, Pointer<Int> length, Pointer<Char> label) =>
      _glGetObjectLabel(identifier, name, bufSize, length, label);
  late final _glGetObjectLabel =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetObjectLabel')
          .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void objectPtrLabel(Pointer<Void> ptr, int length, Pointer<Char> label) => _glObjectPtrLabel(ptr, length, label);
  late final _glObjectPtrLabel =
      _lookup<NativeFunction<Void Function(Pointer<Void>, Int, Pointer<Char>)>>('glObjectPtrLabel')
          .asFunction<void Function(Pointer<Void>, int, Pointer<Char>)>(isLeaf: true);

  void getObjectPtrLabel(Pointer<Void> ptr, int bufSize, Pointer<Int> length, Pointer<Char> label) =>
      _glGetObjectPtrLabel(ptr, bufSize, length, label);
  late final _glGetObjectPtrLabel =
      _lookup<NativeFunction<Void Function(Pointer<Void>, Int, Pointer<Int>, Pointer<Char>)>>('glGetObjectPtrLabel')
          .asFunction<void Function(Pointer<Void>, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void bufferStorage(int target, int size, Pointer<Void> data, int flags) =>
      _glBufferStorage(target, size, data, flags);
  late final _glBufferStorage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Pointer<Void>, UnsignedInt)>>('glBufferStorage')
          .asFunction<void Function(int, int, Pointer<Void>, int)>(isLeaf: true);

  void clearTexImage(int texture, int level, int format, int type, Pointer<Void> data) =>
      _glClearTexImage(texture, level, format, type, data);
  late final _glClearTexImage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glClearTexImage')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void clearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth,
          int format, int type, Pointer<Void> data) =>
      _glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  late final _glClearTexSubImage = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glClearTexSubImage')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void bindBuffersBase(int target, int first, int count, Pointer<UnsignedInt> buffers) =>
      _glBindBuffersBase(target, first, count, buffers);
  late final _glBindBuffersBase =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>)>>('glBindBuffersBase')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void bindBuffersRange(
          int target, int first, int count, Pointer<UnsignedInt> buffers, Pointer<Long> offsets, Pointer<Long> sizes) =>
      _glBindBuffersRange(target, first, count, buffers, offsets, sizes);
  late final _glBindBuffersRange = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>, Pointer<Long>,
                  Pointer<Long>)>>('glBindBuffersRange')
      .asFunction<void Function(int, int, int, Pointer<UnsignedInt>, Pointer<Long>, Pointer<Long>)>(isLeaf: true);

  void bindTextures(int first, int count, Pointer<UnsignedInt> textures) => _glBindTextures(first, count, textures);
  late final _glBindTextures =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glBindTextures')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void bindSamplers(int first, int count, Pointer<UnsignedInt> samplers) => _glBindSamplers(first, count, samplers);
  late final _glBindSamplers =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glBindSamplers')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void bindImageTextures(int first, int count, Pointer<UnsignedInt> textures) =>
      _glBindImageTextures(first, count, textures);
  late final _glBindImageTextures =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glBindImageTextures')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void bindVertexBuffers(
          int first, int count, Pointer<UnsignedInt> buffers, Pointer<Long> offsets, Pointer<Int> strides) =>
      _glBindVertexBuffers(first, count, buffers, offsets, strides);
  late final _glBindVertexBuffers =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>, Pointer<Long>, Pointer<Int>)>>(
              'glBindVertexBuffers')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>, Pointer<Long>, Pointer<Int>)>(isLeaf: true);

  void clipControl(int origin, int depth) => _glClipControl(origin, depth);
  late final _glClipControl = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glClipControl')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void createTransformFeedbacks(int n, Pointer<UnsignedInt> ids) => _glCreateTransformFeedbacks(n, ids);
  late final _glCreateTransformFeedbacks =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateTransformFeedbacks')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void transformFeedbackBufferBase(int xfb, int index, int buffer) =>
      _glTransformFeedbackBufferBase(xfb, index, buffer);
  late final _glTransformFeedbackBufferBase =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glTransformFeedbackBufferBase')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void transformFeedbackBufferRange(int xfb, int index, int buffer, int offset, int size) =>
      _glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
  late final _glTransformFeedbackBufferRange =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long, Long)>>(
              'glTransformFeedbackBufferRange')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void getTransformFeedbackiv(int xfb, int pname, Pointer<Int> param) => _glGetTransformFeedbackiv(xfb, pname, param);
  late final _glGetTransformFeedbackiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetTransformFeedbackiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getTransformFeedbacki_v(int xfb, int pname, int index, Pointer<Int> param) =>
      _glGetTransformFeedbacki_v(xfb, pname, index, param);
  late final _glGetTransformFeedbacki_v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetTransformFeedbacki_v')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getTransformFeedbacki64_v(int xfb, int pname, int index, Pointer<Int64> param) =>
      _glGetTransformFeedbacki64_v(xfb, pname, index, param);
  late final _glGetTransformFeedbacki64_v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int64>)>>(
              'glGetTransformFeedbacki64_v')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void createBuffers(int n, Pointer<UnsignedInt> buffers) => _glCreateBuffers(n, buffers);
  late final _glCreateBuffers = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateBuffers')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void namedBufferStorage(int buffer, int size, Pointer<Void> data, int flags) =>
      _glNamedBufferStorage(buffer, size, data, flags);
  late final _glNamedBufferStorage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Pointer<Void>, UnsignedInt)>>('glNamedBufferStorage')
          .asFunction<void Function(int, int, Pointer<Void>, int)>(isLeaf: true);

  void namedBufferData(int buffer, int size, Pointer<Void> data, int usage) =>
      _glNamedBufferData(buffer, size, data, usage);
  late final _glNamedBufferData =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Pointer<Void>, UnsignedInt)>>('glNamedBufferData')
          .asFunction<void Function(int, int, Pointer<Void>, int)>(isLeaf: true);

  void namedBufferSubData(int buffer, int offset, int size, Pointer<Void> data) =>
      _glNamedBufferSubData(buffer, offset, size, data);
  late final _glNamedBufferSubData =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, Pointer<Void>)>>('glNamedBufferSubData')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void copyNamedBufferSubData(int readBuffer, int writeBuffer, int readOffset, int writeOffset, int size) =>
      _glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
  late final _glCopyNamedBufferSubData =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Long, Long, Long)>>('glCopyNamedBufferSubData')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void clearNamedBufferData(int buffer, int internalformat, int format, int type, Pointer<Void> data) =>
      _glClearNamedBufferData(buffer, internalformat, format, type, data);
  late final _glClearNamedBufferData =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glClearNamedBufferData')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void clearNamedBufferSubData(
          int buffer, int internalformat, int offset, int size, int format, int type, Pointer<Void> data) =>
      _glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
  late final _glClearNamedBufferSubData = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Long, Long, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glClearNamedBufferSubData')
      .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  Pointer<Void> mapNamedBuffer(int buffer, int access) => _glMapNamedBuffer(buffer, access);
  late final _glMapNamedBuffer =
      _lookup<NativeFunction<Pointer<Void> Function(UnsignedInt, UnsignedInt)>>('glMapNamedBuffer')
          .asFunction<Pointer<Void> Function(int, int)>(isLeaf: true);

  Pointer<Void> mapNamedBufferRange(int buffer, int offset, int length, int access) =>
      _glMapNamedBufferRange(buffer, offset, length, access);
  late final _glMapNamedBufferRange =
      _lookup<NativeFunction<Pointer<Void> Function(UnsignedInt, Long, Long, UnsignedInt)>>('glMapNamedBufferRange')
          .asFunction<Pointer<Void> Function(int, int, int, int)>(isLeaf: true);

  int unmapNamedBuffer(int buffer) => _glUnmapNamedBuffer(buffer);
  late final _glUnmapNamedBuffer = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glUnmapNamedBuffer')
      .asFunction<int Function(int)>(isLeaf: true);

  void flushMappedNamedBufferRange(int buffer, int offset, int length) =>
      _glFlushMappedNamedBufferRange(buffer, offset, length);
  late final _glFlushMappedNamedBufferRange =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long)>>('glFlushMappedNamedBufferRange')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void getNamedBufferParameteriv(int buffer, int pname, Pointer<Int> params) =>
      _glGetNamedBufferParameteriv(buffer, pname, params);
  late final _glGetNamedBufferParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetNamedBufferParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getNamedBufferParameteri64v(int buffer, int pname, Pointer<Int64> params) =>
      _glGetNamedBufferParameteri64v(buffer, pname, params);
  late final _glGetNamedBufferParameteri64v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int64>)>>('glGetNamedBufferParameteri64v')
          .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void getNamedBufferPointerv(int buffer, int pname, Pointer<Pointer<Void>> params) =>
      _glGetNamedBufferPointerv(buffer, pname, params);
  late final _glGetNamedBufferPointerv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>(
              'glGetNamedBufferPointerv')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void getNamedBufferSubData(int buffer, int offset, int size, Pointer<Void> data) =>
      _glGetNamedBufferSubData(buffer, offset, size, data);
  late final _glGetNamedBufferSubData =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, Pointer<Void>)>>('glGetNamedBufferSubData')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void createFramebuffers(int n, Pointer<UnsignedInt> framebuffers) => _glCreateFramebuffers(n, framebuffers);
  late final _glCreateFramebuffers =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateFramebuffers')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void namedFramebufferRenderbuffer(int framebuffer, int attachment, int renderbuffertarget, int renderbuffer) =>
      _glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
  late final _glNamedFramebufferRenderbuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glNamedFramebufferRenderbuffer')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void namedFramebufferParameteri(int framebuffer, int pname, int param) =>
      _glNamedFramebufferParameteri(framebuffer, pname, param);
  late final _glNamedFramebufferParameteri =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glNamedFramebufferParameteri')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void namedFramebufferTexture(int framebuffer, int attachment, int texture, int level) =>
      _glNamedFramebufferTexture(framebuffer, attachment, texture, level);
  late final _glNamedFramebufferTexture =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>('glNamedFramebufferTexture')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void namedFramebufferTextureLayer(int framebuffer, int attachment, int texture, int level, int layer) =>
      _glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
  late final _glNamedFramebufferTextureLayer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int)>>(
              'glNamedFramebufferTextureLayer')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void namedFramebufferDrawBuffer(int framebuffer, int buf) => _glNamedFramebufferDrawBuffer(framebuffer, buf);
  late final _glNamedFramebufferDrawBuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glNamedFramebufferDrawBuffer')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void namedFramebufferDrawBuffers(int framebuffer, int n, Pointer<UnsignedInt> bufs) =>
      _glNamedFramebufferDrawBuffers(framebuffer, n, bufs);
  late final _glNamedFramebufferDrawBuffers =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glNamedFramebufferDrawBuffers')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void namedFramebufferReadBuffer(int framebuffer, int src) => _glNamedFramebufferReadBuffer(framebuffer, src);
  late final _glNamedFramebufferReadBuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glNamedFramebufferReadBuffer')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void invalidateNamedFramebufferData(int framebuffer, int numAttachments, Pointer<UnsignedInt> attachments) =>
      _glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
  late final _glInvalidateNamedFramebufferData =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glInvalidateNamedFramebufferData')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void invalidateNamedFramebufferSubData(
          int framebuffer, int numAttachments, Pointer<UnsignedInt> attachments, int x, int y, int width, int height) =>
      _glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
  late final _glInvalidateNamedFramebufferSubData =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>, Int, Int, Int, Int)>>(
              'glInvalidateNamedFramebufferSubData')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>, int, int, int, int)>(isLeaf: true);

  void clearNamedFramebufferiv(int framebuffer, int buffer, int drawbuffer, Pointer<Int> value) =>
      _glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
  late final _glClearNamedFramebufferiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>)>>('glClearNamedFramebufferiv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void clearNamedFramebufferuiv(int framebuffer, int buffer, int drawbuffer, Pointer<UnsignedInt> value) =>
      _glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
  late final _glClearNamedFramebufferuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>)>>(
              'glClearNamedFramebufferuiv')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void clearNamedFramebufferfv(int framebuffer, int buffer, int drawbuffer, Pointer<Float> value) =>
      _glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
  late final _glClearNamedFramebufferfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>('glClearNamedFramebufferfv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void clearNamedFramebufferfi(int framebuffer, int buffer, int drawbuffer, double depth, int stencil) =>
      _glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
  late final _glClearNamedFramebufferfi =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Float, Int)>>('glClearNamedFramebufferfi')
          .asFunction<void Function(int, int, int, double, int)>(isLeaf: true);

  void blitNamedFramebuffer(int readFramebuffer, int drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1,
          int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) =>
      _glBlitNamedFramebuffer(
          readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  late final _glBlitNamedFramebuffer = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int, UnsignedInt,
                  UnsignedInt)>>('glBlitNamedFramebuffer')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  int checkNamedFramebufferStatus(int framebuffer, int target) => _glCheckNamedFramebufferStatus(framebuffer, target);
  late final _glCheckNamedFramebufferStatus =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt)>>('glCheckNamedFramebufferStatus')
          .asFunction<int Function(int, int)>(isLeaf: true);

  void getNamedFramebufferParameteriv(int framebuffer, int pname, Pointer<Int> param) =>
      _glGetNamedFramebufferParameteriv(framebuffer, pname, param);
  late final _glGetNamedFramebufferParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetNamedFramebufferParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getNamedFramebufferAttachmentParameteriv(int framebuffer, int attachment, int pname, Pointer<Int> params) =>
      _glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
  late final _glGetNamedFramebufferAttachmentParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetNamedFramebufferAttachmentParameteriv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void createRenderbuffers(int n, Pointer<UnsignedInt> renderbuffers) => _glCreateRenderbuffers(n, renderbuffers);
  late final _glCreateRenderbuffers =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateRenderbuffers')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void namedRenderbufferStorage(int renderbuffer, int internalformat, int width, int height) =>
      _glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
  late final _glNamedRenderbufferStorage =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int)>>('glNamedRenderbufferStorage')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void namedRenderbufferStorageMultisample(int renderbuffer, int samples, int internalformat, int width, int height) =>
      _glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
  late final _glNamedRenderbufferStorageMultisample =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int)>>(
              'glNamedRenderbufferStorageMultisample')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void getNamedRenderbufferParameteriv(int renderbuffer, int pname, Pointer<Int> params) =>
      _glGetNamedRenderbufferParameteriv(renderbuffer, pname, params);
  late final _glGetNamedRenderbufferParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetNamedRenderbufferParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void createTextures(int target, int n, Pointer<UnsignedInt> textures) => _glCreateTextures(target, n, textures);
  late final _glCreateTextures =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glCreateTextures')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void textureBuffer(int texture, int internalformat, int buffer) => _glTextureBuffer(texture, internalformat, buffer);
  late final _glTextureBuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glTextureBuffer')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void textureBufferRange(int texture, int internalformat, int buffer, int offset, int size) =>
      _glTextureBufferRange(texture, internalformat, buffer, offset, size);
  late final _glTextureBufferRange =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long, Long)>>('glTextureBufferRange')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void textureStorage1D(int texture, int levels, int internalformat, int width) =>
      _glTextureStorage1D(texture, levels, internalformat, width);
  late final _glTextureStorage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int)>>('glTextureStorage1D')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void textureStorage2D(int texture, int levels, int internalformat, int width, int height) =>
      _glTextureStorage2D(texture, levels, internalformat, width, height);
  late final _glTextureStorage2D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int)>>('glTextureStorage2D')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void textureStorage3D(int texture, int levels, int internalformat, int width, int height, int depth) =>
      _glTextureStorage3D(texture, levels, internalformat, width, height, depth);
  late final _glTextureStorage3D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int)>>('glTextureStorage3D')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void textureStorage2DMultisample(
          int texture, int samples, int internalformat, int width, int height, int fixedsamplelocations) =>
      _glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
  late final _glTextureStorage2DMultisample =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, UnsignedChar)>>(
              'glTextureStorage2DMultisample')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void textureStorage3DMultisample(
          int texture, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations) =>
      _glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
  late final _glTextureStorage3DMultisample =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, UnsignedChar)>>(
              'glTextureStorage3DMultisample')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void textureSubImage1D(int texture, int level, int xoffset, int width, int format, int type, Pointer<Void> pixels) =>
      _glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
  late final _glTextureSubImage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glTextureSubImage1D')
          .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void textureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, int format, int type,
          Pointer<Void> pixels) =>
      _glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
  late final _glTextureSubImage2D = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTextureSubImage2D')
      .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void textureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height,
          int depth, int format, int type, Pointer<Void> pixels) =>
      _glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  late final _glTextureSubImage3D = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTextureSubImage3D')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTextureSubImage1D(
          int texture, int level, int xoffset, int width, int format, int imageSize, Pointer<Void> data) =>
      _glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
  late final _glCompressedTextureSubImage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glCompressedTextureSubImage1D')
          .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, int format,
          int imageSize, Pointer<Void> data) =>
      _glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
  late final _glCompressedTextureSubImage2D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glCompressedTextureSubImage2D')
          .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height,
          int depth, int format, int imageSize, Pointer<Void> data) =>
      _glCompressedTextureSubImage3D(
          texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  late final _glCompressedTextureSubImage3D = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, Int,
                  Pointer<Void>)>>('glCompressedTextureSubImage3D')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void copyTextureSubImage1D(int texture, int level, int xoffset, int x, int y, int width) =>
      _glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
  late final _glCopyTextureSubImage1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int)>>('glCopyTextureSubImage1D')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void copyTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int x, int y, int width, int height) =>
      _glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
  late final _glCopyTextureSubImage2D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int)>>('glCopyTextureSubImage2D')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void copyTextureSubImage3D(
          int texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) =>
      _glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
  late final _glCopyTextureSubImage3D =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int)>>(
              'glCopyTextureSubImage3D')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void textureParameterf(int texture, int pname, double param) => _glTextureParameterf(texture, pname, param);
  late final _glTextureParameterf =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glTextureParameterf')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void textureParameterfv(int texture, int pname, Pointer<Float> param) => _glTextureParameterfv(texture, pname, param);
  late final _glTextureParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glTextureParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void textureParameteri(int texture, int pname, int param) => _glTextureParameteri(texture, pname, param);
  late final _glTextureParameteri =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glTextureParameteri')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void textureParameterIiv(int texture, int pname, Pointer<Int> params) =>
      _glTextureParameterIiv(texture, pname, params);
  late final _glTextureParameterIiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glTextureParameterIiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void textureParameterIuiv(int texture, int pname, Pointer<UnsignedInt> params) =>
      _glTextureParameterIuiv(texture, pname, params);
  late final _glTextureParameterIuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glTextureParameterIuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void textureParameteriv(int texture, int pname, Pointer<Int> param) => _glTextureParameteriv(texture, pname, param);
  late final _glTextureParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glTextureParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void generateTextureMipmap(int texture) => _glGenerateTextureMipmap(texture);
  late final _glGenerateTextureMipmap = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glGenerateTextureMipmap')
      .asFunction<void Function(int)>(isLeaf: true);

  void bindTextureUnit(int unit, int texture) => _glBindTextureUnit(unit, texture);
  late final _glBindTextureUnit = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindTextureUnit')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void getTextureImage(int texture, int level, int format, int type, int bufSize, Pointer<Void> pixels) =>
      _glGetTextureImage(texture, level, format, type, bufSize, pixels);
  late final _glGetTextureImage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetTextureImage')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getCompressedTextureImage(int texture, int level, int bufSize, Pointer<Void> pixels) =>
      _glGetCompressedTextureImage(texture, level, bufSize, pixels);
  late final _glGetCompressedTextureImage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Void>)>>('glGetCompressedTextureImage')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getTextureLevelParameterfv(int texture, int level, int pname, Pointer<Float> params) =>
      _glGetTextureLevelParameterfv(texture, level, pname, params);
  late final _glGetTextureLevelParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Float>)>>(
              'glGetTextureLevelParameterfv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getTextureLevelParameteriv(int texture, int level, int pname, Pointer<Int> params) =>
      _glGetTextureLevelParameteriv(texture, level, pname, params);
  late final _glGetTextureLevelParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Int>)>>(
              'glGetTextureLevelParameteriv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getTextureParameterfv(int texture, int pname, Pointer<Float> params) =>
      _glGetTextureParameterfv(texture, pname, params);
  late final _glGetTextureParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetTextureParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getTextureParameterIiv(int texture, int pname, Pointer<Int> params) =>
      _glGetTextureParameterIiv(texture, pname, params);
  late final _glGetTextureParameterIiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetTextureParameterIiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getTextureParameterIuiv(int texture, int pname, Pointer<UnsignedInt> params) =>
      _glGetTextureParameterIuiv(texture, pname, params);
  late final _glGetTextureParameterIuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glGetTextureParameterIuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getTextureParameteriv(int texture, int pname, Pointer<Int> params) =>
      _glGetTextureParameteriv(texture, pname, params);
  late final _glGetTextureParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetTextureParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void createVertexArrays(int n, Pointer<UnsignedInt> arrays) => _glCreateVertexArrays(n, arrays);
  late final _glCreateVertexArrays =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateVertexArrays')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void disableVertexArrayAttrib(int vaobj, int index) => _glDisableVertexArrayAttrib(vaobj, index);
  late final _glDisableVertexArrayAttrib =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDisableVertexArrayAttrib')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void enableVertexArrayAttrib(int vaobj, int index) => _glEnableVertexArrayAttrib(vaobj, index);
  late final _glEnableVertexArrayAttrib =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glEnableVertexArrayAttrib')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexArrayElementBuffer(int vaobj, int buffer) => _glVertexArrayElementBuffer(vaobj, buffer);
  late final _glVertexArrayElementBuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glVertexArrayElementBuffer')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexArrayVertexBuffer(int vaobj, int bindingindex, int buffer, int offset, int stride) =>
      _glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
  late final _glVertexArrayVertexBuffer =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long, Int)>>(
              'glVertexArrayVertexBuffer')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexArrayVertexBuffers(
          int vaobj, int first, int count, Pointer<UnsignedInt> buffers, Pointer<Long> offsets, Pointer<Int> strides) =>
      _glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
  late final _glVertexArrayVertexBuffers = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>, Pointer<Long>,
                  Pointer<Int>)>>('glVertexArrayVertexBuffers')
      .asFunction<void Function(int, int, int, Pointer<UnsignedInt>, Pointer<Long>, Pointer<Int>)>(isLeaf: true);

  void vertexArrayAttribBinding(int vaobj, int attribindex, int bindingindex) =>
      _glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
  late final _glVertexArrayAttribBinding =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glVertexArrayAttribBinding')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexArrayAttribFormat(int vaobj, int attribindex, int size, int type, int normalized, int relativeoffset) =>
      _glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
  late final _glVertexArrayAttribFormat =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedChar, UnsignedInt)>>(
              'glVertexArrayAttribFormat')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void vertexArrayAttribIFormat(int vaobj, int attribindex, int size, int type, int relativeoffset) =>
      _glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
  late final _glVertexArrayAttribIFormat =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt)>>(
              'glVertexArrayAttribIFormat')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexArrayAttribLFormat(int vaobj, int attribindex, int size, int type, int relativeoffset) =>
      _glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
  late final _glVertexArrayAttribLFormat =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt)>>(
              'glVertexArrayAttribLFormat')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexArrayBindingDivisor(int vaobj, int bindingindex, int divisor) =>
      _glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
  late final _glVertexArrayBindingDivisor =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glVertexArrayBindingDivisor')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void getVertexArrayiv(int vaobj, int pname, Pointer<Int> param) => _glGetVertexArrayiv(vaobj, pname, param);
  late final _glGetVertexArrayiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVertexArrayiv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexArrayIndexediv(int vaobj, int index, int pname, Pointer<Int> param) =>
      _glGetVertexArrayIndexediv(vaobj, index, pname, param);
  late final _glGetVertexArrayIndexediv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetVertexArrayIndexediv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexArrayIndexed64iv(int vaobj, int index, int pname, Pointer<Int64> param) =>
      _glGetVertexArrayIndexed64iv(vaobj, index, pname, param);
  late final _glGetVertexArrayIndexed64iv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int64>)>>(
              'glGetVertexArrayIndexed64iv')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void createSamplers(int n, Pointer<UnsignedInt> samplers) => _glCreateSamplers(n, samplers);
  late final _glCreateSamplers = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateSamplers')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void createProgramPipelines(int n, Pointer<UnsignedInt> pipelines) => _glCreateProgramPipelines(n, pipelines);
  late final _glCreateProgramPipelines =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateProgramPipelines')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void createQueries(int target, int n, Pointer<UnsignedInt> ids) => _glCreateQueries(target, n, ids);
  late final _glCreateQueries =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glCreateQueries')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getQueryBufferObjecti64v(int id, int buffer, int pname, int offset) =>
      _glGetQueryBufferObjecti64v(id, buffer, pname, offset);
  late final _glGetQueryBufferObjecti64v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long)>>('glGetQueryBufferObjecti64v')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getQueryBufferObjectiv(int id, int buffer, int pname, int offset) =>
      _glGetQueryBufferObjectiv(id, buffer, pname, offset);
  late final _glGetQueryBufferObjectiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long)>>('glGetQueryBufferObjectiv')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getQueryBufferObjectui64v(int id, int buffer, int pname, int offset) =>
      _glGetQueryBufferObjectui64v(id, buffer, pname, offset);
  late final _glGetQueryBufferObjectui64v =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long)>>('glGetQueryBufferObjectui64v')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getQueryBufferObjectuiv(int id, int buffer, int pname, int offset) =>
      _glGetQueryBufferObjectuiv(id, buffer, pname, offset);
  late final _glGetQueryBufferObjectuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long)>>('glGetQueryBufferObjectuiv')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void memoryBarrierByRegion(int barriers) => _glMemoryBarrierByRegion(barriers);
  late final _glMemoryBarrierByRegion = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMemoryBarrierByRegion')
      .asFunction<void Function(int)>(isLeaf: true);

  void getTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height,
          int depth, int format, int type, int bufSize, Pointer<Void> pixels) =>
      _glGetTextureSubImage(
          texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
  late final _glGetTextureSubImage = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt, Int,
                  Pointer<Void>)>>('glGetTextureSubImage')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width,
          int height, int depth, int bufSize, Pointer<Void> pixels) =>
      _glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
  late final _glGetCompressedTextureSubImage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int, Pointer<Void>)>>(
              'glGetCompressedTextureSubImage')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  int getGraphicsResetStatus() => _glGetGraphicsResetStatus();
  late final _glGetGraphicsResetStatus = _lookup<NativeFunction<UnsignedInt Function()>>('glGetGraphicsResetStatus')
      .asFunction<int Function()>(isLeaf: true);

  void getnCompressedTexImage(int target, int lod, int bufSize, Pointer<Void> pixels) =>
      _glGetnCompressedTexImage(target, lod, bufSize, pixels);
  late final _glGetnCompressedTexImage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Void>)>>('glGetnCompressedTexImage')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnTexImage(int target, int level, int format, int type, int bufSize, Pointer<Void> pixels) =>
      _glGetnTexImage(target, level, format, type, bufSize, pixels);
  late final _glGetnTexImage =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetnTexImage')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnUniformdv(int program, int location, int bufSize, Pointer<Double> params) =>
      _glGetnUniformdv(program, location, bufSize, params);
  late final _glGetnUniformdv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Double>)>>('glGetnUniformdv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void getnUniformfv(int program, int location, int bufSize, Pointer<Float> params) =>
      _glGetnUniformfv(program, location, bufSize, params);
  late final _glGetnUniformfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Float>)>>('glGetnUniformfv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getnUniformiv(int program, int location, int bufSize, Pointer<Int> params) =>
      _glGetnUniformiv(program, location, bufSize, params);
  late final _glGetnUniformiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int>)>>('glGetnUniformiv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getnUniformuiv(int program, int location, int bufSize, Pointer<UnsignedInt> params) =>
      _glGetnUniformuiv(program, location, bufSize, params);
  late final _glGetnUniformuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>('glGetnUniformuiv')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void readnPixels(int x, int y, int width, int height, int format, int type, int bufSize, Pointer<Void> data) =>
      _glReadnPixels(x, y, width, height, format, type, bufSize, data);
  late final _glReadnPixels =
      _lookup<NativeFunction<Void Function(Int, Int, Int, Int, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glReadnPixels')
          .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnMapdv(int target, int query, int bufSize, Pointer<Double> v) => _glGetnMapdv(target, query, bufSize, v);
  late final _glGetnMapdv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Double>)>>('glGetnMapdv')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void getnMapfv(int target, int query, int bufSize, Pointer<Float> v) => _glGetnMapfv(target, query, bufSize, v);
  late final _glGetnMapfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>('glGetnMapfv')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getnMapiv(int target, int query, int bufSize, Pointer<Int> v) => _glGetnMapiv(target, query, bufSize, v);
  late final _glGetnMapiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>)>>('glGetnMapiv')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getnPixelMapfv(int map, int bufSize, Pointer<Float> values) => _glGetnPixelMapfv(map, bufSize, values);
  late final _glGetnPixelMapfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glGetnPixelMapfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getnPixelMapuiv(int map, int bufSize, Pointer<UnsignedInt> values) => _glGetnPixelMapuiv(map, bufSize, values);
  late final _glGetnPixelMapuiv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glGetnPixelMapuiv')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getnPixelMapusv(int map, int bufSize, Pointer<UnsignedShort> values) => _glGetnPixelMapusv(map, bufSize, values);
  late final _glGetnPixelMapusv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedShort>)>>('glGetnPixelMapusv')
          .asFunction<void Function(int, int, Pointer<UnsignedShort>)>(isLeaf: true);

  void getnPolygonStipple(int bufSize, Pointer<UnsignedChar> pattern) => _glGetnPolygonStipple(bufSize, pattern);
  late final _glGetnPolygonStipple =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedChar>)>>('glGetnPolygonStipple')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void getnColorTable(int target, int format, int type, int bufSize, Pointer<Void> table) =>
      _glGetnColorTable(target, format, type, bufSize, table);
  late final _glGetnColorTable =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetnColorTable')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnConvolutionFilter(int target, int format, int type, int bufSize, Pointer<Void> image) =>
      _glGetnConvolutionFilter(target, format, type, bufSize, image);
  late final _glGetnConvolutionFilter =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetnConvolutionFilter')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnSeparableFilter(int target, int format, int type, int rowBufSize, Pointer<Void> row, int columnBufSize,
          Pointer<Void> column, Pointer<Void> span) =>
      _glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);
  late final _glGetnSeparableFilter = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Void>, Int, Pointer<Void>,
                  Pointer<Void>)>>('glGetnSeparableFilter')
      .asFunction<void Function(int, int, int, int, Pointer<Void>, int, Pointer<Void>, Pointer<Void>)>(isLeaf: true);

  void getnHistogram(int target, int reset, int format, int type, int bufSize, Pointer<Void> values) =>
      _glGetnHistogram(target, reset, format, type, bufSize, values);
  late final _glGetnHistogram =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetnHistogram')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnMinmax(int target, int reset, int format, int type, int bufSize, Pointer<Void> values) =>
      _glGetnMinmax(target, reset, format, type, bufSize, values);
  late final _glGetnMinmax =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetnMinmax')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void textureBarrier() => _glTextureBarrier();
  late final _glTextureBarrier =
      _lookup<NativeFunction<Void Function()>>('glTextureBarrier').asFunction<void Function()>(isLeaf: true);

  void specializeShader(int shader, Pointer<Char> pEntryPoint, int numSpecializationConstants,
          Pointer<UnsignedInt> pConstantIndex, Pointer<UnsignedInt> pConstantValue) =>
      _glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
  late final _glSpecializeShader = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Pointer<Char>, UnsignedInt, Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>)>>('glSpecializeShader')
      .asFunction<void Function(int, Pointer<Char>, int, Pointer<UnsignedInt>, Pointer<UnsignedInt>)>(isLeaf: true);

  void multiDrawArraysIndirectCount(int mode, Pointer<Void> indirect, int drawcount, int maxdrawcount, int stride) =>
      _glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
  late final _glMultiDrawArraysIndirectCount =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>, Long, Int, Int)>>(
              'glMultiDrawArraysIndirectCount')
          .asFunction<void Function(int, Pointer<Void>, int, int, int)>(isLeaf: true);

  void multiDrawElementsIndirectCount(
          int mode, int type, Pointer<Void> indirect, int drawcount, int maxdrawcount, int stride) =>
      _glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);
  late final _glMultiDrawElementsIndirectCount =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>, Long, Int, Int)>>(
              'glMultiDrawElementsIndirectCount')
          .asFunction<void Function(int, int, Pointer<Void>, int, int, int)>(isLeaf: true);

  void polygonOffsetClamp(double factor, double units, double clamp) => _glPolygonOffsetClamp(factor, units, clamp);
  late final _glPolygonOffsetClamp = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glPolygonOffsetClamp')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void primitiveBoundingBoxARB(
          double minX, double minY, double minZ, double minW, double maxX, double maxY, double maxZ, double maxW) =>
      _glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  late final _glPrimitiveBoundingBoxARB =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float, Float, Float, Float, Float)>>(
              'glPrimitiveBoundingBoxARB')
          .asFunction<void Function(double, double, double, double, double, double, double, double)>(isLeaf: true);

  int getTextureHandleARB(int texture) => _glGetTextureHandleARB(texture);
  late final _glGetTextureHandleARB = _lookup<NativeFunction<Uint64 Function(UnsignedInt)>>('glGetTextureHandleARB')
      .asFunction<int Function(int)>(isLeaf: true);

  int getTextureSamplerHandleARB(int texture, int sampler) => _glGetTextureSamplerHandleARB(texture, sampler);
  late final _glGetTextureSamplerHandleARB =
      _lookup<NativeFunction<Uint64 Function(UnsignedInt, UnsignedInt)>>('glGetTextureSamplerHandleARB')
          .asFunction<int Function(int, int)>(isLeaf: true);

  void makeTextureHandleResidentARB(int handle) => _glMakeTextureHandleResidentARB(handle);
  late final _glMakeTextureHandleResidentARB =
      _lookup<NativeFunction<Void Function(Uint64)>>('glMakeTextureHandleResidentARB')
          .asFunction<void Function(int)>(isLeaf: true);

  void makeTextureHandleNonResidentARB(int handle) => _glMakeTextureHandleNonResidentARB(handle);
  late final _glMakeTextureHandleNonResidentARB =
      _lookup<NativeFunction<Void Function(Uint64)>>('glMakeTextureHandleNonResidentARB')
          .asFunction<void Function(int)>(isLeaf: true);

  int getImageHandleARB(int texture, int level, int layered, int layer, int format) =>
      _glGetImageHandleARB(texture, level, layered, layer, format);
  late final _glGetImageHandleARB =
      _lookup<NativeFunction<Uint64 Function(UnsignedInt, Int, UnsignedChar, Int, UnsignedInt)>>('glGetImageHandleARB')
          .asFunction<int Function(int, int, int, int, int)>(isLeaf: true);

  void makeImageHandleResidentARB(int handle, int access) => _glMakeImageHandleResidentARB(handle, access);
  late final _glMakeImageHandleResidentARB =
      _lookup<NativeFunction<Void Function(Uint64, UnsignedInt)>>('glMakeImageHandleResidentARB')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void makeImageHandleNonResidentARB(int handle) => _glMakeImageHandleNonResidentARB(handle);
  late final _glMakeImageHandleNonResidentARB =
      _lookup<NativeFunction<Void Function(Uint64)>>('glMakeImageHandleNonResidentARB')
          .asFunction<void Function(int)>(isLeaf: true);

  void uniformHandleui64ARB(int location, int value) => _glUniformHandleui64ARB(location, value);
  late final _glUniformHandleui64ARB = _lookup<NativeFunction<Void Function(Int, Uint64)>>('glUniformHandleui64ARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void uniformHandleui64vARB(int location, int count, Pointer<Uint64> value) =>
      _glUniformHandleui64vARB(location, count, value);
  late final _glUniformHandleui64vARB =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniformHandleui64vARB')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniformHandleui64ARB(int program, int location, int value) =>
      _glProgramUniformHandleui64ARB(program, location, value);
  late final _glProgramUniformHandleui64ARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64)>>('glProgramUniformHandleui64ARB')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniformHandleui64vARB(int program, int location, int count, Pointer<Uint64> values) =>
      _glProgramUniformHandleui64vARB(program, location, count, values);
  late final _glProgramUniformHandleui64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniformHandleui64vARB')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  int isTextureHandleResidentARB(int handle) => _glIsTextureHandleResidentARB(handle);
  late final _glIsTextureHandleResidentARB =
      _lookup<NativeFunction<UnsignedChar Function(Uint64)>>('glIsTextureHandleResidentARB')
          .asFunction<int Function(int)>(isLeaf: true);

  int isImageHandleResidentARB(int handle) => _glIsImageHandleResidentARB(handle);
  late final _glIsImageHandleResidentARB =
      _lookup<NativeFunction<UnsignedChar Function(Uint64)>>('glIsImageHandleResidentARB')
          .asFunction<int Function(int)>(isLeaf: true);

  void vertexAttribL1ui64ARB(int index, int x) => _glVertexAttribL1ui64ARB(index, x);
  late final _glVertexAttribL1ui64ARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Uint64)>>('glVertexAttribL1ui64ARB')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttribL1ui64vARB(int index, Pointer<Uint64> v) => _glVertexAttribL1ui64vARB(index, v);
  late final _glVertexAttribL1ui64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Uint64>)>>('glVertexAttribL1ui64vARB')
          .asFunction<void Function(int, Pointer<Uint64>)>(isLeaf: true);

  void getVertexAttribLui64vARB(int index, int pname, Pointer<Uint64> params) =>
      _glGetVertexAttribLui64vARB(index, pname, params);
  late final _glGetVertexAttribLui64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Uint64>)>>('glGetVertexAttribLui64vARB')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  Pointer<NativeType> createSyncFromCLeventARB(Pointer<NativeType> context, Pointer<NativeType> event, int flags) =>
      _glCreateSyncFromCLeventARB(context, event, flags);
  late final _glCreateSyncFromCLeventARB =
      _lookup<NativeFunction<Pointer<NativeType> Function(Pointer<NativeType>, Pointer<NativeType>, UnsignedInt)>>(
              'glCreateSyncFromCLeventARB')
          .asFunction<Pointer<NativeType> Function(Pointer<NativeType>, Pointer<NativeType>, int)>(isLeaf: true);

  void clampColorARB(int target, int clamp) => _glClampColorARB(target, clamp);
  late final _glClampColorARB = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glClampColorARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void dispatchComputeGroupSizeARB(
          int num_groups_x, int num_groups_y, int num_groups_z, int group_size_x, int group_size_y, int group_size_z) =>
      _glDispatchComputeGroupSizeARB(
          num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
  late final _glDispatchComputeGroupSizeARB = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt)>>('glDispatchComputeGroupSizeARB')
      .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void debugMessageControlARB(int source, int type, int severity, int count, Pointer<UnsignedInt> ids, int enabled) =>
      _glDebugMessageControlARB(source, type, severity, count, ids, enabled);
  late final _glDebugMessageControlARB = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>,
                  UnsignedChar)>>('glDebugMessageControlARB')
      .asFunction<void Function(int, int, int, int, Pointer<UnsignedInt>, int)>(isLeaf: true);

  void debugMessageInsertARB(int source, int type, int id, int severity, int length, Pointer<Char> buf) =>
      _glDebugMessageInsertARB(source, type, id, severity, length, buf);
  late final _glDebugMessageInsertARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>)>>(
              'glDebugMessageInsertARB')
          .asFunction<void Function(int, int, int, int, int, Pointer<Char>)>(isLeaf: true);

  void debugMessageCallbackARB(
          Pointer<
                  NativeFunction<
                      Void Function(
                          UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>, Pointer<Void>)>>
              callback,
          Pointer<Void> userParam) =>
      _glDebugMessageCallbackARB(callback, userParam);
  late final _glDebugMessageCallbackARB = _lookup<
          NativeFunction<
              Void Function(
                  Pointer<
                      NativeFunction<
                          Void Function(
                              UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>, Pointer<Void>)>>,
                  Pointer<Void>)>>('glDebugMessageCallbackARB')
      .asFunction<
          void Function(
              Pointer<
                  NativeFunction<
                      Void Function(
                          UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>, Pointer<Void>)>>,
              Pointer<Void>)>();

  int getDebugMessageLogARB(int count, int bufSize, Pointer<UnsignedInt> sources, Pointer<UnsignedInt> types,
          Pointer<UnsignedInt> ids, Pointer<UnsignedInt> severities, Pointer<Int> lengths, Pointer<Char> messageLog) =>
      _glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  late final _glGetDebugMessageLogARB = _lookup<
          NativeFunction<
              UnsignedInt Function(UnsignedInt, Int, Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>, Pointer<Int>, Pointer<Char>)>>('glGetDebugMessageLogARB')
      .asFunction<
          int Function(int, int, Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<UnsignedInt>,
              Pointer<Int>, Pointer<Char>)>();

  void drawBuffersARB(int n, Pointer<UnsignedInt> bufs) => _glDrawBuffersARB(n, bufs);
  late final _glDrawBuffersARB = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDrawBuffersARB')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void blendEquationiARB(int buf, int mode) => _glBlendEquationiARB(buf, mode);
  late final _glBlendEquationiARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBlendEquationiARB')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void blendEquationSeparateiARB(int buf, int modeRGB, int modeAlpha) =>
      _glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
  late final _glBlendEquationSeparateiARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBlendEquationSeparateiARB')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void blendFunciARB(int buf, int src, int dst) => _glBlendFunciARB(buf, src, dst);
  late final _glBlendFunciARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBlendFunciARB')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void blendFuncSeparateiARB(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) =>
      _glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  late final _glBlendFuncSeparateiARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glBlendFuncSeparateiARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void drawArraysInstancedARB(int mode, int first, int count, int primcount) =>
      _glDrawArraysInstancedARB(mode, first, count, primcount);
  late final _glDrawArraysInstancedARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glDrawArraysInstancedARB')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void drawElementsInstancedARB(int mode, int count, int type, Pointer<Void> indices, int primcount) =>
      _glDrawElementsInstancedARB(mode, count, type, indices, primcount);
  late final _glDrawElementsInstancedARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>, Int)>>(
              'glDrawElementsInstancedARB')
          .asFunction<void Function(int, int, int, Pointer<Void>, int)>(isLeaf: true);

  void programStringARB(int target, int format, int len, Pointer<Void> string) =>
      _glProgramStringARB(target, format, len, string);
  late final _glProgramStringARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>('glProgramStringARB')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void bindProgramARB(int target, int program) => _glBindProgramARB(target, program);
  late final _glBindProgramARB = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindProgramARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteProgramsARB(int n, Pointer<UnsignedInt> programs) => _glDeleteProgramsARB(n, programs);
  late final _glDeleteProgramsARB =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteProgramsARB')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genProgramsARB(int n, Pointer<UnsignedInt> programs) => _glGenProgramsARB(n, programs);
  late final _glGenProgramsARB = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenProgramsARB')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programEnvParameter4dARB(int target, int index, double x, double y, double z, double w) =>
      _glProgramEnvParameter4dARB(target, index, x, y, z, w);
  late final _glProgramEnvParameter4dARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Double, Double, Double, Double)>>(
              'glProgramEnvParameter4dARB')
          .asFunction<void Function(int, int, double, double, double, double)>(isLeaf: true);

  void programEnvParameter4dvARB(int target, int index, Pointer<Double> params) =>
      _glProgramEnvParameter4dvARB(target, index, params);
  late final _glProgramEnvParameter4dvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glProgramEnvParameter4dvARB')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void programEnvParameter4fARB(int target, int index, double x, double y, double z, double w) =>
      _glProgramEnvParameter4fARB(target, index, x, y, z, w);
  late final _glProgramEnvParameter4fARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float, Float, Float, Float)>>(
              'glProgramEnvParameter4fARB')
          .asFunction<void Function(int, int, double, double, double, double)>(isLeaf: true);

  void programEnvParameter4fvARB(int target, int index, Pointer<Float> params) =>
      _glProgramEnvParameter4fvARB(target, index, params);
  late final _glProgramEnvParameter4fvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glProgramEnvParameter4fvARB')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void programLocalParameter4dARB(int target, int index, double x, double y, double z, double w) =>
      _glProgramLocalParameter4dARB(target, index, x, y, z, w);
  late final _glProgramLocalParameter4dARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Double, Double, Double, Double)>>(
              'glProgramLocalParameter4dARB')
          .asFunction<void Function(int, int, double, double, double, double)>(isLeaf: true);

  void programLocalParameter4dvARB(int target, int index, Pointer<Double> params) =>
      _glProgramLocalParameter4dvARB(target, index, params);
  late final _glProgramLocalParameter4dvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glProgramLocalParameter4dvARB')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void programLocalParameter4fARB(int target, int index, double x, double y, double z, double w) =>
      _glProgramLocalParameter4fARB(target, index, x, y, z, w);
  late final _glProgramLocalParameter4fARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float, Float, Float, Float)>>(
              'glProgramLocalParameter4fARB')
          .asFunction<void Function(int, int, double, double, double, double)>(isLeaf: true);

  void programLocalParameter4fvARB(int target, int index, Pointer<Float> params) =>
      _glProgramLocalParameter4fvARB(target, index, params);
  late final _glProgramLocalParameter4fvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glProgramLocalParameter4fvARB')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getProgramEnvParameterdvARB(int target, int index, Pointer<Double> params) =>
      _glGetProgramEnvParameterdvARB(target, index, params);
  late final _glGetProgramEnvParameterdvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetProgramEnvParameterdvARB')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void getProgramEnvParameterfvARB(int target, int index, Pointer<Float> params) =>
      _glGetProgramEnvParameterfvARB(target, index, params);
  late final _glGetProgramEnvParameterfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetProgramEnvParameterfvARB')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getProgramLocalParameterdvARB(int target, int index, Pointer<Double> params) =>
      _glGetProgramLocalParameterdvARB(target, index, params);
  late final _glGetProgramLocalParameterdvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>(
              'glGetProgramLocalParameterdvARB')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void getProgramLocalParameterfvARB(int target, int index, Pointer<Float> params) =>
      _glGetProgramLocalParameterfvARB(target, index, params);
  late final _glGetProgramLocalParameterfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetProgramLocalParameterfvARB')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getProgramivARB(int target, int pname, Pointer<Int> params) => _glGetProgramivARB(target, pname, params);
  late final _glGetProgramivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetProgramivARB')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getProgramStringARB(int target, int pname, Pointer<Void> string) =>
      _glGetProgramStringARB(target, pname, string);
  late final _glGetProgramStringARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>)>>('glGetProgramStringARB')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  int isProgramARB(int program) => _glIsProgramARB(program);
  late final _glIsProgramARB = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsProgramARB')
      .asFunction<int Function(int)>(isLeaf: true);

  void programParameteriARB(int program, int pname, int value) => _glProgramParameteriARB(program, pname, value);
  late final _glProgramParameteriARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glProgramParameteriARB')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void framebufferTextureARB(int target, int attachment, int texture, int level) =>
      _glFramebufferTextureARB(target, attachment, texture, level);
  late final _glFramebufferTextureARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>('glFramebufferTextureARB')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void framebufferTextureLayerARB(int target, int attachment, int texture, int level, int layer) =>
      _glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
  late final _glFramebufferTextureLayerARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int)>>(
              'glFramebufferTextureLayerARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void framebufferTextureFaceARB(int target, int attachment, int texture, int level, int face) =>
      _glFramebufferTextureFaceARB(target, attachment, texture, level, face);
  late final _glFramebufferTextureFaceARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, UnsignedInt)>>(
              'glFramebufferTextureFaceARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void specializeShaderARB(int shader, Pointer<Char> pEntryPoint, int numSpecializationConstants,
          Pointer<UnsignedInt> pConstantIndex, Pointer<UnsignedInt> pConstantValue) =>
      _glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
  late final _glSpecializeShaderARB = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Pointer<Char>, UnsignedInt, Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>)>>('glSpecializeShaderARB')
      .asFunction<void Function(int, Pointer<Char>, int, Pointer<UnsignedInt>, Pointer<UnsignedInt>)>(isLeaf: true);

  void uniform1i64ARB(int location, int x) => _glUniform1i64ARB(location, x);
  late final _glUniform1i64ARB = _lookup<NativeFunction<Void Function(Int, Int64)>>('glUniform1i64ARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void uniform2i64ARB(int location, int x, int y) => _glUniform2i64ARB(location, x, y);
  late final _glUniform2i64ARB = _lookup<NativeFunction<Void Function(Int, Int64, Int64)>>('glUniform2i64ARB')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void uniform3i64ARB(int location, int x, int y, int z) => _glUniform3i64ARB(location, x, y, z);
  late final _glUniform3i64ARB = _lookup<NativeFunction<Void Function(Int, Int64, Int64, Int64)>>('glUniform3i64ARB')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void uniform4i64ARB(int location, int x, int y, int z, int w) => _glUniform4i64ARB(location, x, y, z, w);
  late final _glUniform4i64ARB =
      _lookup<NativeFunction<Void Function(Int, Int64, Int64, Int64, Int64)>>('glUniform4i64ARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void uniform1i64vARB(int location, int count, Pointer<Int64> value) => _glUniform1i64vARB(location, count, value);
  late final _glUniform1i64vARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int64>)>>('glUniform1i64vARB')
      .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void uniform2i64vARB(int location, int count, Pointer<Int64> value) => _glUniform2i64vARB(location, count, value);
  late final _glUniform2i64vARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int64>)>>('glUniform2i64vARB')
      .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void uniform3i64vARB(int location, int count, Pointer<Int64> value) => _glUniform3i64vARB(location, count, value);
  late final _glUniform3i64vARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int64>)>>('glUniform3i64vARB')
      .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void uniform4i64vARB(int location, int count, Pointer<Int64> value) => _glUniform4i64vARB(location, count, value);
  late final _glUniform4i64vARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int64>)>>('glUniform4i64vARB')
      .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void uniform1ui64ARB(int location, int x) => _glUniform1ui64ARB(location, x);
  late final _glUniform1ui64ARB = _lookup<NativeFunction<Void Function(Int, Uint64)>>('glUniform1ui64ARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void uniform2ui64ARB(int location, int x, int y) => _glUniform2ui64ARB(location, x, y);
  late final _glUniform2ui64ARB = _lookup<NativeFunction<Void Function(Int, Uint64, Uint64)>>('glUniform2ui64ARB')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void uniform3ui64ARB(int location, int x, int y, int z) => _glUniform3ui64ARB(location, x, y, z);
  late final _glUniform3ui64ARB =
      _lookup<NativeFunction<Void Function(Int, Uint64, Uint64, Uint64)>>('glUniform3ui64ARB')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void uniform4ui64ARB(int location, int x, int y, int z, int w) => _glUniform4ui64ARB(location, x, y, z, w);
  late final _glUniform4ui64ARB =
      _lookup<NativeFunction<Void Function(Int, Uint64, Uint64, Uint64, Uint64)>>('glUniform4ui64ARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void uniform1ui64vARB(int location, int count, Pointer<Uint64> value) => _glUniform1ui64vARB(location, count, value);
  late final _glUniform1ui64vARB =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniform1ui64vARB')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void uniform2ui64vARB(int location, int count, Pointer<Uint64> value) => _glUniform2ui64vARB(location, count, value);
  late final _glUniform2ui64vARB =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniform2ui64vARB')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void uniform3ui64vARB(int location, int count, Pointer<Uint64> value) => _glUniform3ui64vARB(location, count, value);
  late final _glUniform3ui64vARB =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniform3ui64vARB')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void uniform4ui64vARB(int location, int count, Pointer<Uint64> value) => _glUniform4ui64vARB(location, count, value);
  late final _glUniform4ui64vARB =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniform4ui64vARB')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void getUniformi64vARB(int program, int location, Pointer<Int64> params) =>
      _glGetUniformi64vARB(program, location, params);
  late final _glGetUniformi64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int64>)>>('glGetUniformi64vARB')
          .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void getUniformui64vARB(int program, int location, Pointer<Uint64> params) =>
      _glGetUniformui64vARB(program, location, params);
  late final _glGetUniformui64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Uint64>)>>('glGetUniformui64vARB')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void getnUniformi64vARB(int program, int location, int bufSize, Pointer<Int64> params) =>
      _glGetnUniformi64vARB(program, location, bufSize, params);
  late final _glGetnUniformi64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int64>)>>('glGetnUniformi64vARB')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void getnUniformui64vARB(int program, int location, int bufSize, Pointer<Uint64> params) =>
      _glGetnUniformui64vARB(program, location, bufSize, params);
  late final _glGetnUniformui64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glGetnUniformui64vARB')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniform1i64ARB(int program, int location, int x) => _glProgramUniform1i64ARB(program, location, x);
  late final _glProgramUniform1i64ARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int64)>>('glProgramUniform1i64ARB')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniform2i64ARB(int program, int location, int x, int y) =>
      _glProgramUniform2i64ARB(program, location, x, y);
  late final _glProgramUniform2i64ARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int64, Int64)>>('glProgramUniform2i64ARB')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void programUniform3i64ARB(int program, int location, int x, int y, int z) =>
      _glProgramUniform3i64ARB(program, location, x, y, z);
  late final _glProgramUniform3i64ARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int64, Int64, Int64)>>('glProgramUniform3i64ARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void programUniform4i64ARB(int program, int location, int x, int y, int z, int w) =>
      _glProgramUniform4i64ARB(program, location, x, y, z, w);
  late final _glProgramUniform4i64ARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int64, Int64, Int64, Int64)>>('glProgramUniform4i64ARB')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programUniform1i64vARB(int program, int location, int count, Pointer<Int64> value) =>
      _glProgramUniform1i64vARB(program, location, count, value);
  late final _glProgramUniform1i64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int64>)>>('glProgramUniform1i64vARB')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void programUniform2i64vARB(int program, int location, int count, Pointer<Int64> value) =>
      _glProgramUniform2i64vARB(program, location, count, value);
  late final _glProgramUniform2i64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int64>)>>('glProgramUniform2i64vARB')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void programUniform3i64vARB(int program, int location, int count, Pointer<Int64> value) =>
      _glProgramUniform3i64vARB(program, location, count, value);
  late final _glProgramUniform3i64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int64>)>>('glProgramUniform3i64vARB')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void programUniform4i64vARB(int program, int location, int count, Pointer<Int64> value) =>
      _glProgramUniform4i64vARB(program, location, count, value);
  late final _glProgramUniform4i64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int64>)>>('glProgramUniform4i64vARB')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void programUniform1ui64ARB(int program, int location, int x) => _glProgramUniform1ui64ARB(program, location, x);
  late final _glProgramUniform1ui64ARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64)>>('glProgramUniform1ui64ARB')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniform2ui64ARB(int program, int location, int x, int y) =>
      _glProgramUniform2ui64ARB(program, location, x, y);
  late final _glProgramUniform2ui64ARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64, Uint64)>>('glProgramUniform2ui64ARB')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void programUniform3ui64ARB(int program, int location, int x, int y, int z) =>
      _glProgramUniform3ui64ARB(program, location, x, y, z);
  late final _glProgramUniform3ui64ARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64, Uint64, Uint64)>>('glProgramUniform3ui64ARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void programUniform4ui64ARB(int program, int location, int x, int y, int z, int w) =>
      _glProgramUniform4ui64ARB(program, location, x, y, z, w);
  late final _glProgramUniform4ui64ARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64, Uint64, Uint64, Uint64)>>(
              'glProgramUniform4ui64ARB')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programUniform1ui64vARB(int program, int location, int count, Pointer<Uint64> value) =>
      _glProgramUniform1ui64vARB(program, location, count, value);
  late final _glProgramUniform1ui64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniform1ui64vARB')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniform2ui64vARB(int program, int location, int count, Pointer<Uint64> value) =>
      _glProgramUniform2ui64vARB(program, location, count, value);
  late final _glProgramUniform2ui64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniform2ui64vARB')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniform3ui64vARB(int program, int location, int count, Pointer<Uint64> value) =>
      _glProgramUniform3ui64vARB(program, location, count, value);
  late final _glProgramUniform3ui64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniform3ui64vARB')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniform4ui64vARB(int program, int location, int count, Pointer<Uint64> value) =>
      _glProgramUniform4ui64vARB(program, location, count, value);
  late final _glProgramUniform4ui64vARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniform4ui64vARB')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void colorTable(int target, int internalformat, int width, int format, int type, Pointer<Void> table) =>
      _glColorTable(target, internalformat, width, format, type, table);
  late final _glColorTable =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glColorTable')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void colorTableParameterfv(int target, int pname, Pointer<Float> params) =>
      _glColorTableParameterfv(target, pname, params);
  late final _glColorTableParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glColorTableParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void colorTableParameteriv(int target, int pname, Pointer<Int> params) =>
      _glColorTableParameteriv(target, pname, params);
  late final _glColorTableParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glColorTableParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void copyColorTable(int target, int internalformat, int x, int y, int width) =>
      _glCopyColorTable(target, internalformat, x, y, width);
  late final _glCopyColorTable =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int)>>('glCopyColorTable')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void getColorTable(int target, int format, int type, Pointer<Void> table) =>
      _glGetColorTable(target, format, type, table);
  late final _glGetColorTable =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>('glGetColorTable')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getColorTableParameterfv(int target, int pname, Pointer<Float> params) =>
      _glGetColorTableParameterfv(target, pname, params);
  late final _glGetColorTableParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetColorTableParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getColorTableParameteriv(int target, int pname, Pointer<Int> params) =>
      _glGetColorTableParameteriv(target, pname, params);
  late final _glGetColorTableParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetColorTableParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void colorSubTable(int target, int start, int count, int format, int type, Pointer<Void> data) =>
      _glColorSubTable(target, start, count, format, type, data);
  late final _glColorSubTable =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glColorSubTable')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void copyColorSubTable(int target, int start, int x, int y, int width) =>
      _glCopyColorSubTable(target, start, x, y, width);
  late final _glCopyColorSubTable =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glCopyColorSubTable')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void convolutionFilter1D(int target, int internalformat, int width, int format, int type, Pointer<Void> image) =>
      _glConvolutionFilter1D(target, internalformat, width, format, type, image);
  late final _glConvolutionFilter1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glConvolutionFilter1D')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void convolutionFilter2D(
          int target, int internalformat, int width, int height, int format, int type, Pointer<Void> image) =>
      _glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
  late final _glConvolutionFilter2D = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glConvolutionFilter2D')
      .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void convolutionParameterf(int target, int pname, double params) => _glConvolutionParameterf(target, pname, params);
  late final _glConvolutionParameterf =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glConvolutionParameterf')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void convolutionParameterfv(int target, int pname, Pointer<Float> params) =>
      _glConvolutionParameterfv(target, pname, params);
  late final _glConvolutionParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glConvolutionParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void convolutionParameteri(int target, int pname, int params) => _glConvolutionParameteri(target, pname, params);
  late final _glConvolutionParameteri =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glConvolutionParameteri')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void convolutionParameteriv(int target, int pname, Pointer<Int> params) =>
      _glConvolutionParameteriv(target, pname, params);
  late final _glConvolutionParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glConvolutionParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void copyConvolutionFilter1D(int target, int internalformat, int x, int y, int width) =>
      _glCopyConvolutionFilter1D(target, internalformat, x, y, width);
  late final _glCopyConvolutionFilter1D =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int)>>('glCopyConvolutionFilter1D')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void copyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height) =>
      _glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
  late final _glCopyConvolutionFilter2D =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int)>>('glCopyConvolutionFilter2D')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void getConvolutionFilter(int target, int format, int type, Pointer<Void> image) =>
      _glGetConvolutionFilter(target, format, type, image);
  late final _glGetConvolutionFilter =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glGetConvolutionFilter')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getConvolutionParameterfv(int target, int pname, Pointer<Float> params) =>
      _glGetConvolutionParameterfv(target, pname, params);
  late final _glGetConvolutionParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetConvolutionParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getConvolutionParameteriv(int target, int pname, Pointer<Int> params) =>
      _glGetConvolutionParameteriv(target, pname, params);
  late final _glGetConvolutionParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetConvolutionParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getSeparableFilter(
          int target, int format, int type, Pointer<Void> row, Pointer<Void> column, Pointer<Void> span) =>
      _glGetSeparableFilter(target, format, type, row, column, span);
  late final _glGetSeparableFilter = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>, Pointer<Void>,
                  Pointer<Void>)>>('glGetSeparableFilter')
      .asFunction<void Function(int, int, int, Pointer<Void>, Pointer<Void>, Pointer<Void>)>(isLeaf: true);

  void separableFilter2D(int target, int internalformat, int width, int height, int format, int type, Pointer<Void> row,
          Pointer<Void> column) =>
      _glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
  late final _glSeparableFilter2D = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>,
                  Pointer<Void>)>>('glSeparableFilter2D')
      .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>, Pointer<Void>)>(isLeaf: true);

  void getHistogram(int target, int reset, int format, int type, Pointer<Void> values) =>
      _glGetHistogram(target, reset, format, type, values);
  late final _glGetHistogram =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glGetHistogram')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getHistogramParameterfv(int target, int pname, Pointer<Float> params) =>
      _glGetHistogramParameterfv(target, pname, params);
  late final _glGetHistogramParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetHistogramParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getHistogramParameteriv(int target, int pname, Pointer<Int> params) =>
      _glGetHistogramParameteriv(target, pname, params);
  late final _glGetHistogramParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetHistogramParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getMinmax(int target, int reset, int format, int type, Pointer<Void> values) =>
      _glGetMinmax(target, reset, format, type, values);
  late final _glGetMinmax =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glGetMinmax')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getMinmaxParameterfv(int target, int pname, Pointer<Float> params) =>
      _glGetMinmaxParameterfv(target, pname, params);
  late final _glGetMinmaxParameterfv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetMinmaxParameterfv')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getMinmaxParameteriv(int target, int pname, Pointer<Int> params) =>
      _glGetMinmaxParameteriv(target, pname, params);
  late final _glGetMinmaxParameteriv =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetMinmaxParameteriv')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void histogram(int target, int width, int internalformat, int sink) =>
      _glHistogram(target, width, internalformat, sink);
  late final _glHistogram =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedChar)>>('glHistogram')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void minmax(int target, int internalformat, int sink) => _glMinmax(target, internalformat, sink);
  late final _glMinmax = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedChar)>>('glMinmax')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void resetHistogram(int target) => _glResetHistogram(target);
  late final _glResetHistogram = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glResetHistogram')
      .asFunction<void Function(int)>(isLeaf: true);

  void resetMinmax(int target) => _glResetMinmax(target);
  late final _glResetMinmax =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glResetMinmax').asFunction<void Function(int)>(isLeaf: true);

  void multiDrawArraysIndirectCountARB(int mode, Pointer<Void> indirect, int drawcount, int maxdrawcount, int stride) =>
      _glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
  late final _glMultiDrawArraysIndirectCountARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>, Long, Int, Int)>>(
              'glMultiDrawArraysIndirectCountARB')
          .asFunction<void Function(int, Pointer<Void>, int, int, int)>(isLeaf: true);

  void multiDrawElementsIndirectCountARB(
          int mode, int type, Pointer<Void> indirect, int drawcount, int maxdrawcount, int stride) =>
      _glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
  late final _glMultiDrawElementsIndirectCountARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>, Long, Int, Int)>>(
              'glMultiDrawElementsIndirectCountARB')
          .asFunction<void Function(int, int, Pointer<Void>, int, int, int)>(isLeaf: true);

  void vertexAttribDivisorARB(int index, int divisor) => _glVertexAttribDivisorARB(index, divisor);
  late final _glVertexAttribDivisorARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glVertexAttribDivisorARB')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void currentPaletteMatrixARB(int index) => _glCurrentPaletteMatrixARB(index);
  late final _glCurrentPaletteMatrixARB = _lookup<NativeFunction<Void Function(Int)>>('glCurrentPaletteMatrixARB')
      .asFunction<void Function(int)>(isLeaf: true);

  void matrixIndexubvARB(int size, Pointer<UnsignedChar> indices) => _glMatrixIndexubvARB(size, indices);
  late final _glMatrixIndexubvARB =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedChar>)>>('glMatrixIndexubvARB')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void matrixIndexusvARB(int size, Pointer<UnsignedShort> indices) => _glMatrixIndexusvARB(size, indices);
  late final _glMatrixIndexusvARB =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedShort>)>>('glMatrixIndexusvARB')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void matrixIndexuivARB(int size, Pointer<UnsignedInt> indices) => _glMatrixIndexuivARB(size, indices);
  late final _glMatrixIndexuivARB =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glMatrixIndexuivARB')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void matrixIndexPointerARB(int size, int type, int stride, Pointer<Void> pointer) =>
      _glMatrixIndexPointerARB(size, type, stride, pointer);
  late final _glMatrixIndexPointerARB =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Void>)>>('glMatrixIndexPointerARB')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void sampleCoverageARB(double value, int invert) => _glSampleCoverageARB(value, invert);
  late final _glSampleCoverageARB = _lookup<NativeFunction<Void Function(Float, UnsignedChar)>>('glSampleCoverageARB')
      .asFunction<void Function(double, int)>(isLeaf: true);

  void activeTextureARB(int texture) => _glActiveTextureARB(texture);
  late final _glActiveTextureARB = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glActiveTextureARB')
      .asFunction<void Function(int)>(isLeaf: true);

  void clientActiveTextureARB(int texture) => _glClientActiveTextureARB(texture);
  late final _glClientActiveTextureARB = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glClientActiveTextureARB')
      .asFunction<void Function(int)>(isLeaf: true);

  void multiTexCoord1dARB(int target, double s) => _glMultiTexCoord1dARB(target, s);
  late final _glMultiTexCoord1dARB = _lookup<NativeFunction<Void Function(UnsignedInt, Double)>>('glMultiTexCoord1dARB')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void multiTexCoord1dvARB(int target, Pointer<Double> v) => _glMultiTexCoord1dvARB(target, v);
  late final _glMultiTexCoord1dvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMultiTexCoord1dvARB')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void multiTexCoord1fARB(int target, double s) => _glMultiTexCoord1fARB(target, s);
  late final _glMultiTexCoord1fARB = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glMultiTexCoord1fARB')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void multiTexCoord1fvARB(int target, Pointer<Float> v) => _glMultiTexCoord1fvARB(target, v);
  late final _glMultiTexCoord1fvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMultiTexCoord1fvARB')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void multiTexCoord1iARB(int target, int s) => _glMultiTexCoord1iARB(target, s);
  late final _glMultiTexCoord1iARB = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glMultiTexCoord1iARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void multiTexCoord1ivARB(int target, Pointer<Int> v) => _glMultiTexCoord1ivARB(target, v);
  late final _glMultiTexCoord1ivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glMultiTexCoord1ivARB')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void multiTexCoord1sARB(int target, int s) => _glMultiTexCoord1sARB(target, s);
  late final _glMultiTexCoord1sARB = _lookup<NativeFunction<Void Function(UnsignedInt, Short)>>('glMultiTexCoord1sARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void multiTexCoord1svARB(int target, Pointer<Short> v) => _glMultiTexCoord1svARB(target, v);
  late final _glMultiTexCoord1svARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glMultiTexCoord1svARB')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void multiTexCoord2dARB(int target, double s, double t) => _glMultiTexCoord2dARB(target, s, t);
  late final _glMultiTexCoord2dARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double)>>('glMultiTexCoord2dARB')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void multiTexCoord2dvARB(int target, Pointer<Double> v) => _glMultiTexCoord2dvARB(target, v);
  late final _glMultiTexCoord2dvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMultiTexCoord2dvARB')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void multiTexCoord2fARB(int target, double s, double t) => _glMultiTexCoord2fARB(target, s, t);
  late final _glMultiTexCoord2fARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float)>>('glMultiTexCoord2fARB')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void multiTexCoord2fvARB(int target, Pointer<Float> v) => _glMultiTexCoord2fvARB(target, v);
  late final _glMultiTexCoord2fvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMultiTexCoord2fvARB')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void multiTexCoord2iARB(int target, int s, int t) => _glMultiTexCoord2iARB(target, s, t);
  late final _glMultiTexCoord2iARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glMultiTexCoord2iARB')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoord2ivARB(int target, Pointer<Int> v) => _glMultiTexCoord2ivARB(target, v);
  late final _glMultiTexCoord2ivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glMultiTexCoord2ivARB')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void multiTexCoord2sARB(int target, int s, int t) => _glMultiTexCoord2sARB(target, s, t);
  late final _glMultiTexCoord2sARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short)>>('glMultiTexCoord2sARB')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoord2svARB(int target, Pointer<Short> v) => _glMultiTexCoord2svARB(target, v);
  late final _glMultiTexCoord2svARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glMultiTexCoord2svARB')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void multiTexCoord3dARB(int target, double s, double t, double r) => _glMultiTexCoord3dARB(target, s, t, r);
  late final _glMultiTexCoord3dARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glMultiTexCoord3dARB')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void multiTexCoord3dvARB(int target, Pointer<Double> v) => _glMultiTexCoord3dvARB(target, v);
  late final _glMultiTexCoord3dvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMultiTexCoord3dvARB')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void multiTexCoord3fARB(int target, double s, double t, double r) => _glMultiTexCoord3fARB(target, s, t, r);
  late final _glMultiTexCoord3fARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float)>>('glMultiTexCoord3fARB')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void multiTexCoord3fvARB(int target, Pointer<Float> v) => _glMultiTexCoord3fvARB(target, v);
  late final _glMultiTexCoord3fvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMultiTexCoord3fvARB')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void multiTexCoord3iARB(int target, int s, int t, int r) => _glMultiTexCoord3iARB(target, s, t, r);
  late final _glMultiTexCoord3iARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glMultiTexCoord3iARB')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexCoord3ivARB(int target, Pointer<Int> v) => _glMultiTexCoord3ivARB(target, v);
  late final _glMultiTexCoord3ivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glMultiTexCoord3ivARB')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void multiTexCoord3sARB(int target, int s, int t, int r) => _glMultiTexCoord3sARB(target, s, t, r);
  late final _glMultiTexCoord3sARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short)>>('glMultiTexCoord3sARB')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexCoord3svARB(int target, Pointer<Short> v) => _glMultiTexCoord3svARB(target, v);
  late final _glMultiTexCoord3svARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glMultiTexCoord3svARB')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void multiTexCoord4dARB(int target, double s, double t, double r, double q) =>
      _glMultiTexCoord4dARB(target, s, t, r, q);
  late final _glMultiTexCoord4dARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double)>>('glMultiTexCoord4dARB')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void multiTexCoord4dvARB(int target, Pointer<Double> v) => _glMultiTexCoord4dvARB(target, v);
  late final _glMultiTexCoord4dvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMultiTexCoord4dvARB')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void multiTexCoord4fARB(int target, double s, double t, double r, double q) =>
      _glMultiTexCoord4fARB(target, s, t, r, q);
  late final _glMultiTexCoord4fARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float)>>('glMultiTexCoord4fARB')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void multiTexCoord4fvARB(int target, Pointer<Float> v) => _glMultiTexCoord4fvARB(target, v);
  late final _glMultiTexCoord4fvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMultiTexCoord4fvARB')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void multiTexCoord4iARB(int target, int s, int t, int r, int q) => _glMultiTexCoord4iARB(target, s, t, r, q);
  late final _glMultiTexCoord4iARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glMultiTexCoord4iARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void multiTexCoord4ivARB(int target, Pointer<Int> v) => _glMultiTexCoord4ivARB(target, v);
  late final _glMultiTexCoord4ivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glMultiTexCoord4ivARB')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void multiTexCoord4sARB(int target, int s, int t, int r, int q) => _glMultiTexCoord4sARB(target, s, t, r, q);
  late final _glMultiTexCoord4sARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short, Short)>>('glMultiTexCoord4sARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void multiTexCoord4svARB(int target, Pointer<Short> v) => _glMultiTexCoord4svARB(target, v);
  late final _glMultiTexCoord4svARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glMultiTexCoord4svARB')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void genQueriesARB(int n, Pointer<UnsignedInt> ids) => _glGenQueriesARB(n, ids);
  late final _glGenQueriesARB = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenQueriesARB')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deleteQueriesARB(int n, Pointer<UnsignedInt> ids) => _glDeleteQueriesARB(n, ids);
  late final _glDeleteQueriesARB =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteQueriesARB')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isQueryARB(int id) => _glIsQueryARB(id);
  late final _glIsQueryARB = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsQueryARB')
      .asFunction<int Function(int)>(isLeaf: true);

  void beginQueryARB(int target, int id) => _glBeginQueryARB(target, id);
  late final _glBeginQueryARB = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBeginQueryARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void endQueryARB(int target) => _glEndQueryARB(target);
  late final _glEndQueryARB =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glEndQueryARB').asFunction<void Function(int)>(isLeaf: true);

  void getQueryivARB(int target, int pname, Pointer<Int> params) => _glGetQueryivARB(target, pname, params);
  late final _glGetQueryivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetQueryivARB')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getQueryObjectivARB(int id, int pname, Pointer<Int> params) => _glGetQueryObjectivARB(id, pname, params);
  late final _glGetQueryObjectivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetQueryObjectivARB')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getQueryObjectuivARB(int id, int pname, Pointer<UnsignedInt> params) =>
      _glGetQueryObjectuivARB(id, pname, params);
  late final _glGetQueryObjectuivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glGetQueryObjectuivARB')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void maxShaderCompilerThreadsARB(int count) => _glMaxShaderCompilerThreadsARB(count);
  late final _glMaxShaderCompilerThreadsARB =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMaxShaderCompilerThreadsARB')
          .asFunction<void Function(int)>(isLeaf: true);

  void pointParameterfARB(int pname, double param) => _glPointParameterfARB(pname, param);
  late final _glPointParameterfARB = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glPointParameterfARB')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void pointParameterfvARB(int pname, Pointer<Float> params) => _glPointParameterfvARB(pname, params);
  late final _glPointParameterfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glPointParameterfvARB')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  int getGraphicsResetStatusARB() => _glGetGraphicsResetStatusARB();
  late final _glGetGraphicsResetStatusARB =
      _lookup<NativeFunction<UnsignedInt Function()>>('glGetGraphicsResetStatusARB')
          .asFunction<int Function()>(isLeaf: true);

  void getnTexImageARB(int target, int level, int format, int type, int bufSize, Pointer<Void> img) =>
      _glGetnTexImageARB(target, level, format, type, bufSize, img);
  late final _glGetnTexImageARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetnTexImageARB')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void readnPixelsARB(int x, int y, int width, int height, int format, int type, int bufSize, Pointer<Void> data) =>
      _glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
  late final _glReadnPixelsARB =
      _lookup<NativeFunction<Void Function(Int, Int, Int, Int, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glReadnPixelsARB')
          .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnCompressedTexImageARB(int target, int lod, int bufSize, Pointer<Void> img) =>
      _glGetnCompressedTexImageARB(target, lod, bufSize, img);
  late final _glGetnCompressedTexImageARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Void>)>>('glGetnCompressedTexImageARB')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnUniformfvARB(int program, int location, int bufSize, Pointer<Float> params) =>
      _glGetnUniformfvARB(program, location, bufSize, params);
  late final _glGetnUniformfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Float>)>>('glGetnUniformfvARB')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getnUniformivARB(int program, int location, int bufSize, Pointer<Int> params) =>
      _glGetnUniformivARB(program, location, bufSize, params);
  late final _glGetnUniformivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int>)>>('glGetnUniformivARB')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getnUniformuivARB(int program, int location, int bufSize, Pointer<UnsignedInt> params) =>
      _glGetnUniformuivARB(program, location, bufSize, params);
  late final _glGetnUniformuivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>('glGetnUniformuivARB')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getnUniformdvARB(int program, int location, int bufSize, Pointer<Double> params) =>
      _glGetnUniformdvARB(program, location, bufSize, params);
  late final _glGetnUniformdvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Double>)>>('glGetnUniformdvARB')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void getnMapdvARB(int target, int query, int bufSize, Pointer<Double> v) =>
      _glGetnMapdvARB(target, query, bufSize, v);
  late final _glGetnMapdvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Double>)>>('glGetnMapdvARB')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void getnMapfvARB(int target, int query, int bufSize, Pointer<Float> v) => _glGetnMapfvARB(target, query, bufSize, v);
  late final _glGetnMapfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>('glGetnMapfvARB')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getnMapivARB(int target, int query, int bufSize, Pointer<Int> v) => _glGetnMapivARB(target, query, bufSize, v);
  late final _glGetnMapivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>)>>('glGetnMapivARB')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getnPixelMapfvARB(int map, int bufSize, Pointer<Float> values) => _glGetnPixelMapfvARB(map, bufSize, values);
  late final _glGetnPixelMapfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glGetnPixelMapfvARB')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getnPixelMapuivARB(int map, int bufSize, Pointer<UnsignedInt> values) =>
      _glGetnPixelMapuivARB(map, bufSize, values);
  late final _glGetnPixelMapuivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glGetnPixelMapuivARB')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getnPixelMapusvARB(int map, int bufSize, Pointer<UnsignedShort> values) =>
      _glGetnPixelMapusvARB(map, bufSize, values);
  late final _glGetnPixelMapusvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedShort>)>>('glGetnPixelMapusvARB')
          .asFunction<void Function(int, int, Pointer<UnsignedShort>)>(isLeaf: true);

  void getnPolygonStippleARB(int bufSize, Pointer<UnsignedChar> pattern) => _glGetnPolygonStippleARB(bufSize, pattern);
  late final _glGetnPolygonStippleARB =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedChar>)>>('glGetnPolygonStippleARB')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void getnColorTableARB(int target, int format, int type, int bufSize, Pointer<Void> table) =>
      _glGetnColorTableARB(target, format, type, bufSize, table);
  late final _glGetnColorTableARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetnColorTableARB')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnConvolutionFilterARB(int target, int format, int type, int bufSize, Pointer<Void> image) =>
      _glGetnConvolutionFilterARB(target, format, type, bufSize, image);
  late final _glGetnConvolutionFilterARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetnConvolutionFilterARB')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnSeparableFilterARB(int target, int format, int type, int rowBufSize, Pointer<Void> row, int columnBufSize,
          Pointer<Void> column, Pointer<Void> span) =>
      _glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
  late final _glGetnSeparableFilterARB = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Void>, Int, Pointer<Void>,
                  Pointer<Void>)>>('glGetnSeparableFilterARB')
      .asFunction<void Function(int, int, int, int, Pointer<Void>, int, Pointer<Void>, Pointer<Void>)>(isLeaf: true);

  void getnHistogramARB(int target, int reset, int format, int type, int bufSize, Pointer<Void> values) =>
      _glGetnHistogramARB(target, reset, format, type, bufSize, values);
  late final _glGetnHistogramARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetnHistogramARB')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getnMinmaxARB(int target, int reset, int format, int type, int bufSize, Pointer<Void> values) =>
      _glGetnMinmaxARB(target, reset, format, type, bufSize, values);
  late final _glGetnMinmaxARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetnMinmaxARB')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void framebufferSampleLocationsfvARB(int target, int start, int count, Pointer<Float> v) =>
      _glFramebufferSampleLocationsfvARB(target, start, count, v);
  late final _glFramebufferSampleLocationsfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glFramebufferSampleLocationsfvARB')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void namedFramebufferSampleLocationsfvARB(int framebuffer, int start, int count, Pointer<Float> v) =>
      _glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v);
  late final _glNamedFramebufferSampleLocationsfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glNamedFramebufferSampleLocationsfvARB')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void evaluateDepthValuesARB() => _glEvaluateDepthValuesARB();
  late final _glEvaluateDepthValuesARB =
      _lookup<NativeFunction<Void Function()>>('glEvaluateDepthValuesARB').asFunction<void Function()>(isLeaf: true);

  void minSampleShadingARB(double value) => _glMinSampleShadingARB(value);
  late final _glMinSampleShadingARB = _lookup<NativeFunction<Void Function(Float)>>('glMinSampleShadingARB')
      .asFunction<void Function(double)>(isLeaf: true);

  void deleteObjectARB(int obj) => _glDeleteObjectARB(obj);
  late final _glDeleteObjectARB = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDeleteObjectARB')
      .asFunction<void Function(int)>(isLeaf: true);

  int getHandleARB(int pname) => _glGetHandleARB(pname);
  late final _glGetHandleARB = _lookup<NativeFunction<UnsignedInt Function(UnsignedInt)>>('glGetHandleARB')
      .asFunction<int Function(int)>(isLeaf: true);

  void detachObjectARB(int containerObj, int attachedObj) => _glDetachObjectARB(containerObj, attachedObj);
  late final _glDetachObjectARB = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDetachObjectARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  int createShaderObjectARB(int shaderType) => _glCreateShaderObjectARB(shaderType);
  late final _glCreateShaderObjectARB =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt)>>('glCreateShaderObjectARB')
          .asFunction<int Function(int)>(isLeaf: true);

  void shaderSourceARB(int shaderObj, int count, Pointer<Pointer<Char>> string, Pointer<Int> length) =>
      _glShaderSourceARB(shaderObj, count, string, length);
  late final _glShaderSourceARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Pointer<Char>>, Pointer<Int>)>>(
              'glShaderSourceARB')
          .asFunction<void Function(int, int, Pointer<Pointer<Char>>, Pointer<Int>)>(isLeaf: true);

  void compileShaderARB(int shaderObj) => _glCompileShaderARB(shaderObj);
  late final _glCompileShaderARB = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glCompileShaderARB')
      .asFunction<void Function(int)>(isLeaf: true);

  int createProgramObjectARB() => _glCreateProgramObjectARB();
  late final _glCreateProgramObjectARB = _lookup<NativeFunction<UnsignedInt Function()>>('glCreateProgramObjectARB')
      .asFunction<int Function()>(isLeaf: true);

  void attachObjectARB(int containerObj, int obj) => _glAttachObjectARB(containerObj, obj);
  late final _glAttachObjectARB = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glAttachObjectARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void linkProgramARB(int programObj) => _glLinkProgramARB(programObj);
  late final _glLinkProgramARB = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glLinkProgramARB')
      .asFunction<void Function(int)>(isLeaf: true);

  void useProgramObjectARB(int programObj) => _glUseProgramObjectARB(programObj);
  late final _glUseProgramObjectARB = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glUseProgramObjectARB')
      .asFunction<void Function(int)>(isLeaf: true);

  void validateProgramARB(int programObj) => _glValidateProgramARB(programObj);
  late final _glValidateProgramARB = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glValidateProgramARB')
      .asFunction<void Function(int)>(isLeaf: true);

  void uniform1fARB(int location, double v0) => _glUniform1fARB(location, v0);
  late final _glUniform1fARB = _lookup<NativeFunction<Void Function(Int, Float)>>('glUniform1fARB')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void uniform2fARB(int location, double v0, double v1) => _glUniform2fARB(location, v0, v1);
  late final _glUniform2fARB = _lookup<NativeFunction<Void Function(Int, Float, Float)>>('glUniform2fARB')
      .asFunction<void Function(int, double, double)>(isLeaf: true);

  void uniform3fARB(int location, double v0, double v1, double v2) => _glUniform3fARB(location, v0, v1, v2);
  late final _glUniform3fARB = _lookup<NativeFunction<Void Function(Int, Float, Float, Float)>>('glUniform3fARB')
      .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void uniform4fARB(int location, double v0, double v1, double v2, double v3) =>
      _glUniform4fARB(location, v0, v1, v2, v3);
  late final _glUniform4fARB = _lookup<NativeFunction<Void Function(Int, Float, Float, Float, Float)>>('glUniform4fARB')
      .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void uniform1iARB(int location, int v0) => _glUniform1iARB(location, v0);
  late final _glUniform1iARB = _lookup<NativeFunction<Void Function(Int, Int)>>('glUniform1iARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void uniform2iARB(int location, int v0, int v1) => _glUniform2iARB(location, v0, v1);
  late final _glUniform2iARB = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glUniform2iARB')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void uniform3iARB(int location, int v0, int v1, int v2) => _glUniform3iARB(location, v0, v1, v2);
  late final _glUniform3iARB = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glUniform3iARB')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void uniform4iARB(int location, int v0, int v1, int v2, int v3) => _glUniform4iARB(location, v0, v1, v2, v3);
  late final _glUniform4iARB = _lookup<NativeFunction<Void Function(Int, Int, Int, Int, Int)>>('glUniform4iARB')
      .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void uniform1fvARB(int location, int count, Pointer<Float> value) => _glUniform1fvARB(location, count, value);
  late final _glUniform1fvARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Float>)>>('glUniform1fvARB')
      .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void uniform2fvARB(int location, int count, Pointer<Float> value) => _glUniform2fvARB(location, count, value);
  late final _glUniform2fvARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Float>)>>('glUniform2fvARB')
      .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void uniform3fvARB(int location, int count, Pointer<Float> value) => _glUniform3fvARB(location, count, value);
  late final _glUniform3fvARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Float>)>>('glUniform3fvARB')
      .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void uniform4fvARB(int location, int count, Pointer<Float> value) => _glUniform4fvARB(location, count, value);
  late final _glUniform4fvARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Float>)>>('glUniform4fvARB')
      .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void uniform1ivARB(int location, int count, Pointer<Int> value) => _glUniform1ivARB(location, count, value);
  late final _glUniform1ivARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int>)>>('glUniform1ivARB')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void uniform2ivARB(int location, int count, Pointer<Int> value) => _glUniform2ivARB(location, count, value);
  late final _glUniform2ivARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int>)>>('glUniform2ivARB')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void uniform3ivARB(int location, int count, Pointer<Int> value) => _glUniform3ivARB(location, count, value);
  late final _glUniform3ivARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int>)>>('glUniform3ivARB')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void uniform4ivARB(int location, int count, Pointer<Int> value) => _glUniform4ivARB(location, count, value);
  late final _glUniform4ivARB = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int>)>>('glUniform4ivARB')
      .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void uniformMatrix2fvARB(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix2fvARB(location, count, transpose, value);
  late final _glUniformMatrix2fvARB =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix2fvARB')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void uniformMatrix3fvARB(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix3fvARB(location, count, transpose, value);
  late final _glUniformMatrix3fvARB =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix3fvARB')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void uniformMatrix4fvARB(int location, int count, int transpose, Pointer<Float> value) =>
      _glUniformMatrix4fvARB(location, count, transpose, value);
  late final _glUniformMatrix4fvARB =
      _lookup<NativeFunction<Void Function(Int, Int, UnsignedChar, Pointer<Float>)>>('glUniformMatrix4fvARB')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getObjectParameterfvARB(int obj, int pname, Pointer<Float> params) =>
      _glGetObjectParameterfvARB(obj, pname, params);
  late final _glGetObjectParameterfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetObjectParameterfvARB')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getObjectParameterivARB(int obj, int pname, Pointer<Int> params) =>
      _glGetObjectParameterivARB(obj, pname, params);
  late final _glGetObjectParameterivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetObjectParameterivARB')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getInfoLogARB(int obj, int maxLength, Pointer<Int> length, Pointer<Char> infoLog) =>
      _glGetInfoLogARB(obj, maxLength, length, infoLog);
  late final _glGetInfoLogARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>('glGetInfoLogARB')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void getAttachedObjectsARB(int containerObj, int maxCount, Pointer<Int> count, Pointer<UnsignedInt> obj) =>
      _glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
  late final _glGetAttachedObjectsARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, Pointer<UnsignedInt>)>>(
              'glGetAttachedObjectsARB')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<UnsignedInt>)>(isLeaf: true);

  int getUniformLocationARB(int programObj, Pointer<Char> name) => _glGetUniformLocationARB(programObj, name);
  late final _glGetUniformLocationARB =
      _lookup<NativeFunction<Int Function(UnsignedInt, Pointer<Char>)>>('glGetUniformLocationARB')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void getActiveUniformARB(int programObj, int index, int maxLength, Pointer<Int> length, Pointer<Int> size,
          Pointer<UnsignedInt> type, Pointer<Char> name) =>
      _glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
  late final _glGetActiveUniformARB = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>,
                  Pointer<Char>)>>('glGetActiveUniformARB')
      .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<Char>)>(
          isLeaf: true);

  void getUniformfvARB(int programObj, int location, Pointer<Float> params) =>
      _glGetUniformfvARB(programObj, location, params);
  late final _glGetUniformfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glGetUniformfvARB')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getUniformivARB(int programObj, int location, Pointer<Int> params) =>
      _glGetUniformivARB(programObj, location, params);
  late final _glGetUniformivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>)>>('glGetUniformivARB')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getShaderSourceARB(int obj, int maxLength, Pointer<Int> length, Pointer<Char> source) =>
      _glGetShaderSourceARB(obj, maxLength, length, source);
  late final _glGetShaderSourceARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>('glGetShaderSourceARB')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void namedStringARB(int type, int namelen, Pointer<Char> name, int stringlen, Pointer<Char> string) =>
      _glNamedStringARB(type, namelen, name, stringlen, string);
  late final _glNamedStringARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Char>, Int, Pointer<Char>)>>('glNamedStringARB')
          .asFunction<void Function(int, int, Pointer<Char>, int, Pointer<Char>)>(isLeaf: true);

  void deleteNamedStringARB(int namelen, Pointer<Char> name) => _glDeleteNamedStringARB(namelen, name);
  late final _glDeleteNamedStringARB =
      _lookup<NativeFunction<Void Function(Int, Pointer<Char>)>>('glDeleteNamedStringARB')
          .asFunction<void Function(int, Pointer<Char>)>(isLeaf: true);

  void compileShaderIncludeARB(int shader, int count, Pointer<Pointer<Char>> path, Pointer<Int> length) =>
      _glCompileShaderIncludeARB(shader, count, path, length);
  late final _glCompileShaderIncludeARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Pointer<Char>>, Pointer<Int>)>>(
              'glCompileShaderIncludeARB')
          .asFunction<void Function(int, int, Pointer<Pointer<Char>>, Pointer<Int>)>(isLeaf: true);

  int isNamedStringARB(int namelen, Pointer<Char> name) => _glIsNamedStringARB(namelen, name);
  late final _glIsNamedStringARB =
      _lookup<NativeFunction<UnsignedChar Function(Int, Pointer<Char>)>>('glIsNamedStringARB')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void getNamedStringARB(int namelen, Pointer<Char> name, int bufSize, Pointer<Int> stringlen, Pointer<Char> string) =>
      _glGetNamedStringARB(namelen, name, bufSize, stringlen, string);
  late final _glGetNamedStringARB =
      _lookup<NativeFunction<Void Function(Int, Pointer<Char>, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetNamedStringARB')
          .asFunction<void Function(int, Pointer<Char>, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void getNamedStringivARB(int namelen, Pointer<Char> name, int pname, Pointer<Int> params) =>
      _glGetNamedStringivARB(namelen, name, pname, params);
  late final _glGetNamedStringivARB =
      _lookup<NativeFunction<Void Function(Int, Pointer<Char>, UnsignedInt, Pointer<Int>)>>('glGetNamedStringivARB')
          .asFunction<void Function(int, Pointer<Char>, int, Pointer<Int>)>(isLeaf: true);

  void bufferPageCommitmentARB(int target, int offset, int size, int commit) =>
      _glBufferPageCommitmentARB(target, offset, size, commit);
  late final _glBufferPageCommitmentARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, UnsignedChar)>>('glBufferPageCommitmentARB')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void namedBufferPageCommitmentEXT(int buffer, int offset, int size, int commit) =>
      _glNamedBufferPageCommitmentEXT(buffer, offset, size, commit);
  late final _glNamedBufferPageCommitmentEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, UnsignedChar)>>('glNamedBufferPageCommitmentEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void namedBufferPageCommitmentARB(int buffer, int offset, int size, int commit) =>
      _glNamedBufferPageCommitmentARB(buffer, offset, size, commit);
  late final _glNamedBufferPageCommitmentARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, UnsignedChar)>>('glNamedBufferPageCommitmentARB')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texPageCommitmentARB(
          int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int commit) =>
      _glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  late final _glTexPageCommitmentARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedChar)>>(
              'glTexPageCommitmentARB')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void texBufferARB(int target, int internalformat, int buffer) => _glTexBufferARB(target, internalformat, buffer);
  late final _glTexBufferARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glTexBufferARB')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void compressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border,
          int imageSize, Pointer<Void> data) =>
      _glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
  late final _glCompressedTexImage3DARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Int, Pointer<Void>)>>(
              'glCompressedTexImage3DARB')
          .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border,
          int imageSize, Pointer<Void> data) =>
      _glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
  late final _glCompressedTexImage2DARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Pointer<Void>)>>(
              'glCompressedTexImage2DARB')
          .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTexImage1DARB(
          int target, int level, int internalformat, int width, int border, int imageSize, Pointer<Void> data) =>
      _glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
  late final _glCompressedTexImage1DARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Pointer<Void>)>>(
              'glCompressedTexImage1DARB')
          .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height,
          int depth, int format, int imageSize, Pointer<Void> data) =>
      _glCompressedTexSubImage3DARB(
          target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  late final _glCompressedTexSubImage3DARB = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, Int,
                  Pointer<Void>)>>('glCompressedTexSubImage3DARB')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format,
          int imageSize, Pointer<Void> data) =>
      _glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  late final _glCompressedTexSubImage2DARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glCompressedTexSubImage2DARB')
          .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTexSubImage1DARB(
          int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void> data) =>
      _glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
  late final _glCompressedTexSubImage1DARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glCompressedTexSubImage1DARB')
          .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getCompressedTexImageARB(int target, int level, Pointer<Void> img) =>
      _glGetCompressedTexImageARB(target, level, img);
  late final _glGetCompressedTexImageARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glGetCompressedTexImageARB')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void loadTransposeMatrixfARB(Pointer<Float> m) => _glLoadTransposeMatrixfARB(m);
  late final _glLoadTransposeMatrixfARB =
      _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glLoadTransposeMatrixfARB')
          .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void loadTransposeMatrixdARB(Pointer<Double> m) => _glLoadTransposeMatrixdARB(m);
  late final _glLoadTransposeMatrixdARB =
      _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glLoadTransposeMatrixdARB')
          .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void multTransposeMatrixfARB(Pointer<Float> m) => _glMultTransposeMatrixfARB(m);
  late final _glMultTransposeMatrixfARB =
      _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glMultTransposeMatrixfARB')
          .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void multTransposeMatrixdARB(Pointer<Double> m) => _glMultTransposeMatrixdARB(m);
  late final _glMultTransposeMatrixdARB =
      _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glMultTransposeMatrixdARB')
          .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void weightbvARB(int size, Pointer<SignedChar> weights) => _glWeightbvARB(size, weights);
  late final _glWeightbvARB = _lookup<NativeFunction<Void Function(Int, Pointer<SignedChar>)>>('glWeightbvARB')
      .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void weightsvARB(int size, Pointer<Short> weights) => _glWeightsvARB(size, weights);
  late final _glWeightsvARB = _lookup<NativeFunction<Void Function(Int, Pointer<Short>)>>('glWeightsvARB')
      .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void weightivARB(int size, Pointer<Int> weights) => _glWeightivARB(size, weights);
  late final _glWeightivARB = _lookup<NativeFunction<Void Function(Int, Pointer<Int>)>>('glWeightivARB')
      .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void weightfvARB(int size, Pointer<Float> weights) => _glWeightfvARB(size, weights);
  late final _glWeightfvARB = _lookup<NativeFunction<Void Function(Int, Pointer<Float>)>>('glWeightfvARB')
      .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void weightdvARB(int size, Pointer<Double> weights) => _glWeightdvARB(size, weights);
  late final _glWeightdvARB = _lookup<NativeFunction<Void Function(Int, Pointer<Double>)>>('glWeightdvARB')
      .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void weightubvARB(int size, Pointer<UnsignedChar> weights) => _glWeightubvARB(size, weights);
  late final _glWeightubvARB = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedChar>)>>('glWeightubvARB')
      .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void weightusvARB(int size, Pointer<UnsignedShort> weights) => _glWeightusvARB(size, weights);
  late final _glWeightusvARB = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedShort>)>>('glWeightusvARB')
      .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void weightuivARB(int size, Pointer<UnsignedInt> weights) => _glWeightuivARB(size, weights);
  late final _glWeightuivARB = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glWeightuivARB')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void weightPointerARB(int size, int type, int stride, Pointer<Void> pointer) =>
      _glWeightPointerARB(size, type, stride, pointer);
  late final _glWeightPointerARB =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Void>)>>('glWeightPointerARB')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void vertexBlendARB(int count) => _glVertexBlendARB(count);
  late final _glVertexBlendARB =
      _lookup<NativeFunction<Void Function(Int)>>('glVertexBlendARB').asFunction<void Function(int)>(isLeaf: true);

  void bindBufferARB(int target, int buffer) => _glBindBufferARB(target, buffer);
  late final _glBindBufferARB = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindBufferARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteBuffersARB(int n, Pointer<UnsignedInt> buffers) => _glDeleteBuffersARB(n, buffers);
  late final _glDeleteBuffersARB =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteBuffersARB')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genBuffersARB(int n, Pointer<UnsignedInt> buffers) => _glGenBuffersARB(n, buffers);
  late final _glGenBuffersARB = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenBuffersARB')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isBufferARB(int buffer) => _glIsBufferARB(buffer);
  late final _glIsBufferARB = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsBufferARB')
      .asFunction<int Function(int)>(isLeaf: true);

  void bufferDataARB(int target, int size, Pointer<Void> data, int usage) =>
      _glBufferDataARB(target, size, data, usage);
  late final _glBufferDataARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Pointer<Void>, UnsignedInt)>>('glBufferDataARB')
          .asFunction<void Function(int, int, Pointer<Void>, int)>(isLeaf: true);

  void bufferSubDataARB(int target, int offset, int size, Pointer<Void> data) =>
      _glBufferSubDataARB(target, offset, size, data);
  late final _glBufferSubDataARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, Pointer<Void>)>>('glBufferSubDataARB')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getBufferSubDataARB(int target, int offset, int size, Pointer<Void> data) =>
      _glGetBufferSubDataARB(target, offset, size, data);
  late final _glGetBufferSubDataARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, Pointer<Void>)>>('glGetBufferSubDataARB')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  Pointer<Void> mapBufferARB(int target, int access) => _glMapBufferARB(target, access);
  late final _glMapBufferARB =
      _lookup<NativeFunction<Pointer<Void> Function(UnsignedInt, UnsignedInt)>>('glMapBufferARB')
          .asFunction<Pointer<Void> Function(int, int)>(isLeaf: true);

  int unmapBufferARB(int target) => _glUnmapBufferARB(target);
  late final _glUnmapBufferARB = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glUnmapBufferARB')
      .asFunction<int Function(int)>(isLeaf: true);

  void getBufferParameterivARB(int target, int pname, Pointer<Int> params) =>
      _glGetBufferParameterivARB(target, pname, params);
  late final _glGetBufferParameterivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetBufferParameterivARB')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getBufferPointervARB(int target, int pname, Pointer<Pointer<Void>> params) =>
      _glGetBufferPointervARB(target, pname, params);
  late final _glGetBufferPointervARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>('glGetBufferPointervARB')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void vertexAttrib1dARB(int index, double x) => _glVertexAttrib1dARB(index, x);
  late final _glVertexAttrib1dARB = _lookup<NativeFunction<Void Function(UnsignedInt, Double)>>('glVertexAttrib1dARB')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void vertexAttrib1dvARB(int index, Pointer<Double> v) => _glVertexAttrib1dvARB(index, v);
  late final _glVertexAttrib1dvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib1dvARB')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib1fARB(int index, double x) => _glVertexAttrib1fARB(index, x);
  late final _glVertexAttrib1fARB = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glVertexAttrib1fARB')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void vertexAttrib1fvARB(int index, Pointer<Float> v) => _glVertexAttrib1fvARB(index, v);
  late final _glVertexAttrib1fvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib1fvARB')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib1sARB(int index, int x) => _glVertexAttrib1sARB(index, x);
  late final _glVertexAttrib1sARB = _lookup<NativeFunction<Void Function(UnsignedInt, Short)>>('glVertexAttrib1sARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttrib1svARB(int index, Pointer<Short> v) => _glVertexAttrib1svARB(index, v);
  late final _glVertexAttrib1svARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib1svARB')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib2dARB(int index, double x, double y) => _glVertexAttrib2dARB(index, x, y);
  late final _glVertexAttrib2dARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double)>>('glVertexAttrib2dARB')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void vertexAttrib2dvARB(int index, Pointer<Double> v) => _glVertexAttrib2dvARB(index, v);
  late final _glVertexAttrib2dvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib2dvARB')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib2fARB(int index, double x, double y) => _glVertexAttrib2fARB(index, x, y);
  late final _glVertexAttrib2fARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float)>>('glVertexAttrib2fARB')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void vertexAttrib2fvARB(int index, Pointer<Float> v) => _glVertexAttrib2fvARB(index, v);
  late final _glVertexAttrib2fvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib2fvARB')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib2sARB(int index, int x, int y) => _glVertexAttrib2sARB(index, x, y);
  late final _glVertexAttrib2sARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short)>>('glVertexAttrib2sARB')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexAttrib2svARB(int index, Pointer<Short> v) => _glVertexAttrib2svARB(index, v);
  late final _glVertexAttrib2svARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib2svARB')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib3dARB(int index, double x, double y, double z) => _glVertexAttrib3dARB(index, x, y, z);
  late final _glVertexAttrib3dARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glVertexAttrib3dARB')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void vertexAttrib3dvARB(int index, Pointer<Double> v) => _glVertexAttrib3dvARB(index, v);
  late final _glVertexAttrib3dvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib3dvARB')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib3fARB(int index, double x, double y, double z) => _glVertexAttrib3fARB(index, x, y, z);
  late final _glVertexAttrib3fARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float)>>('glVertexAttrib3fARB')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void vertexAttrib3fvARB(int index, Pointer<Float> v) => _glVertexAttrib3fvARB(index, v);
  late final _glVertexAttrib3fvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib3fvARB')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib3sARB(int index, int x, int y, int z) => _glVertexAttrib3sARB(index, x, y, z);
  late final _glVertexAttrib3sARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short)>>('glVertexAttrib3sARB')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttrib3svARB(int index, Pointer<Short> v) => _glVertexAttrib3svARB(index, v);
  late final _glVertexAttrib3svARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib3svARB')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib4NbvARB(int index, Pointer<SignedChar> v) => _glVertexAttrib4NbvARB(index, v);
  late final _glVertexAttrib4NbvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glVertexAttrib4NbvARB')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void vertexAttrib4NivARB(int index, Pointer<Int> v) => _glVertexAttrib4NivARB(index, v);
  late final _glVertexAttrib4NivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttrib4NivARB')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttrib4NsvARB(int index, Pointer<Short> v) => _glVertexAttrib4NsvARB(index, v);
  late final _glVertexAttrib4NsvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib4NsvARB')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib4NubARB(int index, int x, int y, int z, int w) => _glVertexAttrib4NubARB(index, x, y, z, w);
  late final _glVertexAttrib4NubARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar)>>(
              'glVertexAttrib4NubARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttrib4NubvARB(int index, Pointer<UnsignedChar> v) => _glVertexAttrib4NubvARB(index, v);
  late final _glVertexAttrib4NubvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glVertexAttrib4NubvARB')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void vertexAttrib4NuivARB(int index, Pointer<UnsignedInt> v) => _glVertexAttrib4NuivARB(index, v);
  late final _glVertexAttrib4NuivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttrib4NuivARB')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttrib4NusvARB(int index, Pointer<UnsignedShort> v) => _glVertexAttrib4NusvARB(index, v);
  late final _glVertexAttrib4NusvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVertexAttrib4NusvARB')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttrib4bvARB(int index, Pointer<SignedChar> v) => _glVertexAttrib4bvARB(index, v);
  late final _glVertexAttrib4bvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glVertexAttrib4bvARB')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void vertexAttrib4dARB(int index, double x, double y, double z, double w) => _glVertexAttrib4dARB(index, x, y, z, w);
  late final _glVertexAttrib4dARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double)>>('glVertexAttrib4dARB')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void vertexAttrib4dvARB(int index, Pointer<Double> v) => _glVertexAttrib4dvARB(index, v);
  late final _glVertexAttrib4dvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib4dvARB')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib4fARB(int index, double x, double y, double z, double w) => _glVertexAttrib4fARB(index, x, y, z, w);
  late final _glVertexAttrib4fARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float)>>('glVertexAttrib4fARB')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void vertexAttrib4fvARB(int index, Pointer<Float> v) => _glVertexAttrib4fvARB(index, v);
  late final _glVertexAttrib4fvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib4fvARB')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib4ivARB(int index, Pointer<Int> v) => _glVertexAttrib4ivARB(index, v);
  late final _glVertexAttrib4ivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttrib4ivARB')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttrib4sARB(int index, int x, int y, int z, int w) => _glVertexAttrib4sARB(index, x, y, z, w);
  late final _glVertexAttrib4sARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short, Short)>>('glVertexAttrib4sARB')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttrib4svARB(int index, Pointer<Short> v) => _glVertexAttrib4svARB(index, v);
  late final _glVertexAttrib4svARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib4svARB')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib4ubvARB(int index, Pointer<UnsignedChar> v) => _glVertexAttrib4ubvARB(index, v);
  late final _glVertexAttrib4ubvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glVertexAttrib4ubvARB')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void vertexAttrib4uivARB(int index, Pointer<UnsignedInt> v) => _glVertexAttrib4uivARB(index, v);
  late final _glVertexAttrib4uivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttrib4uivARB')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttrib4usvARB(int index, Pointer<UnsignedShort> v) => _glVertexAttrib4usvARB(index, v);
  late final _glVertexAttrib4usvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVertexAttrib4usvARB')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttribPointerARB(int index, int size, int type, int normalized, int stride, Pointer<Void> pointer) =>
      _glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
  late final _glVertexAttribPointerARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedChar, Int, Pointer<Void>)>>(
              'glVertexAttribPointerARB')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void enableVertexAttribArrayARB(int index) => _glEnableVertexAttribArrayARB(index);
  late final _glEnableVertexAttribArrayARB =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glEnableVertexAttribArrayARB')
          .asFunction<void Function(int)>(isLeaf: true);

  void disableVertexAttribArrayARB(int index) => _glDisableVertexAttribArrayARB(index);
  late final _glDisableVertexAttribArrayARB =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDisableVertexAttribArrayARB')
          .asFunction<void Function(int)>(isLeaf: true);

  void getVertexAttribdvARB(int index, int pname, Pointer<Double> params) =>
      _glGetVertexAttribdvARB(index, pname, params);
  late final _glGetVertexAttribdvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetVertexAttribdvARB')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void getVertexAttribfvARB(int index, int pname, Pointer<Float> params) =>
      _glGetVertexAttribfvARB(index, pname, params);
  late final _glGetVertexAttribfvARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetVertexAttribfvARB')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getVertexAttribivARB(int index, int pname, Pointer<Int> params) => _glGetVertexAttribivARB(index, pname, params);
  late final _glGetVertexAttribivARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVertexAttribivARB')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexAttribPointervARB(int index, int pname, Pointer<Pointer<Void>> pointer) =>
      _glGetVertexAttribPointervARB(index, pname, pointer);
  late final _glGetVertexAttribPointervARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>(
              'glGetVertexAttribPointervARB')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void bindAttribLocationARB(int programObj, int index, Pointer<Char> name) =>
      _glBindAttribLocationARB(programObj, index, name);
  late final _glBindAttribLocationARB =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Char>)>>('glBindAttribLocationARB')
          .asFunction<void Function(int, int, Pointer<Char>)>(isLeaf: true);

  void getActiveAttribARB(int programObj, int index, int maxLength, Pointer<Int> length, Pointer<Int> size,
          Pointer<UnsignedInt> type, Pointer<Char> name) =>
      _glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
  late final _glGetActiveAttribARB = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>,
                  Pointer<Char>)>>('glGetActiveAttribARB')
      .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<Char>)>(
          isLeaf: true);

  int getAttribLocationARB(int programObj, Pointer<Char> name) => _glGetAttribLocationARB(programObj, name);
  late final _glGetAttribLocationARB =
      _lookup<NativeFunction<Int Function(UnsignedInt, Pointer<Char>)>>('glGetAttribLocationARB')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void depthRangeArraydvNV(int first, int count, Pointer<Double> v) => _glDepthRangeArraydvNV(first, count, v);
  late final _glDepthRangeArraydvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Double>)>>('glDepthRangeArraydvNV')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void depthRangeIndexeddNV(int index, double n, double f) => _glDepthRangeIndexeddNV(index, n, f);
  late final _glDepthRangeIndexeddNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double)>>('glDepthRangeIndexeddNV')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void windowPos2dARB(double x, double y) => _glWindowPos2dARB(x, y);
  late final _glWindowPos2dARB = _lookup<NativeFunction<Void Function(Double, Double)>>('glWindowPos2dARB')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void windowPos2dvARB(Pointer<Double> v) => _glWindowPos2dvARB(v);
  late final _glWindowPos2dvARB = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glWindowPos2dvARB')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void windowPos2fARB(double x, double y) => _glWindowPos2fARB(x, y);
  late final _glWindowPos2fARB = _lookup<NativeFunction<Void Function(Float, Float)>>('glWindowPos2fARB')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void windowPos2fvARB(Pointer<Float> v) => _glWindowPos2fvARB(v);
  late final _glWindowPos2fvARB = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glWindowPos2fvARB')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void windowPos2iARB(int x, int y) => _glWindowPos2iARB(x, y);
  late final _glWindowPos2iARB = _lookup<NativeFunction<Void Function(Int, Int)>>('glWindowPos2iARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void windowPos2ivARB(Pointer<Int> v) => _glWindowPos2ivARB(v);
  late final _glWindowPos2ivARB = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glWindowPos2ivARB')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void windowPos2sARB(int x, int y) => _glWindowPos2sARB(x, y);
  late final _glWindowPos2sARB = _lookup<NativeFunction<Void Function(Short, Short)>>('glWindowPos2sARB')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void windowPos2svARB(Pointer<Short> v) => _glWindowPos2svARB(v);
  late final _glWindowPos2svARB = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glWindowPos2svARB')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void windowPos3dARB(double x, double y, double z) => _glWindowPos3dARB(x, y, z);
  late final _glWindowPos3dARB = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glWindowPos3dARB')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void windowPos3dvARB(Pointer<Double> v) => _glWindowPos3dvARB(v);
  late final _glWindowPos3dvARB = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glWindowPos3dvARB')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void windowPos3fARB(double x, double y, double z) => _glWindowPos3fARB(x, y, z);
  late final _glWindowPos3fARB = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glWindowPos3fARB')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void windowPos3fvARB(Pointer<Float> v) => _glWindowPos3fvARB(v);
  late final _glWindowPos3fvARB = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glWindowPos3fvARB')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void windowPos3iARB(int x, int y, int z) => _glWindowPos3iARB(x, y, z);
  late final _glWindowPos3iARB = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glWindowPos3iARB')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void windowPos3ivARB(Pointer<Int> v) => _glWindowPos3ivARB(v);
  late final _glWindowPos3ivARB = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glWindowPos3ivARB')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void windowPos3sARB(int x, int y, int z) => _glWindowPos3sARB(x, y, z);
  late final _glWindowPos3sARB = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glWindowPos3sARB')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void windowPos3svARB(Pointer<Short> v) => _glWindowPos3svARB(v);
  late final _glWindowPos3svARB = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glWindowPos3svARB')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void blendBarrierKHR() => _glBlendBarrierKHR();
  late final _glBlendBarrierKHR =
      _lookup<NativeFunction<Void Function()>>('glBlendBarrierKHR').asFunction<void Function()>(isLeaf: true);

  void maxShaderCompilerThreadsKHR(int count) => _glMaxShaderCompilerThreadsKHR(count);
  late final _glMaxShaderCompilerThreadsKHR =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMaxShaderCompilerThreadsKHR')
          .asFunction<void Function(int)>(isLeaf: true);

  void multiTexCoord1bOES(int texture, int s) => _glMultiTexCoord1bOES(texture, s);
  late final _glMultiTexCoord1bOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, SignedChar)>>('glMultiTexCoord1bOES')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void multiTexCoord1bvOES(int texture, Pointer<SignedChar> coords) => _glMultiTexCoord1bvOES(texture, coords);
  late final _glMultiTexCoord1bvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glMultiTexCoord1bvOES')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void multiTexCoord2bOES(int texture, int s, int t) => _glMultiTexCoord2bOES(texture, s, t);
  late final _glMultiTexCoord2bOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, SignedChar, SignedChar)>>('glMultiTexCoord2bOES')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoord2bvOES(int texture, Pointer<SignedChar> coords) => _glMultiTexCoord2bvOES(texture, coords);
  late final _glMultiTexCoord2bvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glMultiTexCoord2bvOES')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void multiTexCoord3bOES(int texture, int s, int t, int r) => _glMultiTexCoord3bOES(texture, s, t, r);
  late final _glMultiTexCoord3bOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, SignedChar, SignedChar, SignedChar)>>('glMultiTexCoord3bOES')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexCoord3bvOES(int texture, Pointer<SignedChar> coords) => _glMultiTexCoord3bvOES(texture, coords);
  late final _glMultiTexCoord3bvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glMultiTexCoord3bvOES')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void multiTexCoord4bOES(int texture, int s, int t, int r, int q) => _glMultiTexCoord4bOES(texture, s, t, r, q);
  late final _glMultiTexCoord4bOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, SignedChar, SignedChar, SignedChar, SignedChar)>>(
              'glMultiTexCoord4bOES')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void multiTexCoord4bvOES(int texture, Pointer<SignedChar> coords) => _glMultiTexCoord4bvOES(texture, coords);
  late final _glMultiTexCoord4bvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glMultiTexCoord4bvOES')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void texCoord1bOES(int s) => _glTexCoord1bOES(s);
  late final _glTexCoord1bOES = _lookup<NativeFunction<Void Function(SignedChar)>>('glTexCoord1bOES')
      .asFunction<void Function(int)>(isLeaf: true);

  void texCoord1bvOES(Pointer<SignedChar> coords) => _glTexCoord1bvOES(coords);
  late final _glTexCoord1bvOES = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glTexCoord1bvOES')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void texCoord2bOES(int s, int t) => _glTexCoord2bOES(s, t);
  late final _glTexCoord2bOES = _lookup<NativeFunction<Void Function(SignedChar, SignedChar)>>('glTexCoord2bOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void texCoord2bvOES(Pointer<SignedChar> coords) => _glTexCoord2bvOES(coords);
  late final _glTexCoord2bvOES = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glTexCoord2bvOES')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void texCoord3bOES(int s, int t, int r) => _glTexCoord3bOES(s, t, r);
  late final _glTexCoord3bOES =
      _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar)>>('glTexCoord3bOES')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texCoord3bvOES(Pointer<SignedChar> coords) => _glTexCoord3bvOES(coords);
  late final _glTexCoord3bvOES = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glTexCoord3bvOES')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void texCoord4bOES(int s, int t, int r, int q) => _glTexCoord4bOES(s, t, r, q);
  late final _glTexCoord4bOES =
      _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar, SignedChar)>>('glTexCoord4bOES')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texCoord4bvOES(Pointer<SignedChar> coords) => _glTexCoord4bvOES(coords);
  late final _glTexCoord4bvOES = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glTexCoord4bvOES')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void vertex2bOES(int x, int y) => _glVertex2bOES(x, y);
  late final _glVertex2bOES = _lookup<NativeFunction<Void Function(SignedChar, SignedChar)>>('glVertex2bOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertex2bvOES(Pointer<SignedChar> coords) => _glVertex2bvOES(coords);
  late final _glVertex2bvOES = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glVertex2bvOES')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void vertex3bOES(int x, int y, int z) => _glVertex3bOES(x, y, z);
  late final _glVertex3bOES =
      _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar)>>('glVertex3bOES')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertex3bvOES(Pointer<SignedChar> coords) => _glVertex3bvOES(coords);
  late final _glVertex3bvOES = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glVertex3bvOES')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void vertex4bOES(int x, int y, int z, int w) => _glVertex4bOES(x, y, z, w);
  late final _glVertex4bOES =
      _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar, SignedChar)>>('glVertex4bOES')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertex4bvOES(Pointer<SignedChar> coords) => _glVertex4bvOES(coords);
  late final _glVertex4bvOES = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glVertex4bvOES')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void alphaFuncxOES(int func, int ref) => _glAlphaFuncxOES(func, ref);
  late final _glAlphaFuncxOES = _lookup<NativeFunction<Void Function(UnsignedInt, Int32)>>('glAlphaFuncxOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void clearColorxOES(int red, int green, int blue, int alpha) => _glClearColorxOES(red, green, blue, alpha);
  late final _glClearColorxOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32, Int32)>>('glClearColorxOES')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void clearDepthxOES(int depth) => _glClearDepthxOES(depth);
  late final _glClearDepthxOES =
      _lookup<NativeFunction<Void Function(Int32)>>('glClearDepthxOES').asFunction<void Function(int)>(isLeaf: true);

  void clipPlanexOES(int plane, Pointer<Int32> equation) => _glClipPlanexOES(plane, equation);
  late final _glClipPlanexOES = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int32>)>>('glClipPlanexOES')
      .asFunction<void Function(int, Pointer<Int32>)>(isLeaf: true);

  void color4xOES(int red, int green, int blue, int alpha) => _glColor4xOES(red, green, blue, alpha);
  late final _glColor4xOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32, Int32)>>('glColor4xOES')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void depthRangexOES(int n, int f) => _glDepthRangexOES(n, f);
  late final _glDepthRangexOES = _lookup<NativeFunction<Void Function(Int32, Int32)>>('glDepthRangexOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void fogxOES(int pname, int param) => _glFogxOES(pname, param);
  late final _glFogxOES = _lookup<NativeFunction<Void Function(UnsignedInt, Int32)>>('glFogxOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void fogxvOES(int pname, Pointer<Int32> param) => _glFogxvOES(pname, param);
  late final _glFogxvOES = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int32>)>>('glFogxvOES')
      .asFunction<void Function(int, Pointer<Int32>)>(isLeaf: true);

  void frustumxOES(int l, int r, int b, int t, int n, int f) => _glFrustumxOES(l, r, b, t, n, f);
  late final _glFrustumxOES =
      _lookup<NativeFunction<Void Function(Int32, Int32, Int32, Int32, Int32, Int32)>>('glFrustumxOES')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void getClipPlanexOES(int plane, Pointer<Int32> equation) => _glGetClipPlanexOES(plane, equation);
  late final _glGetClipPlanexOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int32>)>>('glGetClipPlanexOES')
          .asFunction<void Function(int, Pointer<Int32>)>(isLeaf: true);

  void getFixedvOES(int pname, Pointer<Int32> params) => _glGetFixedvOES(pname, params);
  late final _glGetFixedvOES = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int32>)>>('glGetFixedvOES')
      .asFunction<void Function(int, Pointer<Int32>)>(isLeaf: true);

  void getTexEnvxvOES(int target, int pname, Pointer<Int32> params) => _glGetTexEnvxvOES(target, pname, params);
  late final _glGetTexEnvxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glGetTexEnvxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void getTexParameterxvOES(int target, int pname, Pointer<Int32> params) =>
      _glGetTexParameterxvOES(target, pname, params);
  late final _glGetTexParameterxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glGetTexParameterxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void lightModelxOES(int pname, int param) => _glLightModelxOES(pname, param);
  late final _glLightModelxOES = _lookup<NativeFunction<Void Function(UnsignedInt, Int32)>>('glLightModelxOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void lightModelxvOES(int pname, Pointer<Int32> param) => _glLightModelxvOES(pname, param);
  late final _glLightModelxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int32>)>>('glLightModelxvOES')
          .asFunction<void Function(int, Pointer<Int32>)>(isLeaf: true);

  void lightxOES(int light, int pname, int param) => _glLightxOES(light, pname, param);
  late final _glLightxOES = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int32)>>('glLightxOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void lightxvOES(int light, int pname, Pointer<Int32> params) => _glLightxvOES(light, pname, params);
  late final _glLightxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glLightxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void lineWidthxOES(int width) => _glLineWidthxOES(width);
  late final _glLineWidthxOES =
      _lookup<NativeFunction<Void Function(Int32)>>('glLineWidthxOES').asFunction<void Function(int)>(isLeaf: true);

  void loadMatrixxOES(Pointer<Int32> m) => _glLoadMatrixxOES(m);
  late final _glLoadMatrixxOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glLoadMatrixxOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void materialxOES(int face, int pname, int param) => _glMaterialxOES(face, pname, param);
  late final _glMaterialxOES = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int32)>>('glMaterialxOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void materialxvOES(int face, int pname, Pointer<Int32> param) => _glMaterialxvOES(face, pname, param);
  late final _glMaterialxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glMaterialxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void multMatrixxOES(Pointer<Int32> m) => _glMultMatrixxOES(m);
  late final _glMultMatrixxOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glMultMatrixxOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void multiTexCoord4xOES(int texture, int s, int t, int r, int q) => _glMultiTexCoord4xOES(texture, s, t, r, q);
  late final _glMultiTexCoord4xOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int32, Int32, Int32, Int32)>>('glMultiTexCoord4xOES')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void normal3xOES(int nx, int ny, int nz) => _glNormal3xOES(nx, ny, nz);
  late final _glNormal3xOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32)>>('glNormal3xOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void orthoxOES(int l, int r, int b, int t, int n, int f) => _glOrthoxOES(l, r, b, t, n, f);
  late final _glOrthoxOES =
      _lookup<NativeFunction<Void Function(Int32, Int32, Int32, Int32, Int32, Int32)>>('glOrthoxOES')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void pointParameterxvOES(int pname, Pointer<Int32> params) => _glPointParameterxvOES(pname, params);
  late final _glPointParameterxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int32>)>>('glPointParameterxvOES')
          .asFunction<void Function(int, Pointer<Int32>)>(isLeaf: true);

  void pointSizexOES(int size) => _glPointSizexOES(size);
  late final _glPointSizexOES =
      _lookup<NativeFunction<Void Function(Int32)>>('glPointSizexOES').asFunction<void Function(int)>(isLeaf: true);

  void polygonOffsetxOES(int factor, int units) => _glPolygonOffsetxOES(factor, units);
  late final _glPolygonOffsetxOES = _lookup<NativeFunction<Void Function(Int32, Int32)>>('glPolygonOffsetxOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void rotatexOES(int angle, int x, int y, int z) => _glRotatexOES(angle, x, y, z);
  late final _glRotatexOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32, Int32)>>('glRotatexOES')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void scalexOES(int x, int y, int z) => _glScalexOES(x, y, z);
  late final _glScalexOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32)>>('glScalexOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texEnvxOES(int target, int pname, int param) => _glTexEnvxOES(target, pname, param);
  late final _glTexEnvxOES = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int32)>>('glTexEnvxOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texEnvxvOES(int target, int pname, Pointer<Int32> params) => _glTexEnvxvOES(target, pname, params);
  late final _glTexEnvxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glTexEnvxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void texParameterxOES(int target, int pname, int param) => _glTexParameterxOES(target, pname, param);
  late final _glTexParameterxOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int32)>>('glTexParameterxOES')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texParameterxvOES(int target, int pname, Pointer<Int32> params) => _glTexParameterxvOES(target, pname, params);
  late final _glTexParameterxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glTexParameterxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void translatexOES(int x, int y, int z) => _glTranslatexOES(x, y, z);
  late final _glTranslatexOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32)>>('glTranslatexOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void accumxOES(int op, int value) => _glAccumxOES(op, value);
  late final _glAccumxOES = _lookup<NativeFunction<Void Function(UnsignedInt, Int32)>>('glAccumxOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void bitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, Pointer<UnsignedChar> bitmap) =>
      _glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap);
  late final _glBitmapxOES =
      _lookup<NativeFunction<Void Function(Int, Int, Int32, Int32, Int32, Int32, Pointer<UnsignedChar>)>>(
              'glBitmapxOES')
          .asFunction<void Function(int, int, int, int, int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void blendColorxOES(int red, int green, int blue, int alpha) => _glBlendColorxOES(red, green, blue, alpha);
  late final _glBlendColorxOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32, Int32)>>('glBlendColorxOES')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void clearAccumxOES(int red, int green, int blue, int alpha) => _glClearAccumxOES(red, green, blue, alpha);
  late final _glClearAccumxOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32, Int32)>>('glClearAccumxOES')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void color3xOES(int red, int green, int blue) => _glColor3xOES(red, green, blue);
  late final _glColor3xOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32)>>('glColor3xOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void color3xvOES(Pointer<Int32> components) => _glColor3xvOES(components);
  late final _glColor3xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glColor3xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void color4xvOES(Pointer<Int32> components) => _glColor4xvOES(components);
  late final _glColor4xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glColor4xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void convolutionParameterxOES(int target, int pname, int param) => _glConvolutionParameterxOES(target, pname, param);
  late final _glConvolutionParameterxOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int32)>>('glConvolutionParameterxOES')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void convolutionParameterxvOES(int target, int pname, Pointer<Int32> params) =>
      _glConvolutionParameterxvOES(target, pname, params);
  late final _glConvolutionParameterxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glConvolutionParameterxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void evalCoord1xOES(int u) => _glEvalCoord1xOES(u);
  late final _glEvalCoord1xOES =
      _lookup<NativeFunction<Void Function(Int32)>>('glEvalCoord1xOES').asFunction<void Function(int)>(isLeaf: true);

  void evalCoord1xvOES(Pointer<Int32> coords) => _glEvalCoord1xvOES(coords);
  late final _glEvalCoord1xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glEvalCoord1xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void evalCoord2xOES(int u, int v) => _glEvalCoord2xOES(u, v);
  late final _glEvalCoord2xOES = _lookup<NativeFunction<Void Function(Int32, Int32)>>('glEvalCoord2xOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void evalCoord2xvOES(Pointer<Int32> coords) => _glEvalCoord2xvOES(coords);
  late final _glEvalCoord2xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glEvalCoord2xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void feedbackBufferxOES(int n, int type, Pointer<Int32> buffer) => _glFeedbackBufferxOES(n, type, buffer);
  late final _glFeedbackBufferxOES =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Pointer<Int32>)>>('glFeedbackBufferxOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void getConvolutionParameterxvOES(int target, int pname, Pointer<Int32> params) =>
      _glGetConvolutionParameterxvOES(target, pname, params);
  late final _glGetConvolutionParameterxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glGetConvolutionParameterxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void getHistogramParameterxvOES(int target, int pname, Pointer<Int32> params) =>
      _glGetHistogramParameterxvOES(target, pname, params);
  late final _glGetHistogramParameterxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glGetHistogramParameterxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void getLightxOES(int light, int pname, Pointer<Int32> params) => _glGetLightxOES(light, pname, params);
  late final _glGetLightxOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glGetLightxOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void getMapxvOES(int target, int query, Pointer<Int32> v) => _glGetMapxvOES(target, query, v);
  late final _glGetMapxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glGetMapxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void getMaterialxOES(int face, int pname, int param) => _glGetMaterialxOES(face, pname, param);
  late final _glGetMaterialxOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int32)>>('glGetMaterialxOES')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void getPixelMapxv(int map, int size, Pointer<Int32> values) => _glGetPixelMapxv(map, size, values);
  late final _glGetPixelMapxv =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int32>)>>('glGetPixelMapxv')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void getTexGenxvOES(int coord, int pname, Pointer<Int32> params) => _glGetTexGenxvOES(coord, pname, params);
  late final _glGetTexGenxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glGetTexGenxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void getTexLevelParameterxvOES(int target, int level, int pname, Pointer<Int32> params) =>
      _glGetTexLevelParameterxvOES(target, level, pname, params);
  late final _glGetTexLevelParameterxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Int32>)>>(
              'glGetTexLevelParameterxvOES')
          .asFunction<void Function(int, int, int, Pointer<Int32>)>(isLeaf: true);

  void indexxOES(int component) => _glIndexxOES(component);
  late final _glIndexxOES =
      _lookup<NativeFunction<Void Function(Int32)>>('glIndexxOES').asFunction<void Function(int)>(isLeaf: true);

  void indexxvOES(Pointer<Int32> component) => _glIndexxvOES(component);
  late final _glIndexxvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glIndexxvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void loadTransposeMatrixxOES(Pointer<Int32> m) => _glLoadTransposeMatrixxOES(m);
  late final _glLoadTransposeMatrixxOES =
      _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glLoadTransposeMatrixxOES')
          .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void map1xOES(int target, int u1, int u2, int stride, int order, int points) =>
      _glMap1xOES(target, u1, u2, stride, order, points);
  late final _glMap1xOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int32, Int32, Int, Int, Int32)>>('glMap1xOES')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void map2xOES(
          int target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points) =>
      _glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  late final _glMap2xOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int32, Int32, Int, Int, Int32, Int32, Int, Int, Int32)>>(
              'glMap2xOES')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void mapGrid1xOES(int n, int u1, int u2) => _glMapGrid1xOES(n, u1, u2);
  late final _glMapGrid1xOES = _lookup<NativeFunction<Void Function(Int, Int32, Int32)>>('glMapGrid1xOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void mapGrid2xOES(int n, int u1, int u2, int v1, int v2) => _glMapGrid2xOES(n, u1, u2, v1, v2);
  late final _glMapGrid2xOES = _lookup<NativeFunction<Void Function(Int, Int32, Int32, Int32, Int32)>>('glMapGrid2xOES')
      .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void multTransposeMatrixxOES(Pointer<Int32> m) => _glMultTransposeMatrixxOES(m);
  late final _glMultTransposeMatrixxOES =
      _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glMultTransposeMatrixxOES')
          .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void multiTexCoord1xOES(int texture, int s) => _glMultiTexCoord1xOES(texture, s);
  late final _glMultiTexCoord1xOES = _lookup<NativeFunction<Void Function(UnsignedInt, Int32)>>('glMultiTexCoord1xOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void multiTexCoord1xvOES(int texture, Pointer<Int32> coords) => _glMultiTexCoord1xvOES(texture, coords);
  late final _glMultiTexCoord1xvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int32>)>>('glMultiTexCoord1xvOES')
          .asFunction<void Function(int, Pointer<Int32>)>(isLeaf: true);

  void multiTexCoord2xOES(int texture, int s, int t) => _glMultiTexCoord2xOES(texture, s, t);
  late final _glMultiTexCoord2xOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int32, Int32)>>('glMultiTexCoord2xOES')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoord2xvOES(int texture, Pointer<Int32> coords) => _glMultiTexCoord2xvOES(texture, coords);
  late final _glMultiTexCoord2xvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int32>)>>('glMultiTexCoord2xvOES')
          .asFunction<void Function(int, Pointer<Int32>)>(isLeaf: true);

  void multiTexCoord3xOES(int texture, int s, int t, int r) => _glMultiTexCoord3xOES(texture, s, t, r);
  late final _glMultiTexCoord3xOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int32, Int32, Int32)>>('glMultiTexCoord3xOES')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexCoord3xvOES(int texture, Pointer<Int32> coords) => _glMultiTexCoord3xvOES(texture, coords);
  late final _glMultiTexCoord3xvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int32>)>>('glMultiTexCoord3xvOES')
          .asFunction<void Function(int, Pointer<Int32>)>(isLeaf: true);

  void multiTexCoord4xvOES(int texture, Pointer<Int32> coords) => _glMultiTexCoord4xvOES(texture, coords);
  late final _glMultiTexCoord4xvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int32>)>>('glMultiTexCoord4xvOES')
          .asFunction<void Function(int, Pointer<Int32>)>(isLeaf: true);

  void normal3xvOES(Pointer<Int32> coords) => _glNormal3xvOES(coords);
  late final _glNormal3xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glNormal3xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void passThroughxOES(int token) => _glPassThroughxOES(token);
  late final _glPassThroughxOES =
      _lookup<NativeFunction<Void Function(Int32)>>('glPassThroughxOES').asFunction<void Function(int)>(isLeaf: true);

  void pixelMapx(int map, int size, Pointer<Int32> values) => _glPixelMapx(map, size, values);
  late final _glPixelMapx = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int32>)>>('glPixelMapx')
      .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void pixelStorex(int pname, int param) => _glPixelStorex(pname, param);
  late final _glPixelStorex = _lookup<NativeFunction<Void Function(UnsignedInt, Int32)>>('glPixelStorex')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void pixelTransferxOES(int pname, int param) => _glPixelTransferxOES(pname, param);
  late final _glPixelTransferxOES = _lookup<NativeFunction<Void Function(UnsignedInt, Int32)>>('glPixelTransferxOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void pixelZoomxOES(int xfactor, int yfactor) => _glPixelZoomxOES(xfactor, yfactor);
  late final _glPixelZoomxOES = _lookup<NativeFunction<Void Function(Int32, Int32)>>('glPixelZoomxOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void prioritizeTexturesxOES(int n, Pointer<UnsignedInt> textures, Pointer<Int32> priorities) =>
      _glPrioritizeTexturesxOES(n, textures, priorities);
  late final _glPrioritizeTexturesxOES =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>, Pointer<Int32>)>>('glPrioritizeTexturesxOES')
          .asFunction<void Function(int, Pointer<UnsignedInt>, Pointer<Int32>)>(isLeaf: true);

  void rasterPos2xOES(int x, int y) => _glRasterPos2xOES(x, y);
  late final _glRasterPos2xOES = _lookup<NativeFunction<Void Function(Int32, Int32)>>('glRasterPos2xOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void rasterPos2xvOES(Pointer<Int32> coords) => _glRasterPos2xvOES(coords);
  late final _glRasterPos2xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glRasterPos2xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void rasterPos3xOES(int x, int y, int z) => _glRasterPos3xOES(x, y, z);
  late final _glRasterPos3xOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32)>>('glRasterPos3xOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void rasterPos3xvOES(Pointer<Int32> coords) => _glRasterPos3xvOES(coords);
  late final _glRasterPos3xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glRasterPos3xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void rasterPos4xOES(int x, int y, int z, int w) => _glRasterPos4xOES(x, y, z, w);
  late final _glRasterPos4xOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32, Int32)>>('glRasterPos4xOES')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void rasterPos4xvOES(Pointer<Int32> coords) => _glRasterPos4xvOES(coords);
  late final _glRasterPos4xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glRasterPos4xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void rectxOES(int x1, int y1, int x2, int y2) => _glRectxOES(x1, y1, x2, y2);
  late final _glRectxOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32, Int32)>>('glRectxOES')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void rectxvOES(Pointer<Int32> v1, Pointer<Int32> v2) => _glRectxvOES(v1, v2);
  late final _glRectxvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>, Pointer<Int32>)>>('glRectxvOES')
      .asFunction<void Function(Pointer<Int32>, Pointer<Int32>)>(isLeaf: true);

  void texCoord1xOES(int s) => _glTexCoord1xOES(s);
  late final _glTexCoord1xOES =
      _lookup<NativeFunction<Void Function(Int32)>>('glTexCoord1xOES').asFunction<void Function(int)>(isLeaf: true);

  void texCoord1xvOES(Pointer<Int32> coords) => _glTexCoord1xvOES(coords);
  late final _glTexCoord1xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glTexCoord1xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void texCoord2xOES(int s, int t) => _glTexCoord2xOES(s, t);
  late final _glTexCoord2xOES = _lookup<NativeFunction<Void Function(Int32, Int32)>>('glTexCoord2xOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void texCoord2xvOES(Pointer<Int32> coords) => _glTexCoord2xvOES(coords);
  late final _glTexCoord2xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glTexCoord2xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void texCoord3xOES(int s, int t, int r) => _glTexCoord3xOES(s, t, r);
  late final _glTexCoord3xOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32)>>('glTexCoord3xOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texCoord3xvOES(Pointer<Int32> coords) => _glTexCoord3xvOES(coords);
  late final _glTexCoord3xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glTexCoord3xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void texCoord4xOES(int s, int t, int r, int q) => _glTexCoord4xOES(s, t, r, q);
  late final _glTexCoord4xOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32, Int32)>>('glTexCoord4xOES')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texCoord4xvOES(Pointer<Int32> coords) => _glTexCoord4xvOES(coords);
  late final _glTexCoord4xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glTexCoord4xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void texGenxOES(int coord, int pname, int param) => _glTexGenxOES(coord, pname, param);
  late final _glTexGenxOES = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int32)>>('glTexGenxOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texGenxvOES(int coord, int pname, Pointer<Int32> params) => _glTexGenxvOES(coord, pname, params);
  late final _glTexGenxvOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int32>)>>('glTexGenxvOES')
          .asFunction<void Function(int, int, Pointer<Int32>)>(isLeaf: true);

  void vertex2xOES(int x) => _glVertex2xOES(x);
  late final _glVertex2xOES =
      _lookup<NativeFunction<Void Function(Int32)>>('glVertex2xOES').asFunction<void Function(int)>(isLeaf: true);

  void vertex2xvOES(Pointer<Int32> coords) => _glVertex2xvOES(coords);
  late final _glVertex2xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glVertex2xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void vertex3xOES(int x, int y) => _glVertex3xOES(x, y);
  late final _glVertex3xOES = _lookup<NativeFunction<Void Function(Int32, Int32)>>('glVertex3xOES')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertex3xvOES(Pointer<Int32> coords) => _glVertex3xvOES(coords);
  late final _glVertex3xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glVertex3xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  void vertex4xOES(int x, int y, int z) => _glVertex4xOES(x, y, z);
  late final _glVertex4xOES = _lookup<NativeFunction<Void Function(Int32, Int32, Int32)>>('glVertex4xOES')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertex4xvOES(Pointer<Int32> coords) => _glVertex4xvOES(coords);
  late final _glVertex4xvOES = _lookup<NativeFunction<Void Function(Pointer<Int32>)>>('glVertex4xvOES')
      .asFunction<void Function(Pointer<Int32>)>(isLeaf: true);

  int queryMatrixxOES(Pointer<Int32> mantissa, Pointer<Int> exponent) => _glQueryMatrixxOES(mantissa, exponent);
  late final _glQueryMatrixxOES =
      _lookup<NativeFunction<UnsignedInt Function(Pointer<Int32>, Pointer<Int>)>>('glQueryMatrixxOES')
          .asFunction<int Function(Pointer<Int32>, Pointer<Int>)>(isLeaf: true);

  void clearDepthfOES(double depth) => _glClearDepthfOES(depth);
  late final _glClearDepthfOES =
      _lookup<NativeFunction<Void Function(Float)>>('glClearDepthfOES').asFunction<void Function(double)>(isLeaf: true);

  void clipPlanefOES(int plane, Pointer<Float> equation) => _glClipPlanefOES(plane, equation);
  late final _glClipPlanefOES = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glClipPlanefOES')
      .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void depthRangefOES(double n, double f) => _glDepthRangefOES(n, f);
  late final _glDepthRangefOES = _lookup<NativeFunction<Void Function(Float, Float)>>('glDepthRangefOES')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void frustumfOES(double l, double r, double b, double t, double n, double f) => _glFrustumfOES(l, r, b, t, n, f);
  late final _glFrustumfOES =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float, Float, Float)>>('glFrustumfOES')
          .asFunction<void Function(double, double, double, double, double, double)>(isLeaf: true);

  void getClipPlanefOES(int plane, Pointer<Float> equation) => _glGetClipPlanefOES(plane, equation);
  late final _glGetClipPlanefOES =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glGetClipPlanefOES')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void orthofOES(double l, double r, double b, double t, double n, double f) => _glOrthofOES(l, r, b, t, n, f);
  late final _glOrthofOES =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float, Float, Float)>>('glOrthofOES')
          .asFunction<void Function(double, double, double, double, double, double)>(isLeaf: true);

  void tbufferMask3DFX(int mask) => _glTbufferMask3DFX(mask);
  late final _glTbufferMask3DFX = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glTbufferMask3DFX')
      .asFunction<void Function(int)>(isLeaf: true);

  void debugMessageEnableAMD(int category, int severity, int count, Pointer<UnsignedInt> ids, int enabled) =>
      _glDebugMessageEnableAMD(category, severity, count, ids, enabled);
  late final _glDebugMessageEnableAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>, UnsignedChar)>>(
              'glDebugMessageEnableAMD')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>, int)>(isLeaf: true);

  void debugMessageInsertAMD(int category, int severity, int id, int length, Pointer<Char> buf) =>
      _glDebugMessageInsertAMD(category, severity, id, length, buf);
  late final _glDebugMessageInsertAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>)>>(
              'glDebugMessageInsertAMD')
          .asFunction<void Function(int, int, int, int, Pointer<Char>)>(isLeaf: true);

  void debugMessageCallbackAMD(
          Pointer<
                  NativeFunction<
                      Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>, Pointer<Void>)>>
              callback,
          Pointer<Void> userParam) =>
      _glDebugMessageCallbackAMD(callback, userParam);
  late final _glDebugMessageCallbackAMD = _lookup<
          NativeFunction<
              Void Function(
                  Pointer<
                      NativeFunction<
                          Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>, Pointer<Void>)>>,
                  Pointer<Void>)>>('glDebugMessageCallbackAMD')
      .asFunction<
          void Function(
              Pointer<
                  NativeFunction<
                      Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Char>, Pointer<Void>)>>,
              Pointer<Void>)>();

  int getDebugMessageLogAMD(int count, int bufSize, Pointer<UnsignedInt> categories, Pointer<UnsignedInt> severities,
          Pointer<UnsignedInt> ids, Pointer<Int> lengths, Pointer<Char> message) =>
      _glGetDebugMessageLogAMD(count, bufSize, categories, severities, ids, lengths, message);
  late final _glGetDebugMessageLogAMD = _lookup<
          NativeFunction<
              UnsignedInt Function(UnsignedInt, Int, Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<UnsignedInt>,
                  Pointer<Int>, Pointer<Char>)>>('glGetDebugMessageLogAMD')
      .asFunction<
          int Function(int, int, Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<Int>,
              Pointer<Char>)>();

  void blendFuncIndexedAMD(int buf, int src, int dst) => _glBlendFuncIndexedAMD(buf, src, dst);
  late final _glBlendFuncIndexedAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBlendFuncIndexedAMD')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void blendFuncSeparateIndexedAMD(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) =>
      _glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  late final _glBlendFuncSeparateIndexedAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glBlendFuncSeparateIndexedAMD')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void blendEquationIndexedAMD(int buf, int mode) => _glBlendEquationIndexedAMD(buf, mode);
  late final _glBlendEquationIndexedAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBlendEquationIndexedAMD')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void blendEquationSeparateIndexedAMD(int buf, int modeRGB, int modeAlpha) =>
      _glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
  late final _glBlendEquationSeparateIndexedAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBlendEquationSeparateIndexedAMD')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void renderbufferStorageMultisampleAdvancedAMD(
          int target, int samples, int storageSamples, int internalformat, int width, int height) =>
      _glRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height);
  late final _glRenderbufferStorageMultisampleAdvancedAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedInt, Int, Int)>>(
              'glRenderbufferStorageMultisampleAdvancedAMD')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void namedRenderbufferStorageMultisampleAdvancedAMD(
          int renderbuffer, int samples, int storageSamples, int internalformat, int width, int height) =>
      _glNamedRenderbufferStorageMultisampleAdvancedAMD(
          renderbuffer, samples, storageSamples, internalformat, width, height);
  late final _glNamedRenderbufferStorageMultisampleAdvancedAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedInt, Int, Int)>>(
              'glNamedRenderbufferStorageMultisampleAdvancedAMD')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void framebufferSamplePositionsfvAMD(int target, int numsamples, int pixelindex, Pointer<Float> values) =>
      _glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values);
  late final _glFramebufferSamplePositionsfvAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glFramebufferSamplePositionsfvAMD')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void namedFramebufferSamplePositionsfvAMD(int framebuffer, int numsamples, int pixelindex, Pointer<Float> values) =>
      _glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values);
  late final _glNamedFramebufferSamplePositionsfvAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glNamedFramebufferSamplePositionsfvAMD')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getFramebufferParameterfvAMD(
          int target, int pname, int numsamples, int pixelindex, int size, Pointer<Float> values) =>
      _glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values);
  late final _glGetFramebufferParameterfvAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glGetFramebufferParameterfvAMD')
          .asFunction<void Function(int, int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void getNamedFramebufferParameterfvAMD(
          int framebuffer, int pname, int numsamples, int pixelindex, int size, Pointer<Float> values) =>
      _glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values);
  late final _glGetNamedFramebufferParameterfvAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glGetNamedFramebufferParameterfvAMD')
          .asFunction<void Function(int, int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void uniform1i64NV(int location, int x) => _glUniform1i64NV(location, x);
  late final _glUniform1i64NV = _lookup<NativeFunction<Void Function(Int, Int64)>>('glUniform1i64NV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void uniform2i64NV(int location, int x, int y) => _glUniform2i64NV(location, x, y);
  late final _glUniform2i64NV = _lookup<NativeFunction<Void Function(Int, Int64, Int64)>>('glUniform2i64NV')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void uniform3i64NV(int location, int x, int y, int z) => _glUniform3i64NV(location, x, y, z);
  late final _glUniform3i64NV = _lookup<NativeFunction<Void Function(Int, Int64, Int64, Int64)>>('glUniform3i64NV')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void uniform4i64NV(int location, int x, int y, int z, int w) => _glUniform4i64NV(location, x, y, z, w);
  late final _glUniform4i64NV =
      _lookup<NativeFunction<Void Function(Int, Int64, Int64, Int64, Int64)>>('glUniform4i64NV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void uniform1i64vNV(int location, int count, Pointer<Int64> value) => _glUniform1i64vNV(location, count, value);
  late final _glUniform1i64vNV = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int64>)>>('glUniform1i64vNV')
      .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void uniform2i64vNV(int location, int count, Pointer<Int64> value) => _glUniform2i64vNV(location, count, value);
  late final _glUniform2i64vNV = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int64>)>>('glUniform2i64vNV')
      .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void uniform3i64vNV(int location, int count, Pointer<Int64> value) => _glUniform3i64vNV(location, count, value);
  late final _glUniform3i64vNV = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int64>)>>('glUniform3i64vNV')
      .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void uniform4i64vNV(int location, int count, Pointer<Int64> value) => _glUniform4i64vNV(location, count, value);
  late final _glUniform4i64vNV = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Int64>)>>('glUniform4i64vNV')
      .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void uniform1ui64NV(int location, int x) => _glUniform1ui64NV(location, x);
  late final _glUniform1ui64NV = _lookup<NativeFunction<Void Function(Int, Uint64)>>('glUniform1ui64NV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void uniform2ui64NV(int location, int x, int y) => _glUniform2ui64NV(location, x, y);
  late final _glUniform2ui64NV = _lookup<NativeFunction<Void Function(Int, Uint64, Uint64)>>('glUniform2ui64NV')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void uniform3ui64NV(int location, int x, int y, int z) => _glUniform3ui64NV(location, x, y, z);
  late final _glUniform3ui64NV = _lookup<NativeFunction<Void Function(Int, Uint64, Uint64, Uint64)>>('glUniform3ui64NV')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void uniform4ui64NV(int location, int x, int y, int z, int w) => _glUniform4ui64NV(location, x, y, z, w);
  late final _glUniform4ui64NV =
      _lookup<NativeFunction<Void Function(Int, Uint64, Uint64, Uint64, Uint64)>>('glUniform4ui64NV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void uniform1ui64vNV(int location, int count, Pointer<Uint64> value) => _glUniform1ui64vNV(location, count, value);
  late final _glUniform1ui64vNV = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniform1ui64vNV')
      .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void uniform2ui64vNV(int location, int count, Pointer<Uint64> value) => _glUniform2ui64vNV(location, count, value);
  late final _glUniform2ui64vNV = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniform2ui64vNV')
      .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void uniform3ui64vNV(int location, int count, Pointer<Uint64> value) => _glUniform3ui64vNV(location, count, value);
  late final _glUniform3ui64vNV = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniform3ui64vNV')
      .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void uniform4ui64vNV(int location, int count, Pointer<Uint64> value) => _glUniform4ui64vNV(location, count, value);
  late final _glUniform4ui64vNV = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniform4ui64vNV')
      .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void getUniformi64vNV(int program, int location, Pointer<Int64> params) =>
      _glGetUniformi64vNV(program, location, params);
  late final _glGetUniformi64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int64>)>>('glGetUniformi64vNV')
          .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void getUniformui64vNV(int program, int location, Pointer<Uint64> params) =>
      _glGetUniformui64vNV(program, location, params);
  late final _glGetUniformui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Uint64>)>>('glGetUniformui64vNV')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniform1i64NV(int program, int location, int x) => _glProgramUniform1i64NV(program, location, x);
  late final _glProgramUniform1i64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int64)>>('glProgramUniform1i64NV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniform2i64NV(int program, int location, int x, int y) =>
      _glProgramUniform2i64NV(program, location, x, y);
  late final _glProgramUniform2i64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int64, Int64)>>('glProgramUniform2i64NV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void programUniform3i64NV(int program, int location, int x, int y, int z) =>
      _glProgramUniform3i64NV(program, location, x, y, z);
  late final _glProgramUniform3i64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int64, Int64, Int64)>>('glProgramUniform3i64NV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void programUniform4i64NV(int program, int location, int x, int y, int z, int w) =>
      _glProgramUniform4i64NV(program, location, x, y, z, w);
  late final _glProgramUniform4i64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int64, Int64, Int64, Int64)>>('glProgramUniform4i64NV')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programUniform1i64vNV(int program, int location, int count, Pointer<Int64> value) =>
      _glProgramUniform1i64vNV(program, location, count, value);
  late final _glProgramUniform1i64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int64>)>>('glProgramUniform1i64vNV')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void programUniform2i64vNV(int program, int location, int count, Pointer<Int64> value) =>
      _glProgramUniform2i64vNV(program, location, count, value);
  late final _glProgramUniform2i64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int64>)>>('glProgramUniform2i64vNV')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void programUniform3i64vNV(int program, int location, int count, Pointer<Int64> value) =>
      _glProgramUniform3i64vNV(program, location, count, value);
  late final _glProgramUniform3i64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int64>)>>('glProgramUniform3i64vNV')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void programUniform4i64vNV(int program, int location, int count, Pointer<Int64> value) =>
      _glProgramUniform4i64vNV(program, location, count, value);
  late final _glProgramUniform4i64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int64>)>>('glProgramUniform4i64vNV')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void programUniform1ui64NV(int program, int location, int x) => _glProgramUniform1ui64NV(program, location, x);
  late final _glProgramUniform1ui64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64)>>('glProgramUniform1ui64NV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniform2ui64NV(int program, int location, int x, int y) =>
      _glProgramUniform2ui64NV(program, location, x, y);
  late final _glProgramUniform2ui64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64, Uint64)>>('glProgramUniform2ui64NV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void programUniform3ui64NV(int program, int location, int x, int y, int z) =>
      _glProgramUniform3ui64NV(program, location, x, y, z);
  late final _glProgramUniform3ui64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64, Uint64, Uint64)>>('glProgramUniform3ui64NV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void programUniform4ui64NV(int program, int location, int x, int y, int z, int w) =>
      _glProgramUniform4ui64NV(program, location, x, y, z, w);
  late final _glProgramUniform4ui64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64, Uint64, Uint64, Uint64)>>(
              'glProgramUniform4ui64NV')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programUniform1ui64vNV(int program, int location, int count, Pointer<Uint64> value) =>
      _glProgramUniform1ui64vNV(program, location, count, value);
  late final _glProgramUniform1ui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniform1ui64vNV')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniform2ui64vNV(int program, int location, int count, Pointer<Uint64> value) =>
      _glProgramUniform2ui64vNV(program, location, count, value);
  late final _glProgramUniform2ui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniform2ui64vNV')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniform3ui64vNV(int program, int location, int count, Pointer<Uint64> value) =>
      _glProgramUniform3ui64vNV(program, location, count, value);
  late final _glProgramUniform3ui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniform3ui64vNV')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniform4ui64vNV(int program, int location, int count, Pointer<Uint64> value) =>
      _glProgramUniform4ui64vNV(program, location, count, value);
  late final _glProgramUniform4ui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniform4ui64vNV')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void vertexAttribParameteriAMD(int index, int pname, int param) => _glVertexAttribParameteriAMD(index, pname, param);
  late final _glVertexAttribParameteriAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glVertexAttribParameteriAMD')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiDrawArraysIndirectAMD(int mode, Pointer<Void> indirect, int primcount, int stride) =>
      _glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
  late final _glMultiDrawArraysIndirectAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>, Int, Int)>>('glMultiDrawArraysIndirectAMD')
          .asFunction<void Function(int, Pointer<Void>, int, int)>(isLeaf: true);

  void multiDrawElementsIndirectAMD(int mode, int type, Pointer<Void> indirect, int primcount, int stride) =>
      _glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
  late final _glMultiDrawElementsIndirectAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>, Int, Int)>>(
              'glMultiDrawElementsIndirectAMD')
          .asFunction<void Function(int, int, Pointer<Void>, int, int)>(isLeaf: true);

  void genNamesAMD(int identifier, int num, Pointer<UnsignedInt> names) => _glGenNamesAMD(identifier, num, names);
  late final _glGenNamesAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glGenNamesAMD')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deleteNamesAMD(int identifier, int num, Pointer<UnsignedInt> names) => _glDeleteNamesAMD(identifier, num, names);
  late final _glDeleteNamesAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glDeleteNamesAMD')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isNameAMD(int identifier, int name) => _glIsNameAMD(identifier, name);
  late final _glIsNameAMD = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt, UnsignedInt)>>('glIsNameAMD')
      .asFunction<int Function(int, int)>(isLeaf: true);

  void queryObjectParameteruiAMD(int target, int id, int pname, int param) =>
      _glQueryObjectParameteruiAMD(target, id, pname, param);
  late final _glQueryObjectParameteruiAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glQueryObjectParameteruiAMD')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getPerfMonitorGroupsAMD(Pointer<Int> numGroups, int groupsSize, Pointer<UnsignedInt> groups) =>
      _glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
  late final _glGetPerfMonitorGroupsAMD =
      _lookup<NativeFunction<Void Function(Pointer<Int>, Int, Pointer<UnsignedInt>)>>('glGetPerfMonitorGroupsAMD')
          .asFunction<void Function(Pointer<Int>, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getPerfMonitorCountersAMD(int group, Pointer<Int> numCounters, Pointer<Int> maxActiveCounters, int counterSize,
          Pointer<UnsignedInt> counters) =>
      _glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
  late final _glGetPerfMonitorCountersAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>, Pointer<Int>, Int, Pointer<UnsignedInt>)>>(
              'glGetPerfMonitorCountersAMD')
          .asFunction<void Function(int, Pointer<Int>, Pointer<Int>, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getPerfMonitorGroupStringAMD(int group, int bufSize, Pointer<Int> length, Pointer<Char> groupString) =>
      _glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
  late final _glGetPerfMonitorGroupStringAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetPerfMonitorGroupStringAMD')
          .asFunction<void Function(int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void getPerfMonitorCounterStringAMD(
          int group, int counter, int bufSize, Pointer<Int> length, Pointer<Char> counterString) =>
      _glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
  late final _glGetPerfMonitorCounterStringAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetPerfMonitorCounterStringAMD')
          .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void getPerfMonitorCounterInfoAMD(int group, int counter, int pname, Pointer<Void> data) =>
      _glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
  late final _glGetPerfMonitorCounterInfoAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glGetPerfMonitorCounterInfoAMD')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void genPerfMonitorsAMD(int n, Pointer<UnsignedInt> monitors) => _glGenPerfMonitorsAMD(n, monitors);
  late final _glGenPerfMonitorsAMD =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenPerfMonitorsAMD')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deletePerfMonitorsAMD(int n, Pointer<UnsignedInt> monitors) => _glDeletePerfMonitorsAMD(n, monitors);
  late final _glDeletePerfMonitorsAMD =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeletePerfMonitorsAMD')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void selectPerfMonitorCountersAMD(
          int monitor, int enable, int group, int numCounters, Pointer<UnsignedInt> counterList) =>
      _glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
  late final _glSelectPerfMonitorCountersAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedInt, Int, Pointer<UnsignedInt>)>>(
              'glSelectPerfMonitorCountersAMD')
          .asFunction<void Function(int, int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void beginPerfMonitorAMD(int monitor) => _glBeginPerfMonitorAMD(monitor);
  late final _glBeginPerfMonitorAMD = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBeginPerfMonitorAMD')
      .asFunction<void Function(int)>(isLeaf: true);

  void endPerfMonitorAMD(int monitor) => _glEndPerfMonitorAMD(monitor);
  late final _glEndPerfMonitorAMD = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glEndPerfMonitorAMD')
      .asFunction<void Function(int)>(isLeaf: true);

  void getPerfMonitorCounterDataAMD(
          int monitor, int pname, int dataSize, Pointer<UnsignedInt> data, Pointer<Int> bytesWritten) =>
      _glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
  late final _glGetPerfMonitorCounterDataAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>, Pointer<Int>)>>(
              'glGetPerfMonitorCounterDataAMD')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>, Pointer<Int>)>(isLeaf: true);

  void setMultisamplefvAMD(int pname, int index, Pointer<Float> val) => _glSetMultisamplefvAMD(pname, index, val);
  late final _glSetMultisamplefvAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glSetMultisamplefvAMD')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void texStorageSparseAMD(int target, int internalFormat, int width, int height, int depth, int layers, int flags) =>
      _glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);
  late final _glTexStorageSparseAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, UnsignedInt)>>(
              'glTexStorageSparseAMD')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void textureStorageSparseAMD(
          int texture, int target, int internalFormat, int width, int height, int depth, int layers, int flags) =>
      _glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);
  late final _glTextureStorageSparseAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int, Int, Int, UnsignedInt)>>(
              'glTextureStorageSparseAMD')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void stencilOpValueAMD(int face, int value) => _glStencilOpValueAMD(face, value);
  late final _glStencilOpValueAMD =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glStencilOpValueAMD')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void tessellationFactorAMD(double factor) => _glTessellationFactorAMD(factor);
  late final _glTessellationFactorAMD = _lookup<NativeFunction<Void Function(Float)>>('glTessellationFactorAMD')
      .asFunction<void Function(double)>(isLeaf: true);

  void tessellationModeAMD(int mode) => _glTessellationModeAMD(mode);
  late final _glTessellationModeAMD = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glTessellationModeAMD')
      .asFunction<void Function(int)>(isLeaf: true);

  void elementPointerAPPLE(int type, Pointer<Void> pointer) => _glElementPointerAPPLE(type, pointer);
  late final _glElementPointerAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>)>>('glElementPointerAPPLE')
          .asFunction<void Function(int, Pointer<Void>)>(isLeaf: true);

  void drawElementArrayAPPLE(int mode, int first, int count) => _glDrawElementArrayAPPLE(mode, first, count);
  late final _glDrawElementArrayAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glDrawElementArrayAPPLE')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void drawRangeElementArrayAPPLE(int mode, int start, int end, int first, int count) =>
      _glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
  late final _glDrawRangeElementArrayAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int)>>(
              'glDrawRangeElementArrayAPPLE')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void multiDrawElementArrayAPPLE(int mode, Pointer<Int> first, Pointer<Int> count, int primcount) =>
      _glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
  late final _glMultiDrawElementArrayAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>, Pointer<Int>, Int)>>(
              'glMultiDrawElementArrayAPPLE')
          .asFunction<void Function(int, Pointer<Int>, Pointer<Int>, int)>(isLeaf: true);

  void multiDrawRangeElementArrayAPPLE(
          int mode, int start, int end, Pointer<Int> first, Pointer<Int> count, int primcount) =>
      _glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
  late final _glMultiDrawRangeElementArrayAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>, Pointer<Int>, Int)>>(
              'glMultiDrawRangeElementArrayAPPLE')
          .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Int>, int)>(isLeaf: true);

  void genFencesAPPLE(int n, Pointer<UnsignedInt> fences) => _glGenFencesAPPLE(n, fences);
  late final _glGenFencesAPPLE = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenFencesAPPLE')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deleteFencesAPPLE(int n, Pointer<UnsignedInt> fences) => _glDeleteFencesAPPLE(n, fences);
  late final _glDeleteFencesAPPLE =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteFencesAPPLE')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void setFenceAPPLE(int fence) => _glSetFenceAPPLE(fence);
  late final _glSetFenceAPPLE = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glSetFenceAPPLE')
      .asFunction<void Function(int)>(isLeaf: true);

  int isFenceAPPLE(int fence) => _glIsFenceAPPLE(fence);
  late final _glIsFenceAPPLE = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsFenceAPPLE')
      .asFunction<int Function(int)>(isLeaf: true);

  int testFenceAPPLE(int fence) => _glTestFenceAPPLE(fence);
  late final _glTestFenceAPPLE = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glTestFenceAPPLE')
      .asFunction<int Function(int)>(isLeaf: true);

  void finishFenceAPPLE(int fence) => _glFinishFenceAPPLE(fence);
  late final _glFinishFenceAPPLE = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glFinishFenceAPPLE')
      .asFunction<void Function(int)>(isLeaf: true);

  int testObjectAPPLE(int object, int name) => _glTestObjectAPPLE(object, name);
  late final _glTestObjectAPPLE =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt, UnsignedInt)>>('glTestObjectAPPLE')
          .asFunction<int Function(int, int)>(isLeaf: true);

  void finishObjectAPPLE(int object, int name) => _glFinishObjectAPPLE(object, name);
  late final _glFinishObjectAPPLE = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glFinishObjectAPPLE')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void bufferParameteriAPPLE(int target, int pname, int param) => _glBufferParameteriAPPLE(target, pname, param);
  late final _glBufferParameteriAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glBufferParameteriAPPLE')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void flushMappedBufferRangeAPPLE(int target, int offset, int size) =>
      _glFlushMappedBufferRangeAPPLE(target, offset, size);
  late final _glFlushMappedBufferRangeAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long)>>('glFlushMappedBufferRangeAPPLE')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  int objectPurgeableAPPLE(int objectType, int name, int option) => _glObjectPurgeableAPPLE(objectType, name, option);
  late final _glObjectPurgeableAPPLE =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glObjectPurgeableAPPLE')
          .asFunction<int Function(int, int, int)>(isLeaf: true);

  int objectUnpurgeableAPPLE(int objectType, int name, int option) =>
      _glObjectUnpurgeableAPPLE(objectType, name, option);
  late final _glObjectUnpurgeableAPPLE =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glObjectUnpurgeableAPPLE')
          .asFunction<int Function(int, int, int)>(isLeaf: true);

  void getObjectParameterivAPPLE(int objectType, int name, int pname, Pointer<Int> params) =>
      _glGetObjectParameterivAPPLE(objectType, name, pname, params);
  late final _glGetObjectParameterivAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetObjectParameterivAPPLE')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void textureRangeAPPLE(int target, int length, Pointer<Void> pointer) =>
      _glTextureRangeAPPLE(target, length, pointer);
  late final _glTextureRangeAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glTextureRangeAPPLE')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void getTexParameterPointervAPPLE(int target, int pname, Pointer<Pointer<Void>> params) =>
      _glGetTexParameterPointervAPPLE(target, pname, params);
  late final _glGetTexParameterPointervAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>(
              'glGetTexParameterPointervAPPLE')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void bindVertexArrayAPPLE(int array) => _glBindVertexArrayAPPLE(array);
  late final _glBindVertexArrayAPPLE = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBindVertexArrayAPPLE')
      .asFunction<void Function(int)>(isLeaf: true);

  void deleteVertexArraysAPPLE(int n, Pointer<UnsignedInt> arrays) => _glDeleteVertexArraysAPPLE(n, arrays);
  late final _glDeleteVertexArraysAPPLE =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteVertexArraysAPPLE')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genVertexArraysAPPLE(int n, Pointer<UnsignedInt> arrays) => _glGenVertexArraysAPPLE(n, arrays);
  late final _glGenVertexArraysAPPLE =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenVertexArraysAPPLE')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isVertexArrayAPPLE(int array) => _glIsVertexArrayAPPLE(array);
  late final _glIsVertexArrayAPPLE = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsVertexArrayAPPLE')
      .asFunction<int Function(int)>(isLeaf: true);

  void vertexArrayRangeAPPLE(int length, Pointer<Void> pointer) => _glVertexArrayRangeAPPLE(length, pointer);
  late final _glVertexArrayRangeAPPLE =
      _lookup<NativeFunction<Void Function(Int, Pointer<Void>)>>('glVertexArrayRangeAPPLE')
          .asFunction<void Function(int, Pointer<Void>)>(isLeaf: true);

  void flushVertexArrayRangeAPPLE(int length, Pointer<Void> pointer) => _glFlushVertexArrayRangeAPPLE(length, pointer);
  late final _glFlushVertexArrayRangeAPPLE =
      _lookup<NativeFunction<Void Function(Int, Pointer<Void>)>>('glFlushVertexArrayRangeAPPLE')
          .asFunction<void Function(int, Pointer<Void>)>(isLeaf: true);

  void vertexArrayParameteriAPPLE(int pname, int param) => _glVertexArrayParameteriAPPLE(pname, param);
  late final _glVertexArrayParameteriAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glVertexArrayParameteriAPPLE')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void enableVertexAttribAPPLE(int index, int pname) => _glEnableVertexAttribAPPLE(index, pname);
  late final _glEnableVertexAttribAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glEnableVertexAttribAPPLE')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void disableVertexAttribAPPLE(int index, int pname) => _glDisableVertexAttribAPPLE(index, pname);
  late final _glDisableVertexAttribAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDisableVertexAttribAPPLE')
          .asFunction<void Function(int, int)>(isLeaf: true);

  int isVertexAttribEnabledAPPLE(int index, int pname) => _glIsVertexAttribEnabledAPPLE(index, pname);
  late final _glIsVertexAttribEnabledAPPLE =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt, UnsignedInt)>>('glIsVertexAttribEnabledAPPLE')
          .asFunction<int Function(int, int)>(isLeaf: true);

  void mapVertexAttrib1dAPPLE(
          int index, int size, double u1, double u2, int stride, int order, Pointer<Double> points) =>
      _glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
  late final _glMapVertexAttrib1dAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Double, Double, Int, Int, Pointer<Double>)>>(
              'glMapVertexAttrib1dAPPLE')
          .asFunction<void Function(int, int, double, double, int, int, Pointer<Double>)>(isLeaf: true);

  void mapVertexAttrib1fAPPLE(
          int index, int size, double u1, double u2, int stride, int order, Pointer<Float> points) =>
      _glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
  late final _glMapVertexAttrib1fAPPLE =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float, Float, Int, Int, Pointer<Float>)>>(
              'glMapVertexAttrib1fAPPLE')
          .asFunction<void Function(int, int, double, double, int, int, Pointer<Float>)>(isLeaf: true);

  void mapVertexAttrib2dAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2,
          int vstride, int vorder, Pointer<Double> points) =>
      _glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  late final _glMapVertexAttrib2dAPPLE = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Double, Double, Int, Int, Double, Double, Int, Int,
                  Pointer<Double>)>>('glMapVertexAttrib2dAPPLE')
      .asFunction<void Function(int, int, double, double, int, int, double, double, int, int, Pointer<Double>)>(
          isLeaf: true);

  void mapVertexAttrib2fAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2,
          int vstride, int vorder, Pointer<Float> points) =>
      _glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  late final _glMapVertexAttrib2fAPPLE = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Float, Float, Int, Int, Float, Float, Int, Int,
                  Pointer<Float>)>>('glMapVertexAttrib2fAPPLE')
      .asFunction<void Function(int, int, double, double, int, int, double, double, int, int, Pointer<Float>)>(
          isLeaf: true);

  void drawBuffersATI(int n, Pointer<UnsignedInt> bufs) => _glDrawBuffersATI(n, bufs);
  late final _glDrawBuffersATI = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDrawBuffersATI')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void elementPointerATI(int type, Pointer<Void> pointer) => _glElementPointerATI(type, pointer);
  late final _glElementPointerATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>)>>('glElementPointerATI')
          .asFunction<void Function(int, Pointer<Void>)>(isLeaf: true);

  void drawElementArrayATI(int mode, int count) => _glDrawElementArrayATI(mode, count);
  late final _glDrawElementArrayATI = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glDrawElementArrayATI')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void drawRangeElementArrayATI(int mode, int start, int end, int count) =>
      _glDrawRangeElementArrayATI(mode, start, end, count);
  late final _glDrawRangeElementArrayATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>('glDrawRangeElementArrayATI')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texBumpParameterivATI(int pname, Pointer<Int> param) => _glTexBumpParameterivATI(pname, param);
  late final _glTexBumpParameterivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glTexBumpParameterivATI')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void texBumpParameterfvATI(int pname, Pointer<Float> param) => _glTexBumpParameterfvATI(pname, param);
  late final _glTexBumpParameterfvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glTexBumpParameterfvATI')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void getTexBumpParameterivATI(int pname, Pointer<Int> param) => _glGetTexBumpParameterivATI(pname, param);
  late final _glGetTexBumpParameterivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glGetTexBumpParameterivATI')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void getTexBumpParameterfvATI(int pname, Pointer<Float> param) => _glGetTexBumpParameterfvATI(pname, param);
  late final _glGetTexBumpParameterfvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glGetTexBumpParameterfvATI')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  int genFragmentShadersATI(int range) => _glGenFragmentShadersATI(range);
  late final _glGenFragmentShadersATI =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt)>>('glGenFragmentShadersATI')
          .asFunction<int Function(int)>(isLeaf: true);

  void bindFragmentShaderATI(int id) => _glBindFragmentShaderATI(id);
  late final _glBindFragmentShaderATI = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBindFragmentShaderATI')
      .asFunction<void Function(int)>(isLeaf: true);

  void deleteFragmentShaderATI(int id) => _glDeleteFragmentShaderATI(id);
  late final _glDeleteFragmentShaderATI =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDeleteFragmentShaderATI')
          .asFunction<void Function(int)>(isLeaf: true);

  void beginFragmentShaderATI() => _glBeginFragmentShaderATI();
  late final _glBeginFragmentShaderATI =
      _lookup<NativeFunction<Void Function()>>('glBeginFragmentShaderATI').asFunction<void Function()>(isLeaf: true);

  void endFragmentShaderATI() => _glEndFragmentShaderATI();
  late final _glEndFragmentShaderATI =
      _lookup<NativeFunction<Void Function()>>('glEndFragmentShaderATI').asFunction<void Function()>(isLeaf: true);

  void passTexCoordATI(int dst, int coord, int swizzle) => _glPassTexCoordATI(dst, coord, swizzle);
  late final _glPassTexCoordATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glPassTexCoordATI')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void sampleMapATI(int dst, int interp, int swizzle) => _glSampleMapATI(dst, interp, swizzle);
  late final _glSampleMapATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glSampleMapATI')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void colorFragmentOp1ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod) =>
      _glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
  late final _glColorFragmentOp1ATI = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt)>>('glColorFragmentOp1ATI')
      .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void colorFragmentOp2ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2,
          int arg2Rep, int arg2Mod) =>
      _glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  late final _glColorFragmentOp2ATI = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt, UnsignedInt, UnsignedInt)>>('glColorFragmentOp2ATI')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void colorFragmentOp3ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2,
          int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod) =>
      _glColorFragmentOp3ATI(
          op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  late final _glColorFragmentOp3ATI = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt)>>('glColorFragmentOp3ATI')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void alphaFragmentOp1ATI(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod) =>
      _glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
  late final _glAlphaFragmentOp1ATI = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt)>>('glAlphaFragmentOp1ATI')
      .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void alphaFragmentOp2ATI(
          int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod) =>
      _glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  late final _glAlphaFragmentOp2ATI = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt, UnsignedInt)>>('glAlphaFragmentOp2ATI')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void alphaFragmentOp3ATI(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep,
          int arg2Mod, int arg3, int arg3Rep, int arg3Mod) =>
      _glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  late final _glAlphaFragmentOp3ATI = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glAlphaFragmentOp3ATI')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void setFragmentShaderConstantATI(int dst, Pointer<Float> value) => _glSetFragmentShaderConstantATI(dst, value);
  late final _glSetFragmentShaderConstantATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glSetFragmentShaderConstantATI')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  Pointer<Void> mapObjectBufferATI(int buffer) => _glMapObjectBufferATI(buffer);
  late final _glMapObjectBufferATI =
      _lookup<NativeFunction<Pointer<Void> Function(UnsignedInt)>>('glMapObjectBufferATI')
          .asFunction<Pointer<Void> Function(int)>(isLeaf: true);

  void unmapObjectBufferATI(int buffer) => _glUnmapObjectBufferATI(buffer);
  late final _glUnmapObjectBufferATI = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glUnmapObjectBufferATI')
      .asFunction<void Function(int)>(isLeaf: true);

  void pNTrianglesiATI(int pname, int param) => _glPNTrianglesiATI(pname, param);
  late final _glPNTrianglesiATI = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glPNTrianglesiATI')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void pNTrianglesfATI(int pname, double param) => _glPNTrianglesfATI(pname, param);
  late final _glPNTrianglesfATI = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glPNTrianglesfATI')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void stencilOpSeparateATI(int face, int sfail, int dpfail, int dppass) =>
      _glStencilOpSeparateATI(face, sfail, dpfail, dppass);
  late final _glStencilOpSeparateATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glStencilOpSeparateATI')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void stencilFuncSeparateATI(int frontfunc, int backfunc, int ref, int mask) =>
      _glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
  late final _glStencilFuncSeparateATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt)>>('glStencilFuncSeparateATI')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  int newObjectBufferATI(int size, Pointer<Void> pointer, int usage) => _glNewObjectBufferATI(size, pointer, usage);
  late final _glNewObjectBufferATI =
      _lookup<NativeFunction<UnsignedInt Function(Int, Pointer<Void>, UnsignedInt)>>('glNewObjectBufferATI')
          .asFunction<int Function(int, Pointer<Void>, int)>(isLeaf: true);

  int isObjectBufferATI(int buffer) => _glIsObjectBufferATI(buffer);
  late final _glIsObjectBufferATI = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsObjectBufferATI')
      .asFunction<int Function(int)>(isLeaf: true);

  void updateObjectBufferATI(int buffer, int offset, int size, Pointer<Void> pointer, int preserve) =>
      _glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
  late final _glUpdateObjectBufferATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Void>, UnsignedInt)>>(
              'glUpdateObjectBufferATI')
          .asFunction<void Function(int, int, int, Pointer<Void>, int)>(isLeaf: true);

  void getObjectBufferfvATI(int buffer, int pname, Pointer<Float> params) =>
      _glGetObjectBufferfvATI(buffer, pname, params);
  late final _glGetObjectBufferfvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetObjectBufferfvATI')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getObjectBufferivATI(int buffer, int pname, Pointer<Int> params) =>
      _glGetObjectBufferivATI(buffer, pname, params);
  late final _glGetObjectBufferivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetObjectBufferivATI')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void freeObjectBufferATI(int buffer) => _glFreeObjectBufferATI(buffer);
  late final _glFreeObjectBufferATI = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glFreeObjectBufferATI')
      .asFunction<void Function(int)>(isLeaf: true);

  void arrayObjectATI(int array, int size, int type, int stride, int buffer, int offset) =>
      _glArrayObjectATI(array, size, type, stride, buffer, offset);
  late final _glArrayObjectATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, UnsignedInt, UnsignedInt)>>(
              'glArrayObjectATI')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void getArrayObjectfvATI(int array, int pname, Pointer<Float> params) => _glGetArrayObjectfvATI(array, pname, params);
  late final _glGetArrayObjectfvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetArrayObjectfvATI')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getArrayObjectivATI(int array, int pname, Pointer<Int> params) => _glGetArrayObjectivATI(array, pname, params);
  late final _glGetArrayObjectivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetArrayObjectivATI')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void variantArrayObjectATI(int id, int type, int stride, int buffer, int offset) =>
      _glVariantArrayObjectATI(id, type, stride, buffer, offset);
  late final _glVariantArrayObjectATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt)>>(
              'glVariantArrayObjectATI')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void getVariantArrayObjectfvATI(int id, int pname, Pointer<Float> params) =>
      _glGetVariantArrayObjectfvATI(id, pname, params);
  late final _glGetVariantArrayObjectfvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetVariantArrayObjectfvATI')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getVariantArrayObjectivATI(int id, int pname, Pointer<Int> params) =>
      _glGetVariantArrayObjectivATI(id, pname, params);
  late final _glGetVariantArrayObjectivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVariantArrayObjectivATI')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void vertexAttribArrayObjectATI(int index, int size, int type, int normalized, int stride, int buffer, int offset) =>
      _glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
  late final _glVertexAttribArrayObjectATI = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, UnsignedInt, UnsignedChar, Int, UnsignedInt,
                  UnsignedInt)>>('glVertexAttribArrayObjectATI')
      .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void getVertexAttribArrayObjectfvATI(int index, int pname, Pointer<Float> params) =>
      _glGetVertexAttribArrayObjectfvATI(index, pname, params);
  late final _glGetVertexAttribArrayObjectfvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetVertexAttribArrayObjectfvATI')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getVertexAttribArrayObjectivATI(int index, int pname, Pointer<Int> params) =>
      _glGetVertexAttribArrayObjectivATI(index, pname, params);
  late final _glGetVertexAttribArrayObjectivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetVertexAttribArrayObjectivATI')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void vertexStream1sATI(int stream, int x) => _glVertexStream1sATI(stream, x);
  late final _glVertexStream1sATI = _lookup<NativeFunction<Void Function(UnsignedInt, Short)>>('glVertexStream1sATI')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexStream1svATI(int stream, Pointer<Short> coords) => _glVertexStream1svATI(stream, coords);
  late final _glVertexStream1svATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexStream1svATI')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexStream1iATI(int stream, int x) => _glVertexStream1iATI(stream, x);
  late final _glVertexStream1iATI = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glVertexStream1iATI')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexStream1ivATI(int stream, Pointer<Int> coords) => _glVertexStream1ivATI(stream, coords);
  late final _glVertexStream1ivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexStream1ivATI')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexStream1fATI(int stream, double x) => _glVertexStream1fATI(stream, x);
  late final _glVertexStream1fATI = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glVertexStream1fATI')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void vertexStream1fvATI(int stream, Pointer<Float> coords) => _glVertexStream1fvATI(stream, coords);
  late final _glVertexStream1fvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexStream1fvATI')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexStream1dATI(int stream, double x) => _glVertexStream1dATI(stream, x);
  late final _glVertexStream1dATI = _lookup<NativeFunction<Void Function(UnsignedInt, Double)>>('glVertexStream1dATI')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void vertexStream1dvATI(int stream, Pointer<Double> coords) => _glVertexStream1dvATI(stream, coords);
  late final _glVertexStream1dvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexStream1dvATI')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexStream2sATI(int stream, int x, int y) => _glVertexStream2sATI(stream, x, y);
  late final _glVertexStream2sATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short)>>('glVertexStream2sATI')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexStream2svATI(int stream, Pointer<Short> coords) => _glVertexStream2svATI(stream, coords);
  late final _glVertexStream2svATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexStream2svATI')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexStream2iATI(int stream, int x, int y) => _glVertexStream2iATI(stream, x, y);
  late final _glVertexStream2iATI = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glVertexStream2iATI')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexStream2ivATI(int stream, Pointer<Int> coords) => _glVertexStream2ivATI(stream, coords);
  late final _glVertexStream2ivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexStream2ivATI')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexStream2fATI(int stream, double x, double y) => _glVertexStream2fATI(stream, x, y);
  late final _glVertexStream2fATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float)>>('glVertexStream2fATI')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void vertexStream2fvATI(int stream, Pointer<Float> coords) => _glVertexStream2fvATI(stream, coords);
  late final _glVertexStream2fvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexStream2fvATI')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexStream2dATI(int stream, double x, double y) => _glVertexStream2dATI(stream, x, y);
  late final _glVertexStream2dATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double)>>('glVertexStream2dATI')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void vertexStream2dvATI(int stream, Pointer<Double> coords) => _glVertexStream2dvATI(stream, coords);
  late final _glVertexStream2dvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexStream2dvATI')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexStream3sATI(int stream, int x, int y, int z) => _glVertexStream3sATI(stream, x, y, z);
  late final _glVertexStream3sATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short)>>('glVertexStream3sATI')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexStream3svATI(int stream, Pointer<Short> coords) => _glVertexStream3svATI(stream, coords);
  late final _glVertexStream3svATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexStream3svATI')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexStream3iATI(int stream, int x, int y, int z) => _glVertexStream3iATI(stream, x, y, z);
  late final _glVertexStream3iATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glVertexStream3iATI')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexStream3ivATI(int stream, Pointer<Int> coords) => _glVertexStream3ivATI(stream, coords);
  late final _glVertexStream3ivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexStream3ivATI')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexStream3fATI(int stream, double x, double y, double z) => _glVertexStream3fATI(stream, x, y, z);
  late final _glVertexStream3fATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float)>>('glVertexStream3fATI')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void vertexStream3fvATI(int stream, Pointer<Float> coords) => _glVertexStream3fvATI(stream, coords);
  late final _glVertexStream3fvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexStream3fvATI')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexStream3dATI(int stream, double x, double y, double z) => _glVertexStream3dATI(stream, x, y, z);
  late final _glVertexStream3dATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glVertexStream3dATI')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void vertexStream3dvATI(int stream, Pointer<Double> coords) => _glVertexStream3dvATI(stream, coords);
  late final _glVertexStream3dvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexStream3dvATI')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexStream4sATI(int stream, int x, int y, int z, int w) => _glVertexStream4sATI(stream, x, y, z, w);
  late final _glVertexStream4sATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short, Short)>>('glVertexStream4sATI')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexStream4svATI(int stream, Pointer<Short> coords) => _glVertexStream4svATI(stream, coords);
  late final _glVertexStream4svATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexStream4svATI')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexStream4iATI(int stream, int x, int y, int z, int w) => _glVertexStream4iATI(stream, x, y, z, w);
  late final _glVertexStream4iATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glVertexStream4iATI')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexStream4ivATI(int stream, Pointer<Int> coords) => _glVertexStream4ivATI(stream, coords);
  late final _glVertexStream4ivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexStream4ivATI')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexStream4fATI(int stream, double x, double y, double z, double w) =>
      _glVertexStream4fATI(stream, x, y, z, w);
  late final _glVertexStream4fATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float)>>('glVertexStream4fATI')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void vertexStream4fvATI(int stream, Pointer<Float> coords) => _glVertexStream4fvATI(stream, coords);
  late final _glVertexStream4fvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexStream4fvATI')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexStream4dATI(int stream, double x, double y, double z, double w) =>
      _glVertexStream4dATI(stream, x, y, z, w);
  late final _glVertexStream4dATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double)>>('glVertexStream4dATI')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void vertexStream4dvATI(int stream, Pointer<Double> coords) => _glVertexStream4dvATI(stream, coords);
  late final _glVertexStream4dvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexStream4dvATI')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void normalStream3bATI(int stream, int nx, int ny, int nz) => _glNormalStream3bATI(stream, nx, ny, nz);
  late final _glNormalStream3bATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, SignedChar, SignedChar, SignedChar)>>('glNormalStream3bATI')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void normalStream3bvATI(int stream, Pointer<SignedChar> coords) => _glNormalStream3bvATI(stream, coords);
  late final _glNormalStream3bvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glNormalStream3bvATI')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void normalStream3sATI(int stream, int nx, int ny, int nz) => _glNormalStream3sATI(stream, nx, ny, nz);
  late final _glNormalStream3sATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short)>>('glNormalStream3sATI')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void normalStream3svATI(int stream, Pointer<Short> coords) => _glNormalStream3svATI(stream, coords);
  late final _glNormalStream3svATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glNormalStream3svATI')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void normalStream3iATI(int stream, int nx, int ny, int nz) => _glNormalStream3iATI(stream, nx, ny, nz);
  late final _glNormalStream3iATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glNormalStream3iATI')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void normalStream3ivATI(int stream, Pointer<Int> coords) => _glNormalStream3ivATI(stream, coords);
  late final _glNormalStream3ivATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glNormalStream3ivATI')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void normalStream3fATI(int stream, double nx, double ny, double nz) => _glNormalStream3fATI(stream, nx, ny, nz);
  late final _glNormalStream3fATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float)>>('glNormalStream3fATI')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void normalStream3fvATI(int stream, Pointer<Float> coords) => _glNormalStream3fvATI(stream, coords);
  late final _glNormalStream3fvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glNormalStream3fvATI')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void normalStream3dATI(int stream, double nx, double ny, double nz) => _glNormalStream3dATI(stream, nx, ny, nz);
  late final _glNormalStream3dATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glNormalStream3dATI')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void normalStream3dvATI(int stream, Pointer<Double> coords) => _glNormalStream3dvATI(stream, coords);
  late final _glNormalStream3dvATI =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glNormalStream3dvATI')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void clientActiveVertexStreamATI(int stream) => _glClientActiveVertexStreamATI(stream);
  late final _glClientActiveVertexStreamATI =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glClientActiveVertexStreamATI')
          .asFunction<void Function(int)>(isLeaf: true);

  void vertexBlendEnviATI(int pname, int param) => _glVertexBlendEnviATI(pname, param);
  late final _glVertexBlendEnviATI = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glVertexBlendEnviATI')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexBlendEnvfATI(int pname, double param) => _glVertexBlendEnvfATI(pname, param);
  late final _glVertexBlendEnvfATI = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glVertexBlendEnvfATI')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void eGLImageTargetTexStorageEXT(int target, Pointer<Void> image, Pointer<Int> attrib_list) =>
      _glEGLImageTargetTexStorageEXT(target, image, attrib_list);
  late final _glEGLImageTargetTexStorageEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>, Pointer<Int>)>>('glEGLImageTargetTexStorageEXT')
          .asFunction<void Function(int, Pointer<Void>, Pointer<Int>)>(isLeaf: true);

  void eGLImageTargetTextureStorageEXT(int texture, Pointer<Void> image, Pointer<Int> attrib_list) =>
      _glEGLImageTargetTextureStorageEXT(texture, image, attrib_list);
  late final _glEGLImageTargetTextureStorageEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>, Pointer<Int>)>>(
              'glEGLImageTargetTextureStorageEXT')
          .asFunction<void Function(int, Pointer<Void>, Pointer<Int>)>(isLeaf: true);

  void uniformBufferEXT(int program, int location, int buffer) => _glUniformBufferEXT(program, location, buffer);
  late final _glUniformBufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt)>>('glUniformBufferEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  int getUniformBufferSizeEXT(int program, int location) => _glGetUniformBufferSizeEXT(program, location);
  late final _glGetUniformBufferSizeEXT =
      _lookup<NativeFunction<Int Function(UnsignedInt, Int)>>('glGetUniformBufferSizeEXT')
          .asFunction<int Function(int, int)>(isLeaf: true);

  int getUniformOffsetEXT(int program, int location) => _glGetUniformOffsetEXT(program, location);
  late final _glGetUniformOffsetEXT = _lookup<NativeFunction<Long Function(UnsignedInt, Int)>>('glGetUniformOffsetEXT')
      .asFunction<int Function(int, int)>(isLeaf: true);

  void blendColorEXT(double red, double green, double blue, double alpha) => _glBlendColorEXT(red, green, blue, alpha);
  late final _glBlendColorEXT = _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glBlendColorEXT')
      .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void blendEquationSeparateEXT(int modeRGB, int modeAlpha) => _glBlendEquationSeparateEXT(modeRGB, modeAlpha);
  late final _glBlendEquationSeparateEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBlendEquationSeparateEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void blendFuncSeparateEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) =>
      _glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  late final _glBlendFuncSeparateEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glBlendFuncSeparateEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void blendEquationEXT(int mode) => _glBlendEquationEXT(mode);
  late final _glBlendEquationEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBlendEquationEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void colorSubTableEXT(int target, int start, int count, int format, int type, Pointer<Void> data) =>
      _glColorSubTableEXT(target, start, count, format, type, data);
  late final _glColorSubTableEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glColorSubTableEXT')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void copyColorSubTableEXT(int target, int start, int x, int y, int width) =>
      _glCopyColorSubTableEXT(target, start, x, y, width);
  late final _glCopyColorSubTableEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glCopyColorSubTableEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void lockArraysEXT(int first, int count) => _glLockArraysEXT(first, count);
  late final _glLockArraysEXT = _lookup<NativeFunction<Void Function(Int, Int)>>('glLockArraysEXT')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void unlockArraysEXT() => _glUnlockArraysEXT();
  late final _glUnlockArraysEXT =
      _lookup<NativeFunction<Void Function()>>('glUnlockArraysEXT').asFunction<void Function()>(isLeaf: true);

  void convolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, Pointer<Void> image) =>
      _glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
  late final _glConvolutionFilter1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glConvolutionFilter1DEXT')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void convolutionFilter2DEXT(
          int target, int internalformat, int width, int height, int format, int type, Pointer<Void> image) =>
      _glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
  late final _glConvolutionFilter2DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glConvolutionFilter2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void convolutionParameterfEXT(int target, int pname, double params) =>
      _glConvolutionParameterfEXT(target, pname, params);
  late final _glConvolutionParameterfEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glConvolutionParameterfEXT')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void convolutionParameterfvEXT(int target, int pname, Pointer<Float> params) =>
      _glConvolutionParameterfvEXT(target, pname, params);
  late final _glConvolutionParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glConvolutionParameterfvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void convolutionParameteriEXT(int target, int pname, int params) =>
      _glConvolutionParameteriEXT(target, pname, params);
  late final _glConvolutionParameteriEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glConvolutionParameteriEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void convolutionParameterivEXT(int target, int pname, Pointer<Int> params) =>
      _glConvolutionParameterivEXT(target, pname, params);
  late final _glConvolutionParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glConvolutionParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void copyConvolutionFilter1DEXT(int target, int internalformat, int x, int y, int width) =>
      _glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
  late final _glCopyConvolutionFilter1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int)>>('glCopyConvolutionFilter1DEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void copyConvolutionFilter2DEXT(int target, int internalformat, int x, int y, int width, int height) =>
      _glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
  late final _glCopyConvolutionFilter2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int)>>(
              'glCopyConvolutionFilter2DEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void getConvolutionFilterEXT(int target, int format, int type, Pointer<Void> image) =>
      _glGetConvolutionFilterEXT(target, format, type, image);
  late final _glGetConvolutionFilterEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glGetConvolutionFilterEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getConvolutionParameterfvEXT(int target, int pname, Pointer<Float> params) =>
      _glGetConvolutionParameterfvEXT(target, pname, params);
  late final _glGetConvolutionParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetConvolutionParameterfvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getConvolutionParameterivEXT(int target, int pname, Pointer<Int> params) =>
      _glGetConvolutionParameterivEXT(target, pname, params);
  late final _glGetConvolutionParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetConvolutionParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getSeparableFilterEXT(
          int target, int format, int type, Pointer<Void> row, Pointer<Void> column, Pointer<Void> span) =>
      _glGetSeparableFilterEXT(target, format, type, row, column, span);
  late final _glGetSeparableFilterEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>, Pointer<Void>,
                  Pointer<Void>)>>('glGetSeparableFilterEXT')
      .asFunction<void Function(int, int, int, Pointer<Void>, Pointer<Void>, Pointer<Void>)>(isLeaf: true);

  void separableFilter2DEXT(int target, int internalformat, int width, int height, int format, int type,
          Pointer<Void> row, Pointer<Void> column) =>
      _glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
  late final _glSeparableFilter2DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>,
                  Pointer<Void>)>>('glSeparableFilter2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>, Pointer<Void>)>(isLeaf: true);

  void tangent3bEXT(int tx, int ty, int tz) => _glTangent3bEXT(tx, ty, tz);
  late final _glTangent3bEXT =
      _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar)>>('glTangent3bEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void tangent3bvEXT(Pointer<SignedChar> v) => _glTangent3bvEXT(v);
  late final _glTangent3bvEXT = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glTangent3bvEXT')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void tangent3dEXT(double tx, double ty, double tz) => _glTangent3dEXT(tx, ty, tz);
  late final _glTangent3dEXT = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glTangent3dEXT')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void tangent3dvEXT(Pointer<Double> v) => _glTangent3dvEXT(v);
  late final _glTangent3dvEXT = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glTangent3dvEXT')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void tangent3fEXT(double tx, double ty, double tz) => _glTangent3fEXT(tx, ty, tz);
  late final _glTangent3fEXT = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glTangent3fEXT')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void tangent3fvEXT(Pointer<Float> v) => _glTangent3fvEXT(v);
  late final _glTangent3fvEXT = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glTangent3fvEXT')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void tangent3iEXT(int tx, int ty, int tz) => _glTangent3iEXT(tx, ty, tz);
  late final _glTangent3iEXT = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glTangent3iEXT')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void tangent3ivEXT(Pointer<Int> v) => _glTangent3ivEXT(v);
  late final _glTangent3ivEXT = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glTangent3ivEXT')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void tangent3sEXT(int tx, int ty, int tz) => _glTangent3sEXT(tx, ty, tz);
  late final _glTangent3sEXT = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glTangent3sEXT')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void tangent3svEXT(Pointer<Short> v) => _glTangent3svEXT(v);
  late final _glTangent3svEXT = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glTangent3svEXT')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void binormal3bEXT(int bx, int by, int bz) => _glBinormal3bEXT(bx, by, bz);
  late final _glBinormal3bEXT =
      _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar)>>('glBinormal3bEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void binormal3bvEXT(Pointer<SignedChar> v) => _glBinormal3bvEXT(v);
  late final _glBinormal3bvEXT = _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glBinormal3bvEXT')
      .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void binormal3dEXT(double bx, double by, double bz) => _glBinormal3dEXT(bx, by, bz);
  late final _glBinormal3dEXT = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glBinormal3dEXT')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void binormal3dvEXT(Pointer<Double> v) => _glBinormal3dvEXT(v);
  late final _glBinormal3dvEXT = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glBinormal3dvEXT')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void binormal3fEXT(double bx, double by, double bz) => _glBinormal3fEXT(bx, by, bz);
  late final _glBinormal3fEXT = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glBinormal3fEXT')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void binormal3fvEXT(Pointer<Float> v) => _glBinormal3fvEXT(v);
  late final _glBinormal3fvEXT = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glBinormal3fvEXT')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void binormal3iEXT(int bx, int by, int bz) => _glBinormal3iEXT(bx, by, bz);
  late final _glBinormal3iEXT = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glBinormal3iEXT')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void binormal3ivEXT(Pointer<Int> v) => _glBinormal3ivEXT(v);
  late final _glBinormal3ivEXT = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glBinormal3ivEXT')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void binormal3sEXT(int bx, int by, int bz) => _glBinormal3sEXT(bx, by, bz);
  late final _glBinormal3sEXT = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glBinormal3sEXT')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void binormal3svEXT(Pointer<Short> v) => _glBinormal3svEXT(v);
  late final _glBinormal3svEXT = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glBinormal3svEXT')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void tangentPointerEXT(int type, int stride, Pointer<Void> pointer) => _glTangentPointerEXT(type, stride, pointer);
  late final _glTangentPointerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glTangentPointerEXT')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void binormalPointerEXT(int type, int stride, Pointer<Void> pointer) => _glBinormalPointerEXT(type, stride, pointer);
  late final _glBinormalPointerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glBinormalPointerEXT')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void copyTexImage1DEXT(int target, int level, int internalformat, int x, int y, int width, int border) =>
      _glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
  late final _glCopyTexImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int)>>('glCopyTexImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void copyTexImage2DEXT(int target, int level, int internalformat, int x, int y, int width, int height, int border) =>
      _glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
  late final _glCopyTexImage2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Int)>>(
              'glCopyTexImage2DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void copyTexSubImage1DEXT(int target, int level, int xoffset, int x, int y, int width) =>
      _glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
  late final _glCopyTexSubImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int)>>('glCopyTexSubImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void copyTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) =>
      _glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
  late final _glCopyTexSubImage2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int)>>('glCopyTexSubImage2DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void copyTexSubImage3DEXT(
          int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) =>
      _glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  late final _glCopyTexSubImage3DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int)>>(
              'glCopyTexSubImage3DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void cullParameterdvEXT(int pname, Pointer<Double> params) => _glCullParameterdvEXT(pname, params);
  late final _glCullParameterdvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glCullParameterdvEXT')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void cullParameterfvEXT(int pname, Pointer<Float> params) => _glCullParameterfvEXT(pname, params);
  late final _glCullParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glCullParameterfvEXT')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void labelObjectEXT(int type, int object, int length, Pointer<Char> label) =>
      _glLabelObjectEXT(type, object, length, label);
  late final _glLabelObjectEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Char>)>>('glLabelObjectEXT')
          .asFunction<void Function(int, int, int, Pointer<Char>)>(isLeaf: true);

  void getObjectLabelEXT(int type, int object, int bufSize, Pointer<Int> length, Pointer<Char> label) =>
      _glGetObjectLabelEXT(type, object, bufSize, length, label);
  late final _glGetObjectLabelEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Char>)>>(
              'glGetObjectLabelEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Char>)>(isLeaf: true);

  void insertEventMarkerEXT(int length, Pointer<Char> marker) => _glInsertEventMarkerEXT(length, marker);
  late final _glInsertEventMarkerEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<Char>)>>('glInsertEventMarkerEXT')
          .asFunction<void Function(int, Pointer<Char>)>(isLeaf: true);

  void pushGroupMarkerEXT(int length, Pointer<Char> marker) => _glPushGroupMarkerEXT(length, marker);
  late final _glPushGroupMarkerEXT = _lookup<NativeFunction<Void Function(Int, Pointer<Char>)>>('glPushGroupMarkerEXT')
      .asFunction<void Function(int, Pointer<Char>)>(isLeaf: true);

  void popGroupMarkerEXT() => _glPopGroupMarkerEXT();
  late final _glPopGroupMarkerEXT =
      _lookup<NativeFunction<Void Function()>>('glPopGroupMarkerEXT').asFunction<void Function()>(isLeaf: true);

  void depthBoundsEXT(double zmin, double zmax) => _glDepthBoundsEXT(zmin, zmax);
  late final _glDepthBoundsEXT = _lookup<NativeFunction<Void Function(Double, Double)>>('glDepthBoundsEXT')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void matrixLoadfEXT(int mode, Pointer<Float> m) => _glMatrixLoadfEXT(mode, m);
  late final _glMatrixLoadfEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMatrixLoadfEXT')
      .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void matrixLoaddEXT(int mode, Pointer<Double> m) => _glMatrixLoaddEXT(mode, m);
  late final _glMatrixLoaddEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMatrixLoaddEXT')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void matrixMultfEXT(int mode, Pointer<Float> m) => _glMatrixMultfEXT(mode, m);
  late final _glMatrixMultfEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMatrixMultfEXT')
      .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void matrixMultdEXT(int mode, Pointer<Double> m) => _glMatrixMultdEXT(mode, m);
  late final _glMatrixMultdEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMatrixMultdEXT')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void matrixLoadIdentityEXT(int mode) => _glMatrixLoadIdentityEXT(mode);
  late final _glMatrixLoadIdentityEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMatrixLoadIdentityEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void matrixRotatefEXT(int mode, double angle, double x, double y, double z) =>
      _glMatrixRotatefEXT(mode, angle, x, y, z);
  late final _glMatrixRotatefEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float)>>('glMatrixRotatefEXT')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void matrixRotatedEXT(int mode, double angle, double x, double y, double z) =>
      _glMatrixRotatedEXT(mode, angle, x, y, z);
  late final _glMatrixRotatedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double)>>('glMatrixRotatedEXT')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void matrixScalefEXT(int mode, double x, double y, double z) => _glMatrixScalefEXT(mode, x, y, z);
  late final _glMatrixScalefEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float)>>('glMatrixScalefEXT')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void matrixScaledEXT(int mode, double x, double y, double z) => _glMatrixScaledEXT(mode, x, y, z);
  late final _glMatrixScaledEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glMatrixScaledEXT')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void matrixTranslatefEXT(int mode, double x, double y, double z) => _glMatrixTranslatefEXT(mode, x, y, z);
  late final _glMatrixTranslatefEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float)>>('glMatrixTranslatefEXT')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void matrixTranslatedEXT(int mode, double x, double y, double z) => _glMatrixTranslatedEXT(mode, x, y, z);
  late final _glMatrixTranslatedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glMatrixTranslatedEXT')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void matrixFrustumEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar) =>
      _glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
  late final _glMatrixFrustumEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double, Double, Double)>>(
              'glMatrixFrustumEXT')
          .asFunction<void Function(int, double, double, double, double, double, double)>(isLeaf: true);

  void matrixOrthoEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar) =>
      _glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
  late final _glMatrixOrthoEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double, Double, Double)>>(
              'glMatrixOrthoEXT')
          .asFunction<void Function(int, double, double, double, double, double, double)>(isLeaf: true);

  void matrixPopEXT(int mode) => _glMatrixPopEXT(mode);
  late final _glMatrixPopEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMatrixPopEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void matrixPushEXT(int mode) => _glMatrixPushEXT(mode);
  late final _glMatrixPushEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMatrixPushEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void clientAttribDefaultEXT(int mask) => _glClientAttribDefaultEXT(mask);
  late final _glClientAttribDefaultEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glClientAttribDefaultEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void pushClientAttribDefaultEXT(int mask) => _glPushClientAttribDefaultEXT(mask);
  late final _glPushClientAttribDefaultEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glPushClientAttribDefaultEXT')
          .asFunction<void Function(int)>(isLeaf: true);

  void textureParameterfEXT(int texture, int target, int pname, double param) =>
      _glTextureParameterfEXT(texture, target, pname, param);
  late final _glTextureParameterfEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Float)>>('glTextureParameterfEXT')
          .asFunction<void Function(int, int, int, double)>(isLeaf: true);

  void textureParameterfvEXT(int texture, int target, int pname, Pointer<Float> params) =>
      _glTextureParameterfvEXT(texture, target, pname, params);
  late final _glTextureParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glTextureParameterfvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void textureParameteriEXT(int texture, int target, int pname, int param) =>
      _glTextureParameteriEXT(texture, target, pname, param);
  late final _glTextureParameteriEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>('glTextureParameteriEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void textureParameterivEXT(int texture, int target, int pname, Pointer<Int> params) =>
      _glTextureParameterivEXT(texture, target, pname, params);
  late final _glTextureParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glTextureParameterivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void textureImage1DEXT(int texture, int target, int level, int internalformat, int width, int border, int format,
          int type, Pointer<Void> pixels) =>
      _glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
  late final _glTextureImage1DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTextureImage1DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void textureImage2DEXT(int texture, int target, int level, int internalformat, int width, int height, int border,
          int format, int type, Pointer<Void> pixels) =>
      _glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
  late final _glTextureImage2DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTextureImage2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void textureSubImage1DEXT(
          int texture, int target, int level, int xoffset, int width, int format, int type, Pointer<Void> pixels) =>
      _glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
  late final _glTextureSubImage1DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTextureSubImage1DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void textureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int width, int height,
          int format, int type, Pointer<Void> pixels) =>
      _glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
  late final _glTextureSubImage2DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTextureSubImage2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void copyTextureImage1DEXT(
          int texture, int target, int level, int internalformat, int x, int y, int width, int border) =>
      _glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
  late final _glCopyTextureImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int)>>(
              'glCopyTextureImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void copyTextureImage2DEXT(
          int texture, int target, int level, int internalformat, int x, int y, int width, int height, int border) =>
      _glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
  late final _glCopyTextureImage2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Int)>>(
              'glCopyTextureImage2DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void copyTextureSubImage1DEXT(int texture, int target, int level, int xoffset, int x, int y, int width) =>
      _glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
  late final _glCopyTextureSubImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int)>>(
              'glCopyTextureSubImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void copyTextureSubImage2DEXT(
          int texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) =>
      _glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
  late final _glCopyTextureSubImage2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, Int)>>(
              'glCopyTextureSubImage2DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void getTextureImageEXT(int texture, int target, int level, int format, int type, Pointer<Void> pixels) =>
      _glGetTextureImageEXT(texture, target, level, format, type, pixels);
  late final _glGetTextureImageEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glGetTextureImageEXT')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getTextureParameterfvEXT(int texture, int target, int pname, Pointer<Float> params) =>
      _glGetTextureParameterfvEXT(texture, target, pname, params);
  late final _glGetTextureParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetTextureParameterfvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getTextureParameterivEXT(int texture, int target, int pname, Pointer<Int> params) =>
      _glGetTextureParameterivEXT(texture, target, pname, params);
  late final _glGetTextureParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetTextureParameterivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getTextureLevelParameterfvEXT(int texture, int target, int level, int pname, Pointer<Float> params) =>
      _glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
  late final _glGetTextureLevelParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Pointer<Float>)>>(
              'glGetTextureLevelParameterfvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void getTextureLevelParameterivEXT(int texture, int target, int level, int pname, Pointer<Int> params) =>
      _glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
  late final _glGetTextureLevelParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Pointer<Int>)>>(
              'glGetTextureLevelParameterivEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Int>)>(isLeaf: true);

  void textureImage3DEXT(int texture, int target, int level, int internalformat, int width, int height, int depth,
          int border, int format, int type, Pointer<Void> pixels) =>
      _glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
  late final _glTextureImage3DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTextureImage3DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void textureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width,
          int height, int depth, int format, int type, Pointer<Void> pixels) =>
      _glTextureSubImage3DEXT(
          texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  late final _glTextureSubImage3DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTextureSubImage3DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void copyTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y,
          int width, int height) =>
      _glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  late final _glCopyTextureSubImage3DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int)>>(
              'glCopyTextureSubImage3DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void bindMultiTextureEXT(int texunit, int target, int texture) => _glBindMultiTextureEXT(texunit, target, texture);
  late final _glBindMultiTextureEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBindMultiTextureEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoordPointerEXT(int texunit, int size, int type, int stride, Pointer<Void> pointer) =>
      _glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
  late final _glMultiTexCoordPointerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glMultiTexCoordPointerEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void multiTexEnvfEXT(int texunit, int target, int pname, double param) =>
      _glMultiTexEnvfEXT(texunit, target, pname, param);
  late final _glMultiTexEnvfEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Float)>>('glMultiTexEnvfEXT')
          .asFunction<void Function(int, int, int, double)>(isLeaf: true);

  void multiTexEnvfvEXT(int texunit, int target, int pname, Pointer<Float> params) =>
      _glMultiTexEnvfvEXT(texunit, target, pname, params);
  late final _glMultiTexEnvfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glMultiTexEnvfvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void multiTexEnviEXT(int texunit, int target, int pname, int param) =>
      _glMultiTexEnviEXT(texunit, target, pname, param);
  late final _glMultiTexEnviEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>('glMultiTexEnviEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexEnvivEXT(int texunit, int target, int pname, Pointer<Int> params) =>
      _glMultiTexEnvivEXT(texunit, target, pname, params);
  late final _glMultiTexEnvivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>('glMultiTexEnvivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void multiTexGendEXT(int texunit, int coord, int pname, double param) =>
      _glMultiTexGendEXT(texunit, coord, pname, param);
  late final _glMultiTexGendEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Double)>>('glMultiTexGendEXT')
          .asFunction<void Function(int, int, int, double)>(isLeaf: true);

  void multiTexGendvEXT(int texunit, int coord, int pname, Pointer<Double> params) =>
      _glMultiTexGendvEXT(texunit, coord, pname, params);
  late final _glMultiTexGendvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Double>)>>(
              'glMultiTexGendvEXT')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void multiTexGenfEXT(int texunit, int coord, int pname, double param) =>
      _glMultiTexGenfEXT(texunit, coord, pname, param);
  late final _glMultiTexGenfEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Float)>>('glMultiTexGenfEXT')
          .asFunction<void Function(int, int, int, double)>(isLeaf: true);

  void multiTexGenfvEXT(int texunit, int coord, int pname, Pointer<Float> params) =>
      _glMultiTexGenfvEXT(texunit, coord, pname, params);
  late final _glMultiTexGenfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glMultiTexGenfvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void multiTexGeniEXT(int texunit, int coord, int pname, int param) =>
      _glMultiTexGeniEXT(texunit, coord, pname, param);
  late final _glMultiTexGeniEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>('glMultiTexGeniEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexGenivEXT(int texunit, int coord, int pname, Pointer<Int> params) =>
      _glMultiTexGenivEXT(texunit, coord, pname, params);
  late final _glMultiTexGenivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>('glMultiTexGenivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getMultiTexEnvfvEXT(int texunit, int target, int pname, Pointer<Float> params) =>
      _glGetMultiTexEnvfvEXT(texunit, target, pname, params);
  late final _glGetMultiTexEnvfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetMultiTexEnvfvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getMultiTexEnvivEXT(int texunit, int target, int pname, Pointer<Int> params) =>
      _glGetMultiTexEnvivEXT(texunit, target, pname, params);
  late final _glGetMultiTexEnvivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetMultiTexEnvivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getMultiTexGendvEXT(int texunit, int coord, int pname, Pointer<Double> params) =>
      _glGetMultiTexGendvEXT(texunit, coord, pname, params);
  late final _glGetMultiTexGendvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Double>)>>(
              'glGetMultiTexGendvEXT')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void getMultiTexGenfvEXT(int texunit, int coord, int pname, Pointer<Float> params) =>
      _glGetMultiTexGenfvEXT(texunit, coord, pname, params);
  late final _glGetMultiTexGenfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetMultiTexGenfvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getMultiTexGenivEXT(int texunit, int coord, int pname, Pointer<Int> params) =>
      _glGetMultiTexGenivEXT(texunit, coord, pname, params);
  late final _glGetMultiTexGenivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetMultiTexGenivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void multiTexParameteriEXT(int texunit, int target, int pname, int param) =>
      _glMultiTexParameteriEXT(texunit, target, pname, param);
  late final _glMultiTexParameteriEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>('glMultiTexParameteriEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexParameterivEXT(int texunit, int target, int pname, Pointer<Int> params) =>
      _glMultiTexParameterivEXT(texunit, target, pname, params);
  late final _glMultiTexParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glMultiTexParameterivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void multiTexParameterfEXT(int texunit, int target, int pname, double param) =>
      _glMultiTexParameterfEXT(texunit, target, pname, param);
  late final _glMultiTexParameterfEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Float)>>('glMultiTexParameterfEXT')
          .asFunction<void Function(int, int, int, double)>(isLeaf: true);

  void multiTexParameterfvEXT(int texunit, int target, int pname, Pointer<Float> params) =>
      _glMultiTexParameterfvEXT(texunit, target, pname, params);
  late final _glMultiTexParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glMultiTexParameterfvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void multiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int format,
          int type, Pointer<Void> pixels) =>
      _glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
  late final _glMultiTexImage1DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glMultiTexImage1DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void multiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border,
          int format, int type, Pointer<Void> pixels) =>
      _glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
  late final _glMultiTexImage2DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glMultiTexImage2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void multiTexSubImage1DEXT(
          int texunit, int target, int level, int xoffset, int width, int format, int type, Pointer<Void> pixels) =>
      _glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
  late final _glMultiTexSubImage1DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glMultiTexSubImage1DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void multiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height,
          int format, int type, Pointer<Void> pixels) =>
      _glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
  late final _glMultiTexSubImage2DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glMultiTexSubImage2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void copyMultiTexImage1DEXT(
          int texunit, int target, int level, int internalformat, int x, int y, int width, int border) =>
      _glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
  late final _glCopyMultiTexImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int)>>(
              'glCopyMultiTexImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void copyMultiTexImage2DEXT(
          int texunit, int target, int level, int internalformat, int x, int y, int width, int height, int border) =>
      _glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
  late final _glCopyMultiTexImage2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Int)>>(
              'glCopyMultiTexImage2DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void copyMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int x, int y, int width) =>
      _glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
  late final _glCopyMultiTexSubImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int)>>(
              'glCopyMultiTexSubImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void copyMultiTexSubImage2DEXT(
          int texunit, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) =>
      _glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
  late final _glCopyMultiTexSubImage2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, Int)>>(
              'glCopyMultiTexSubImage2DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void getMultiTexImageEXT(int texunit, int target, int level, int format, int type, Pointer<Void> pixels) =>
      _glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
  late final _glGetMultiTexImageEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glGetMultiTexImageEXT')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getMultiTexParameterfvEXT(int texunit, int target, int pname, Pointer<Float> params) =>
      _glGetMultiTexParameterfvEXT(texunit, target, pname, params);
  late final _glGetMultiTexParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetMultiTexParameterfvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getMultiTexParameterivEXT(int texunit, int target, int pname, Pointer<Int> params) =>
      _glGetMultiTexParameterivEXT(texunit, target, pname, params);
  late final _glGetMultiTexParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetMultiTexParameterivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getMultiTexLevelParameterfvEXT(int texunit, int target, int level, int pname, Pointer<Float> params) =>
      _glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
  late final _glGetMultiTexLevelParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Pointer<Float>)>>(
              'glGetMultiTexLevelParameterfvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void getMultiTexLevelParameterivEXT(int texunit, int target, int level, int pname, Pointer<Int> params) =>
      _glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
  late final _glGetMultiTexLevelParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Pointer<Int>)>>(
              'glGetMultiTexLevelParameterivEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Int>)>(isLeaf: true);

  void multiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth,
          int border, int format, int type, Pointer<Void> pixels) =>
      _glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
  late final _glMultiTexImage3DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glMultiTexImage3DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void multiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width,
          int height, int depth, int format, int type, Pointer<Void> pixels) =>
      _glMultiTexSubImage3DEXT(
          texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  late final _glMultiTexSubImage3DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glMultiTexSubImage3DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void copyMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int x,
          int y, int width, int height) =>
      _glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  late final _glCopyMultiTexSubImage3DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int)>>(
              'glCopyMultiTexSubImage3DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void enableClientStateIndexedEXT(int array, int index) => _glEnableClientStateIndexedEXT(array, index);
  late final _glEnableClientStateIndexedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glEnableClientStateIndexedEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void disableClientStateIndexedEXT(int array, int index) => _glDisableClientStateIndexedEXT(array, index);
  late final _glDisableClientStateIndexedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDisableClientStateIndexedEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void getFloatIndexedvEXT(int target, int index, Pointer<Float> data) => _glGetFloatIndexedvEXT(target, index, data);
  late final _glGetFloatIndexedvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetFloatIndexedvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getDoubleIndexedvEXT(int target, int index, Pointer<Double> data) =>
      _glGetDoubleIndexedvEXT(target, index, data);
  late final _glGetDoubleIndexedvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetDoubleIndexedvEXT')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void getPointerIndexedvEXT(int target, int index, Pointer<Pointer<Void>> data) =>
      _glGetPointerIndexedvEXT(target, index, data);
  late final _glGetPointerIndexedvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>(
              'glGetPointerIndexedvEXT')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void enableIndexedEXT(int target, int index) => _glEnableIndexedEXT(target, index);
  late final _glEnableIndexedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glEnableIndexedEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void disableIndexedEXT(int target, int index) => _glDisableIndexedEXT(target, index);
  late final _glDisableIndexedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDisableIndexedEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  int isEnabledIndexedEXT(int target, int index) => _glIsEnabledIndexedEXT(target, index);
  late final _glIsEnabledIndexedEXT =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt, UnsignedInt)>>('glIsEnabledIndexedEXT')
          .asFunction<int Function(int, int)>(isLeaf: true);

  void getIntegerIndexedvEXT(int target, int index, Pointer<Int> data) => _glGetIntegerIndexedvEXT(target, index, data);
  late final _glGetIntegerIndexedvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetIntegerIndexedvEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getBooleanIndexedvEXT(int target, int index, Pointer<UnsignedChar> data) =>
      _glGetBooleanIndexedvEXT(target, index, data);
  late final _glGetBooleanIndexedvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedChar>)>>('glGetBooleanIndexedvEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void compressedTextureImage3DEXT(int texture, int target, int level, int internalformat, int width, int height,
          int depth, int border, int imageSize, Pointer<Void> bits) =>
      _glCompressedTextureImage3DEXT(
          texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
  late final _glCompressedTextureImage3DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Int,
                  Pointer<Void>)>>('glCompressedTextureImage3DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTextureImage2DEXT(int texture, int target, int level, int internalformat, int width, int height,
          int border, int imageSize, Pointer<Void> bits) =>
      _glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
  late final _glCompressedTextureImage2DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int,
                  Pointer<Void>)>>('glCompressedTextureImage2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTextureImage1DEXT(int texture, int target, int level, int internalformat, int width, int border,
          int imageSize, Pointer<Void> bits) =>
      _glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
  late final _glCompressedTextureImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, Pointer<Void>)>>(
              'glCompressedTextureImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset,
          int width, int height, int depth, int format, int imageSize, Pointer<Void> bits) =>
      _glCompressedTextureSubImage3DEXT(
          texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  late final _glCompressedTextureSubImage3DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, Int,
                  Pointer<Void>)>>('glCompressedTextureSubImage3DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTextureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int width,
          int height, int format, int imageSize, Pointer<Void> bits) =>
      _glCompressedTextureSubImage2DEXT(
          texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  late final _glCompressedTextureSubImage2DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, Int,
                  Pointer<Void>)>>('glCompressedTextureSubImage2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedTextureSubImage1DEXT(
          int texture, int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void> bits) =>
      _glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
  late final _glCompressedTextureSubImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glCompressedTextureSubImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getCompressedTextureImageEXT(int texture, int target, int lod, Pointer<Void> img) =>
      _glGetCompressedTextureImageEXT(texture, target, lod, img);
  late final _glGetCompressedTextureImageEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetCompressedTextureImageEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height,
          int depth, int border, int imageSize, Pointer<Void> bits) =>
      _glCompressedMultiTexImage3DEXT(
          texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
  late final _glCompressedMultiTexImage3DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Int,
                  Pointer<Void>)>>('glCompressedMultiTexImage3DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height,
          int border, int imageSize, Pointer<Void> bits) =>
      _glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
  late final _glCompressedMultiTexImage2DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int,
                  Pointer<Void>)>>('glCompressedMultiTexImage2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border,
          int imageSize, Pointer<Void> bits) =>
      _glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
  late final _glCompressedMultiTexImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, Pointer<Void>)>>(
              'glCompressedMultiTexImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset,
          int width, int height, int depth, int format, int imageSize, Pointer<Void> bits) =>
      _glCompressedMultiTexSubImage3DEXT(
          texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  late final _glCompressedMultiTexSubImage3DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, Int,
                  Pointer<Void>)>>('glCompressedMultiTexSubImage3DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width,
          int height, int format, int imageSize, Pointer<Void> bits) =>
      _glCompressedMultiTexSubImage2DEXT(
          texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  late final _glCompressedMultiTexSubImage2DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, Int,
                  Pointer<Void>)>>('glCompressedMultiTexSubImage2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void compressedMultiTexSubImage1DEXT(
          int texunit, int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void> bits) =>
      _glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
  late final _glCompressedMultiTexSubImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glCompressedMultiTexSubImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getCompressedMultiTexImageEXT(int texunit, int target, int lod, Pointer<Void> img) =>
      _glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
  late final _glGetCompressedMultiTexImageEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glGetCompressedMultiTexImageEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void matrixLoadTransposefEXT(int mode, Pointer<Float> m) => _glMatrixLoadTransposefEXT(mode, m);
  late final _glMatrixLoadTransposefEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMatrixLoadTransposefEXT')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void matrixLoadTransposedEXT(int mode, Pointer<Double> m) => _glMatrixLoadTransposedEXT(mode, m);
  late final _glMatrixLoadTransposedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMatrixLoadTransposedEXT')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void matrixMultTransposefEXT(int mode, Pointer<Float> m) => _glMatrixMultTransposefEXT(mode, m);
  late final _glMatrixMultTransposefEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMatrixMultTransposefEXT')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void matrixMultTransposedEXT(int mode, Pointer<Double> m) => _glMatrixMultTransposedEXT(mode, m);
  late final _glMatrixMultTransposedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glMatrixMultTransposedEXT')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void namedBufferDataEXT(int buffer, int size, Pointer<Void> data, int usage) =>
      _glNamedBufferDataEXT(buffer, size, data, usage);
  late final _glNamedBufferDataEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Pointer<Void>, UnsignedInt)>>('glNamedBufferDataEXT')
          .asFunction<void Function(int, int, Pointer<Void>, int)>(isLeaf: true);

  void namedBufferSubDataEXT(int buffer, int offset, int size, Pointer<Void> data) =>
      _glNamedBufferSubDataEXT(buffer, offset, size, data);
  late final _glNamedBufferSubDataEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, Pointer<Void>)>>('glNamedBufferSubDataEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  Pointer<Void> mapNamedBufferEXT(int buffer, int access) => _glMapNamedBufferEXT(buffer, access);
  late final _glMapNamedBufferEXT =
      _lookup<NativeFunction<Pointer<Void> Function(UnsignedInt, UnsignedInt)>>('glMapNamedBufferEXT')
          .asFunction<Pointer<Void> Function(int, int)>(isLeaf: true);

  int unmapNamedBufferEXT(int buffer) => _glUnmapNamedBufferEXT(buffer);
  late final _glUnmapNamedBufferEXT =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glUnmapNamedBufferEXT')
          .asFunction<int Function(int)>(isLeaf: true);

  void getNamedBufferParameterivEXT(int buffer, int pname, Pointer<Int> params) =>
      _glGetNamedBufferParameterivEXT(buffer, pname, params);
  late final _glGetNamedBufferParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetNamedBufferParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getNamedBufferPointervEXT(int buffer, int pname, Pointer<Pointer<Void>> params) =>
      _glGetNamedBufferPointervEXT(buffer, pname, params);
  late final _glGetNamedBufferPointervEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>(
              'glGetNamedBufferPointervEXT')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void getNamedBufferSubDataEXT(int buffer, int offset, int size, Pointer<Void> data) =>
      _glGetNamedBufferSubDataEXT(buffer, offset, size, data);
  late final _glGetNamedBufferSubDataEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, Pointer<Void>)>>('glGetNamedBufferSubDataEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void programUniform1fEXT(int program, int location, double v0) => _glProgramUniform1fEXT(program, location, v0);
  late final _glProgramUniform1fEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Float)>>('glProgramUniform1fEXT')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void programUniform2fEXT(int program, int location, double v0, double v1) =>
      _glProgramUniform2fEXT(program, location, v0, v1);
  late final _glProgramUniform2fEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Float, Float)>>('glProgramUniform2fEXT')
          .asFunction<void Function(int, int, double, double)>(isLeaf: true);

  void programUniform3fEXT(int program, int location, double v0, double v1, double v2) =>
      _glProgramUniform3fEXT(program, location, v0, v1, v2);
  late final _glProgramUniform3fEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Float, Float, Float)>>('glProgramUniform3fEXT')
          .asFunction<void Function(int, int, double, double, double)>(isLeaf: true);

  void programUniform4fEXT(int program, int location, double v0, double v1, double v2, double v3) =>
      _glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
  late final _glProgramUniform4fEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Float, Float, Float, Float)>>('glProgramUniform4fEXT')
          .asFunction<void Function(int, int, double, double, double, double)>(isLeaf: true);

  void programUniform1iEXT(int program, int location, int v0) => _glProgramUniform1iEXT(program, location, v0);
  late final _glProgramUniform1iEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glProgramUniform1iEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniform2iEXT(int program, int location, int v0, int v1) =>
      _glProgramUniform2iEXT(program, location, v0, v1);
  late final _glProgramUniform2iEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glProgramUniform2iEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void programUniform3iEXT(int program, int location, int v0, int v1, int v2) =>
      _glProgramUniform3iEXT(program, location, v0, v1, v2);
  late final _glProgramUniform3iEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glProgramUniform3iEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void programUniform4iEXT(int program, int location, int v0, int v1, int v2, int v3) =>
      _glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
  late final _glProgramUniform4iEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int)>>('glProgramUniform4iEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programUniform1fvEXT(int program, int location, int count, Pointer<Float> value) =>
      _glProgramUniform1fvEXT(program, location, count, value);
  late final _glProgramUniform1fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Float>)>>('glProgramUniform1fvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniform2fvEXT(int program, int location, int count, Pointer<Float> value) =>
      _glProgramUniform2fvEXT(program, location, count, value);
  late final _glProgramUniform2fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Float>)>>('glProgramUniform2fvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniform3fvEXT(int program, int location, int count, Pointer<Float> value) =>
      _glProgramUniform3fvEXT(program, location, count, value);
  late final _glProgramUniform3fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Float>)>>('glProgramUniform3fvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniform4fvEXT(int program, int location, int count, Pointer<Float> value) =>
      _glProgramUniform4fvEXT(program, location, count, value);
  late final _glProgramUniform4fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Float>)>>('glProgramUniform4fvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniform1ivEXT(int program, int location, int count, Pointer<Int> value) =>
      _glProgramUniform1ivEXT(program, location, count, value);
  late final _glProgramUniform1ivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int>)>>('glProgramUniform1ivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void programUniform2ivEXT(int program, int location, int count, Pointer<Int> value) =>
      _glProgramUniform2ivEXT(program, location, count, value);
  late final _glProgramUniform2ivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int>)>>('glProgramUniform2ivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void programUniform3ivEXT(int program, int location, int count, Pointer<Int> value) =>
      _glProgramUniform3ivEXT(program, location, count, value);
  late final _glProgramUniform3ivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int>)>>('glProgramUniform3ivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void programUniform4ivEXT(int program, int location, int count, Pointer<Int> value) =>
      _glProgramUniform4ivEXT(program, location, count, value);
  late final _glProgramUniform4ivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Int>)>>('glProgramUniform4ivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void programUniformMatrix2fvEXT(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix2fvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix3fvEXT(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix3fvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix4fvEXT(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix4fvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix2x3fvEXT(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2x3fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix2x3fvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix3x2fvEXT(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3x2fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix3x2fvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix2x4fvEXT(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2x4fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix2x4fvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix4x2fvEXT(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4x2fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix4x2fvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix3x4fvEXT(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3x4fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix3x4fvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programUniformMatrix4x3fvEXT(int program, int location, int count, int transpose, Pointer<Float> value) =>
      _glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4x3fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Float>)>>(
              'glProgramUniformMatrix4x3fvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void textureBufferEXT(int texture, int target, int internalformat, int buffer) =>
      _glTextureBufferEXT(texture, target, internalformat, buffer);
  late final _glTextureBufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glTextureBufferEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexBufferEXT(int texunit, int target, int internalformat, int buffer) =>
      _glMultiTexBufferEXT(texunit, target, internalformat, buffer);
  late final _glMultiTexBufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glMultiTexBufferEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void textureParameterIivEXT(int texture, int target, int pname, Pointer<Int> params) =>
      _glTextureParameterIivEXT(texture, target, pname, params);
  late final _glTextureParameterIivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glTextureParameterIivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void textureParameterIuivEXT(int texture, int target, int pname, Pointer<UnsignedInt> params) =>
      _glTextureParameterIuivEXT(texture, target, pname, params);
  late final _glTextureParameterIuivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glTextureParameterIuivEXT')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getTextureParameterIivEXT(int texture, int target, int pname, Pointer<Int> params) =>
      _glGetTextureParameterIivEXT(texture, target, pname, params);
  late final _glGetTextureParameterIivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetTextureParameterIivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getTextureParameterIuivEXT(int texture, int target, int pname, Pointer<UnsignedInt> params) =>
      _glGetTextureParameterIuivEXT(texture, target, pname, params);
  late final _glGetTextureParameterIuivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glGetTextureParameterIuivEXT')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void multiTexParameterIivEXT(int texunit, int target, int pname, Pointer<Int> params) =>
      _glMultiTexParameterIivEXT(texunit, target, pname, params);
  late final _glMultiTexParameterIivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glMultiTexParameterIivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void multiTexParameterIuivEXT(int texunit, int target, int pname, Pointer<UnsignedInt> params) =>
      _glMultiTexParameterIuivEXT(texunit, target, pname, params);
  late final _glMultiTexParameterIuivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glMultiTexParameterIuivEXT')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getMultiTexParameterIivEXT(int texunit, int target, int pname, Pointer<Int> params) =>
      _glGetMultiTexParameterIivEXT(texunit, target, pname, params);
  late final _glGetMultiTexParameterIivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetMultiTexParameterIivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getMultiTexParameterIuivEXT(int texunit, int target, int pname, Pointer<UnsignedInt> params) =>
      _glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
  late final _glGetMultiTexParameterIuivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glGetMultiTexParameterIuivEXT')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programUniform1uiEXT(int program, int location, int v0) => _glProgramUniform1uiEXT(program, location, v0);
  late final _glProgramUniform1uiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt)>>('glProgramUniform1uiEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniform2uiEXT(int program, int location, int v0, int v1) =>
      _glProgramUniform2uiEXT(program, location, v0, v1);
  late final _glProgramUniform2uiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt)>>('glProgramUniform2uiEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void programUniform3uiEXT(int program, int location, int v0, int v1, int v2) =>
      _glProgramUniform3uiEXT(program, location, v0, v1, v2);
  late final _glProgramUniform3uiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glProgramUniform3uiEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void programUniform4uiEXT(int program, int location, int v0, int v1, int v2, int v3) =>
      _glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
  late final _glProgramUniform4uiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glProgramUniform4uiEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programUniform1uivEXT(int program, int location, int count, Pointer<UnsignedInt> value) =>
      _glProgramUniform1uivEXT(program, location, count, value);
  late final _glProgramUniform1uivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>('glProgramUniform1uivEXT')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programUniform2uivEXT(int program, int location, int count, Pointer<UnsignedInt> value) =>
      _glProgramUniform2uivEXT(program, location, count, value);
  late final _glProgramUniform2uivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>('glProgramUniform2uivEXT')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programUniform3uivEXT(int program, int location, int count, Pointer<UnsignedInt> value) =>
      _glProgramUniform3uivEXT(program, location, count, value);
  late final _glProgramUniform3uivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>('glProgramUniform3uivEXT')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programUniform4uivEXT(int program, int location, int count, Pointer<UnsignedInt> value) =>
      _glProgramUniform4uivEXT(program, location, count, value);
  late final _glProgramUniform4uivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>('glProgramUniform4uivEXT')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void namedProgramLocalParameters4fvEXT(int program, int target, int index, int count, Pointer<Float> params) =>
      _glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
  late final _glNamedProgramLocalParameters4fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glNamedProgramLocalParameters4fvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void namedProgramLocalParameterI4iEXT(int program, int target, int index, int x, int y, int z, int w) =>
      _glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
  late final _glNamedProgramLocalParameterI4iEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int, Int, Int)>>(
              'glNamedProgramLocalParameterI4iEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void namedProgramLocalParameterI4ivEXT(int program, int target, int index, Pointer<Int> params) =>
      _glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
  late final _glNamedProgramLocalParameterI4ivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glNamedProgramLocalParameterI4ivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void namedProgramLocalParametersI4ivEXT(int program, int target, int index, int count, Pointer<Int> params) =>
      _glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
  late final _glNamedProgramLocalParametersI4ivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Int>)>>(
              'glNamedProgramLocalParametersI4ivEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Int>)>(isLeaf: true);

  void namedProgramLocalParameterI4uiEXT(int program, int target, int index, int x, int y, int z, int w) =>
      _glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
  late final _glNamedProgramLocalParameterI4uiEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt)>>('glNamedProgramLocalParameterI4uiEXT')
      .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void namedProgramLocalParameterI4uivEXT(int program, int target, int index, Pointer<UnsignedInt> params) =>
      _glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
  late final _glNamedProgramLocalParameterI4uivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glNamedProgramLocalParameterI4uivEXT')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void namedProgramLocalParametersI4uivEXT(
          int program, int target, int index, int count, Pointer<UnsignedInt> params) =>
      _glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
  late final _glNamedProgramLocalParametersI4uivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>)>>(
              'glNamedProgramLocalParametersI4uivEXT')
          .asFunction<void Function(int, int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getNamedProgramLocalParameterIivEXT(int program, int target, int index, Pointer<Int> params) =>
      _glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
  late final _glGetNamedProgramLocalParameterIivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetNamedProgramLocalParameterIivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getNamedProgramLocalParameterIuivEXT(int program, int target, int index, Pointer<UnsignedInt> params) =>
      _glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
  late final _glGetNamedProgramLocalParameterIuivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glGetNamedProgramLocalParameterIuivEXT')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void enableClientStateiEXT(int array, int index) => _glEnableClientStateiEXT(array, index);
  late final _glEnableClientStateiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glEnableClientStateiEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void disableClientStateiEXT(int array, int index) => _glDisableClientStateiEXT(array, index);
  late final _glDisableClientStateiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDisableClientStateiEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void glGetFloati_vEXT(int pname, int index, Pointer<Float> params) => _glGetFloati_vEXT(pname, index, params);
  late final _glGetFloati_vEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetFloati_vEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getDoublei_vEXT(int pname, int index, Pointer<Double> params) => _glGetDoublei_vEXT(pname, index, params);
  late final _glGetDoublei_vEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetDoublei_vEXT')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void getPointeri_vEXT(int pname, int index, Pointer<Pointer<Void>> params) =>
      _glGetPointeri_vEXT(pname, index, params);
  late final _glGetPointeri_vEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>('glGetPointeri_vEXT')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void namedProgramStringEXT(int program, int target, int format, int len, Pointer<Void> string) =>
      _glNamedProgramStringEXT(program, target, format, len, string);
  late final _glNamedProgramStringEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>(
              'glNamedProgramStringEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void namedProgramLocalParameter4dEXT(int program, int target, int index, double x, double y, double z, double w) =>
      _glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
  late final _glNamedProgramLocalParameter4dEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Double, Double, Double, Double)>>(
              'glNamedProgramLocalParameter4dEXT')
          .asFunction<void Function(int, int, int, double, double, double, double)>(isLeaf: true);

  void namedProgramLocalParameter4dvEXT(int program, int target, int index, Pointer<Double> params) =>
      _glNamedProgramLocalParameter4dvEXT(program, target, index, params);
  late final _glNamedProgramLocalParameter4dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Double>)>>(
              'glNamedProgramLocalParameter4dvEXT')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void namedProgramLocalParameter4fEXT(int program, int target, int index, double x, double y, double z, double w) =>
      _glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
  late final _glNamedProgramLocalParameter4fEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Float, Float, Float, Float)>>(
              'glNamedProgramLocalParameter4fEXT')
          .asFunction<void Function(int, int, int, double, double, double, double)>(isLeaf: true);

  void namedProgramLocalParameter4fvEXT(int program, int target, int index, Pointer<Float> params) =>
      _glNamedProgramLocalParameter4fvEXT(program, target, index, params);
  late final _glNamedProgramLocalParameter4fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glNamedProgramLocalParameter4fvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getNamedProgramLocalParameterdvEXT(int program, int target, int index, Pointer<Double> params) =>
      _glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
  late final _glGetNamedProgramLocalParameterdvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Double>)>>(
              'glGetNamedProgramLocalParameterdvEXT')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void getNamedProgramLocalParameterfvEXT(int program, int target, int index, Pointer<Float> params) =>
      _glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
  late final _glGetNamedProgramLocalParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetNamedProgramLocalParameterfvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getNamedProgramivEXT(int program, int target, int pname, Pointer<Int> params) =>
      _glGetNamedProgramivEXT(program, target, pname, params);
  late final _glGetNamedProgramivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetNamedProgramivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getNamedProgramStringEXT(int program, int target, int pname, Pointer<Void> string) =>
      _glGetNamedProgramStringEXT(program, target, pname, string);
  late final _glGetNamedProgramStringEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glGetNamedProgramStringEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void namedRenderbufferStorageEXT(int renderbuffer, int internalformat, int width, int height) =>
      _glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
  late final _glNamedRenderbufferStorageEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int)>>('glNamedRenderbufferStorageEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getNamedRenderbufferParameterivEXT(int renderbuffer, int pname, Pointer<Int> params) =>
      _glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
  late final _glGetNamedRenderbufferParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetNamedRenderbufferParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void namedRenderbufferStorageMultisampleEXT(
          int renderbuffer, int samples, int internalformat, int width, int height) =>
      _glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
  late final _glNamedRenderbufferStorageMultisampleEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int)>>(
              'glNamedRenderbufferStorageMultisampleEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void namedRenderbufferStorageMultisampleCoverageEXT(
          int renderbuffer, int coverageSamples, int colorSamples, int internalformat, int width, int height) =>
      _glNamedRenderbufferStorageMultisampleCoverageEXT(
          renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
  late final _glNamedRenderbufferStorageMultisampleCoverageEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedInt, Int, Int)>>(
              'glNamedRenderbufferStorageMultisampleCoverageEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  int checkNamedFramebufferStatusEXT(int framebuffer, int target) =>
      _glCheckNamedFramebufferStatusEXT(framebuffer, target);
  late final _glCheckNamedFramebufferStatusEXT =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt)>>('glCheckNamedFramebufferStatusEXT')
          .asFunction<int Function(int, int)>(isLeaf: true);

  void namedFramebufferTexture1DEXT(int framebuffer, int attachment, int textarget, int texture, int level) =>
      _glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
  late final _glNamedFramebufferTexture1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int)>>(
              'glNamedFramebufferTexture1DEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void namedFramebufferTexture2DEXT(int framebuffer, int attachment, int textarget, int texture, int level) =>
      _glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
  late final _glNamedFramebufferTexture2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int)>>(
              'glNamedFramebufferTexture2DEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void namedFramebufferTexture3DEXT(
          int framebuffer, int attachment, int textarget, int texture, int level, int zoffset) =>
      _glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
  late final _glNamedFramebufferTexture3DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Int)>>(
              'glNamedFramebufferTexture3DEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void namedFramebufferRenderbufferEXT(int framebuffer, int attachment, int renderbuffertarget, int renderbuffer) =>
      _glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
  late final _glNamedFramebufferRenderbufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glNamedFramebufferRenderbufferEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getNamedFramebufferAttachmentParameterivEXT(int framebuffer, int attachment, int pname, Pointer<Int> params) =>
      _glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
  late final _glGetNamedFramebufferAttachmentParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetNamedFramebufferAttachmentParameterivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void generateTextureMipmapEXT(int texture, int target) => _glGenerateTextureMipmapEXT(texture, target);
  late final _glGenerateTextureMipmapEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glGenerateTextureMipmapEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void generateMultiTexMipmapEXT(int texunit, int target) => _glGenerateMultiTexMipmapEXT(texunit, target);
  late final _glGenerateMultiTexMipmapEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glGenerateMultiTexMipmapEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void framebufferDrawBufferEXT(int framebuffer, int mode) => _glFramebufferDrawBufferEXT(framebuffer, mode);
  late final _glFramebufferDrawBufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glFramebufferDrawBufferEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void framebufferDrawBuffersEXT(int framebuffer, int n, Pointer<UnsignedInt> bufs) =>
      _glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
  late final _glFramebufferDrawBuffersEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glFramebufferDrawBuffersEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void framebufferReadBufferEXT(int framebuffer, int mode) => _glFramebufferReadBufferEXT(framebuffer, mode);
  late final _glFramebufferReadBufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glFramebufferReadBufferEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void getFramebufferParameterivEXT(int framebuffer, int pname, Pointer<Int> params) =>
      _glGetFramebufferParameterivEXT(framebuffer, pname, params);
  late final _glGetFramebufferParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetFramebufferParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void namedCopyBufferSubDataEXT(int readBuffer, int writeBuffer, int readOffset, int writeOffset, int size) =>
      _glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
  late final _glNamedCopyBufferSubDataEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Long, Long, Long)>>('glNamedCopyBufferSubDataEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void namedFramebufferTextureEXT(int framebuffer, int attachment, int texture, int level) =>
      _glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
  late final _glNamedFramebufferTextureEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>('glNamedFramebufferTextureEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void namedFramebufferTextureLayerEXT(int framebuffer, int attachment, int texture, int level, int layer) =>
      _glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
  late final _glNamedFramebufferTextureLayerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int)>>(
              'glNamedFramebufferTextureLayerEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void namedFramebufferTextureFaceEXT(int framebuffer, int attachment, int texture, int level, int face) =>
      _glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
  late final _glNamedFramebufferTextureFaceEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, UnsignedInt)>>(
              'glNamedFramebufferTextureFaceEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void textureRenderbufferEXT(int texture, int target, int renderbuffer) =>
      _glTextureRenderbufferEXT(texture, target, renderbuffer);
  late final _glTextureRenderbufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glTextureRenderbufferEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexRenderbufferEXT(int texunit, int target, int renderbuffer) =>
      _glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
  late final _glMultiTexRenderbufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glMultiTexRenderbufferEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexArrayVertexOffsetEXT(int vaobj, int buffer, int size, int type, int stride, int offset) =>
      _glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
  late final _glVertexArrayVertexOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Long)>>(
              'glVertexArrayVertexOffsetEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void vertexArrayColorOffsetEXT(int vaobj, int buffer, int size, int type, int stride, int offset) =>
      _glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
  late final _glVertexArrayColorOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Long)>>(
              'glVertexArrayColorOffsetEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void vertexArrayEdgeFlagOffsetEXT(int vaobj, int buffer, int stride, int offset) =>
      _glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
  late final _glVertexArrayEdgeFlagOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Long)>>('glVertexArrayEdgeFlagOffsetEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexArrayIndexOffsetEXT(int vaobj, int buffer, int type, int stride, int offset) =>
      _glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
  late final _glVertexArrayIndexOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Long)>>(
              'glVertexArrayIndexOffsetEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexArrayNormalOffsetEXT(int vaobj, int buffer, int type, int stride, int offset) =>
      _glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
  late final _glVertexArrayNormalOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Long)>>(
              'glVertexArrayNormalOffsetEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexArrayTexCoordOffsetEXT(int vaobj, int buffer, int size, int type, int stride, int offset) =>
      _glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
  late final _glVertexArrayTexCoordOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Long)>>(
              'glVertexArrayTexCoordOffsetEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void vertexArrayMultiTexCoordOffsetEXT(
          int vaobj, int buffer, int texunit, int size, int type, int stride, int offset) =>
      _glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
  late final _glVertexArrayMultiTexCoordOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Long)>>(
              'glVertexArrayMultiTexCoordOffsetEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void vertexArrayFogCoordOffsetEXT(int vaobj, int buffer, int type, int stride, int offset) =>
      _glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
  late final _glVertexArrayFogCoordOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Long)>>(
              'glVertexArrayFogCoordOffsetEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexArraySecondaryColorOffsetEXT(int vaobj, int buffer, int size, int type, int stride, int offset) =>
      _glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
  late final _glVertexArraySecondaryColorOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Long)>>(
              'glVertexArraySecondaryColorOffsetEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void vertexArrayVertexAttribOffsetEXT(
          int vaobj, int buffer, int index, int size, int type, int normalized, int stride, int offset) =>
      _glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
  late final _glVertexArrayVertexAttribOffsetEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedChar, Int,
                  Long)>>('glVertexArrayVertexAttribOffsetEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void vertexArrayVertexAttribIOffsetEXT(
          int vaobj, int buffer, int index, int size, int type, int stride, int offset) =>
      _glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
  late final _glVertexArrayVertexAttribIOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Long)>>(
              'glVertexArrayVertexAttribIOffsetEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void enableVertexArrayEXT(int vaobj, int array) => _glEnableVertexArrayEXT(vaobj, array);
  late final _glEnableVertexArrayEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glEnableVertexArrayEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void disableVertexArrayEXT(int vaobj, int array) => _glDisableVertexArrayEXT(vaobj, array);
  late final _glDisableVertexArrayEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDisableVertexArrayEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void enableVertexArrayAttribEXT(int vaobj, int index) => _glEnableVertexArrayAttribEXT(vaobj, index);
  late final _glEnableVertexArrayAttribEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glEnableVertexArrayAttribEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void disableVertexArrayAttribEXT(int vaobj, int index) => _glDisableVertexArrayAttribEXT(vaobj, index);
  late final _glDisableVertexArrayAttribEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDisableVertexArrayAttribEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void getVertexArrayIntegervEXT(int vaobj, int pname, Pointer<Int> param) =>
      _glGetVertexArrayIntegervEXT(vaobj, pname, param);
  late final _glGetVertexArrayIntegervEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVertexArrayIntegervEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexArrayPointervEXT(int vaobj, int pname, Pointer<Pointer<Void>> param) =>
      _glGetVertexArrayPointervEXT(vaobj, pname, param);
  late final _glGetVertexArrayPointervEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>(
              'glGetVertexArrayPointervEXT')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void getVertexArrayIntegeri_vEXT(int vaobj, int index, int pname, Pointer<Int> param) =>
      _glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
  late final _glGetVertexArrayIntegeri_vEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetVertexArrayIntegeri_vEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexArrayPointeri_vEXT(int vaobj, int index, int pname, Pointer<Pointer<Void>> param) =>
      _glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
  late final _glGetVertexArrayPointeri_vEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>(
              'glGetVertexArrayPointeri_vEXT')
          .asFunction<void Function(int, int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  Pointer<Void> mapNamedBufferRangeEXT(int buffer, int offset, int length, int access) =>
      _glMapNamedBufferRangeEXT(buffer, offset, length, access);
  late final _glMapNamedBufferRangeEXT =
      _lookup<NativeFunction<Pointer<Void> Function(UnsignedInt, Long, Long, UnsignedInt)>>('glMapNamedBufferRangeEXT')
          .asFunction<Pointer<Void> Function(int, int, int, int)>(isLeaf: true);

  void flushMappedNamedBufferRangeEXT(int buffer, int offset, int length) =>
      _glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
  late final _glFlushMappedNamedBufferRangeEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long)>>('glFlushMappedNamedBufferRangeEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void namedBufferStorageEXT(int buffer, int size, Pointer<Void> data, int flags) =>
      _glNamedBufferStorageEXT(buffer, size, data, flags);
  late final _glNamedBufferStorageEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Pointer<Void>, UnsignedInt)>>('glNamedBufferStorageEXT')
          .asFunction<void Function(int, int, Pointer<Void>, int)>(isLeaf: true);

  void clearNamedBufferDataEXT(int buffer, int internalformat, int format, int type, Pointer<Void> data) =>
      _glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
  late final _glClearNamedBufferDataEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glClearNamedBufferDataEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void clearNamedBufferSubDataEXT(
          int buffer, int internalformat, int offset, int size, int format, int type, Pointer<Void> data) =>
      _glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
  late final _glClearNamedBufferSubDataEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Long, Long, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glClearNamedBufferSubDataEXT')
      .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void namedFramebufferParameteriEXT(int framebuffer, int pname, int param) =>
      _glNamedFramebufferParameteriEXT(framebuffer, pname, param);
  late final _glNamedFramebufferParameteriEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glNamedFramebufferParameteriEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void getNamedFramebufferParameterivEXT(int framebuffer, int pname, Pointer<Int> params) =>
      _glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);
  late final _glGetNamedFramebufferParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetNamedFramebufferParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void programUniform1dEXT(int program, int location, double x) => _glProgramUniform1dEXT(program, location, x);
  late final _glProgramUniform1dEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Double)>>('glProgramUniform1dEXT')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void programUniform2dEXT(int program, int location, double x, double y) =>
      _glProgramUniform2dEXT(program, location, x, y);
  late final _glProgramUniform2dEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Double, Double)>>('glProgramUniform2dEXT')
          .asFunction<void Function(int, int, double, double)>(isLeaf: true);

  void programUniform3dEXT(int program, int location, double x, double y, double z) =>
      _glProgramUniform3dEXT(program, location, x, y, z);
  late final _glProgramUniform3dEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Double, Double, Double)>>('glProgramUniform3dEXT')
          .asFunction<void Function(int, int, double, double, double)>(isLeaf: true);

  void programUniform4dEXT(int program, int location, double x, double y, double z, double w) =>
      _glProgramUniform4dEXT(program, location, x, y, z, w);
  late final _glProgramUniform4dEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Double, Double, Double, Double)>>('glProgramUniform4dEXT')
          .asFunction<void Function(int, int, double, double, double, double)>(isLeaf: true);

  void programUniform1dvEXT(int program, int location, int count, Pointer<Double> value) =>
      _glProgramUniform1dvEXT(program, location, count, value);
  late final _glProgramUniform1dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Double>)>>('glProgramUniform1dvEXT')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniform2dvEXT(int program, int location, int count, Pointer<Double> value) =>
      _glProgramUniform2dvEXT(program, location, count, value);
  late final _glProgramUniform2dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Double>)>>('glProgramUniform2dvEXT')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniform3dvEXT(int program, int location, int count, Pointer<Double> value) =>
      _glProgramUniform3dvEXT(program, location, count, value);
  late final _glProgramUniform3dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Double>)>>('glProgramUniform3dvEXT')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniform4dvEXT(int program, int location, int count, Pointer<Double> value) =>
      _glProgramUniform4dvEXT(program, location, count, value);
  late final _glProgramUniform4dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Double>)>>('glProgramUniform4dvEXT')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix2dvEXT(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix2dvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix3dvEXT(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix3dvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix4dvEXT(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix4dvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix2x3dvEXT(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2x3dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix2x3dvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix2x4dvEXT(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix2x4dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix2x4dvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix3x2dvEXT(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3x2dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix3x2dvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix3x4dvEXT(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix3x4dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix3x4dvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix4x2dvEXT(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4x2dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix4x2dvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void programUniformMatrix4x3dvEXT(int program, int location, int count, int transpose, Pointer<Double> value) =>
      _glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
  late final _glProgramUniformMatrix4x3dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedChar, Pointer<Double>)>>(
              'glProgramUniformMatrix4x3dvEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Double>)>(isLeaf: true);

  void textureBufferRangeEXT(int texture, int target, int internalformat, int buffer, int offset, int size) =>
      _glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
  late final _glTextureBufferRangeEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Long, Long)>>(
              'glTextureBufferRangeEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void textureStorage1DEXT(int texture, int target, int levels, int internalformat, int width) =>
      _glTextureStorage1DEXT(texture, target, levels, internalformat, width);
  late final _glTextureStorage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int)>>('glTextureStorage1DEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void textureStorage2DEXT(int texture, int target, int levels, int internalformat, int width, int height) =>
      _glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
  late final _glTextureStorage2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int)>>(
              'glTextureStorage2DEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void textureStorage3DEXT(int texture, int target, int levels, int internalformat, int width, int height, int depth) =>
      _glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
  late final _glTextureStorage3DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int)>>(
              'glTextureStorage3DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void textureStorage2DMultisampleEXT(
          int texture, int target, int samples, int internalformat, int width, int height, int fixedsamplelocations) =>
      _glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
  late final _glTextureStorage2DMultisampleEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, UnsignedChar)>>(
              'glTextureStorage2DMultisampleEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void textureStorage3DMultisampleEXT(int texture, int target, int samples, int internalformat, int width, int height,
          int depth, int fixedsamplelocations) =>
      _glTextureStorage3DMultisampleEXT(
          texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  late final _glTextureStorage3DMultisampleEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Int, Int, UnsignedChar)>>(
              'glTextureStorage3DMultisampleEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void vertexArrayBindVertexBufferEXT(int vaobj, int bindingindex, int buffer, int offset, int stride) =>
      _glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
  late final _glVertexArrayBindVertexBufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long, Int)>>(
              'glVertexArrayBindVertexBufferEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexArrayVertexAttribFormatEXT(
          int vaobj, int attribindex, int size, int type, int normalized, int relativeoffset) =>
      _glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
  late final _glVertexArrayVertexAttribFormatEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedChar, UnsignedInt)>>(
              'glVertexArrayVertexAttribFormatEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void vertexArrayVertexAttribIFormatEXT(int vaobj, int attribindex, int size, int type, int relativeoffset) =>
      _glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
  late final _glVertexArrayVertexAttribIFormatEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt)>>(
              'glVertexArrayVertexAttribIFormatEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexArrayVertexAttribLFormatEXT(int vaobj, int attribindex, int size, int type, int relativeoffset) =>
      _glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
  late final _glVertexArrayVertexAttribLFormatEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt)>>(
              'glVertexArrayVertexAttribLFormatEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexArrayVertexAttribBindingEXT(int vaobj, int attribindex, int bindingindex) =>
      _glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
  late final _glVertexArrayVertexAttribBindingEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glVertexArrayVertexAttribBindingEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexArrayVertexBindingDivisorEXT(int vaobj, int bindingindex, int divisor) =>
      _glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
  late final _glVertexArrayVertexBindingDivisorEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glVertexArrayVertexBindingDivisorEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexArrayVertexAttribLOffsetEXT(
          int vaobj, int buffer, int index, int size, int type, int stride, int offset) =>
      _glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
  late final _glVertexArrayVertexAttribLOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Long)>>(
              'glVertexArrayVertexAttribLOffsetEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void texturePageCommitmentEXT(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height,
          int depth, int commit) =>
      _glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  late final _glTexturePageCommitmentEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedChar)>>(
              'glTexturePageCommitmentEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void vertexArrayVertexAttribDivisorEXT(int vaobj, int index, int divisor) =>
      _glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
  late final _glVertexArrayVertexAttribDivisorEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glVertexArrayVertexAttribDivisorEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void colorMaskIndexedEXT(int index, int r, int g, int b, int a) => _glColorMaskIndexedEXT(index, r, g, b, a);
  late final _glColorMaskIndexedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar)>>(
              'glColorMaskIndexedEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void drawArraysInstancedEXT(int mode, int start, int count, int primcount) =>
      _glDrawArraysInstancedEXT(mode, start, count, primcount);
  late final _glDrawArraysInstancedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glDrawArraysInstancedEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void drawElementsInstancedEXT(int mode, int count, int type, Pointer<Void> indices, int primcount) =>
      _glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
  late final _glDrawElementsInstancedEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>, Int)>>(
              'glDrawElementsInstancedEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>, int)>(isLeaf: true);

  void drawRangeElementsEXT(int mode, int start, int end, int count, int type, Pointer<Void> indices) =>
      _glDrawRangeElementsEXT(mode, start, end, count, type, indices);
  late final _glDrawRangeElementsEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, UnsignedInt, Pointer<Void>)>>(
              'glDrawRangeElementsEXT')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void bufferStorageExternalEXT(int target, int offset, int size, Pointer<Void> clientBuffer, int flags) =>
      _glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags);
  late final _glBufferStorageExternalEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, Pointer<Void>, UnsignedInt)>>(
              'glBufferStorageExternalEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>, int)>(isLeaf: true);

  void namedBufferStorageExternalEXT(int buffer, int offset, int size, Pointer<Void> clientBuffer, int flags) =>
      _glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags);
  late final _glNamedBufferStorageExternalEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, Pointer<Void>, UnsignedInt)>>(
              'glNamedBufferStorageExternalEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>, int)>(isLeaf: true);

  void fogCoordfEXT(double coord) => _glFogCoordfEXT(coord);
  late final _glFogCoordfEXT =
      _lookup<NativeFunction<Void Function(Float)>>('glFogCoordfEXT').asFunction<void Function(double)>(isLeaf: true);

  void fogCoordfvEXT(Pointer<Float> coord) => _glFogCoordfvEXT(coord);
  late final _glFogCoordfvEXT = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glFogCoordfvEXT')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void fogCoorddEXT(double coord) => _glFogCoorddEXT(coord);
  late final _glFogCoorddEXT =
      _lookup<NativeFunction<Void Function(Double)>>('glFogCoorddEXT').asFunction<void Function(double)>(isLeaf: true);

  void fogCoorddvEXT(Pointer<Double> coord) => _glFogCoorddvEXT(coord);
  late final _glFogCoorddvEXT = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glFogCoorddvEXT')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void fogCoordPointerEXT(int type, int stride, Pointer<Void> pointer) => _glFogCoordPointerEXT(type, stride, pointer);
  late final _glFogCoordPointerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glFogCoordPointerEXT')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void blitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1,
          int mask, int filter) =>
      _glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  late final _glBlitFramebufferEXT =
      _lookup<NativeFunction<Void Function(Int, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt)>>(
              'glBlitFramebufferEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void blitFramebufferLayersEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1,
          int mask, int filter) =>
      _glBlitFramebufferLayersEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  late final _glBlitFramebufferLayersEXT =
      _lookup<NativeFunction<Void Function(Int, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt)>>(
              'glBlitFramebufferLayersEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void blitFramebufferLayerEXT(int srcX0, int srcY0, int srcX1, int srcY1, int srcLayer, int dstX0, int dstY0,
          int dstX1, int dstY1, int dstLayer, int mask, int filter) =>
      _glBlitFramebufferLayerEXT(
          srcX0, srcY0, srcX1, srcY1, srcLayer, dstX0, dstY0, dstX1, dstY1, dstLayer, mask, filter);
  late final _glBlitFramebufferLayerEXT = _lookup<
          NativeFunction<
              Void Function(Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, UnsignedInt,
                  UnsignedInt)>>('glBlitFramebufferLayerEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void renderbufferStorageMultisampleEXT(int target, int samples, int internalformat, int width, int height) =>
      _glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
  late final _glRenderbufferStorageMultisampleEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int)>>(
              'glRenderbufferStorageMultisampleEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  int isRenderbufferEXT(int renderbuffer) => _glIsRenderbufferEXT(renderbuffer);
  late final _glIsRenderbufferEXT = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsRenderbufferEXT')
      .asFunction<int Function(int)>(isLeaf: true);

  void bindRenderbufferEXT(int target, int renderbuffer) => _glBindRenderbufferEXT(target, renderbuffer);
  late final _glBindRenderbufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindRenderbufferEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteRenderbuffersEXT(int n, Pointer<UnsignedInt> renderbuffers) => _glDeleteRenderbuffersEXT(n, renderbuffers);
  late final _glDeleteRenderbuffersEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteRenderbuffersEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genRenderbuffersEXT(int n, Pointer<UnsignedInt> renderbuffers) => _glGenRenderbuffersEXT(n, renderbuffers);
  late final _glGenRenderbuffersEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenRenderbuffersEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void renderbufferStorageEXT(int target, int internalformat, int width, int height) =>
      _glRenderbufferStorageEXT(target, internalformat, width, height);
  late final _glRenderbufferStorageEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int)>>('glRenderbufferStorageEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getRenderbufferParameterivEXT(int target, int pname, Pointer<Int> params) =>
      _glGetRenderbufferParameterivEXT(target, pname, params);
  late final _glGetRenderbufferParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetRenderbufferParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  int isFramebufferEXT(int framebuffer) => _glIsFramebufferEXT(framebuffer);
  late final _glIsFramebufferEXT = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsFramebufferEXT')
      .asFunction<int Function(int)>(isLeaf: true);

  void bindFramebufferEXT(int target, int framebuffer) => _glBindFramebufferEXT(target, framebuffer);
  late final _glBindFramebufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindFramebufferEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteFramebuffersEXT(int n, Pointer<UnsignedInt> framebuffers) => _glDeleteFramebuffersEXT(n, framebuffers);
  late final _glDeleteFramebuffersEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteFramebuffersEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genFramebuffersEXT(int n, Pointer<UnsignedInt> framebuffers) => _glGenFramebuffersEXT(n, framebuffers);
  late final _glGenFramebuffersEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenFramebuffersEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int checkFramebufferStatusEXT(int target) => _glCheckFramebufferStatusEXT(target);
  late final _glCheckFramebufferStatusEXT =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt)>>('glCheckFramebufferStatusEXT')
          .asFunction<int Function(int)>(isLeaf: true);

  void framebufferTexture1DEXT(int target, int attachment, int textarget, int texture, int level) =>
      _glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
  late final _glFramebufferTexture1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int)>>(
              'glFramebufferTexture1DEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void framebufferTexture2DEXT(int target, int attachment, int textarget, int texture, int level) =>
      _glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
  late final _glFramebufferTexture2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int)>>(
              'glFramebufferTexture2DEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void framebufferTexture3DEXT(int target, int attachment, int textarget, int texture, int level, int zoffset) =>
      _glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
  late final _glFramebufferTexture3DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Int)>>(
              'glFramebufferTexture3DEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void framebufferRenderbufferEXT(int target, int attachment, int renderbuffertarget, int renderbuffer) =>
      _glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
  late final _glFramebufferRenderbufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glFramebufferRenderbufferEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, Pointer<Int> params) =>
      _glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
  late final _glGetFramebufferAttachmentParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetFramebufferAttachmentParameterivEXT')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void generateMipmapEXT(int target) => _glGenerateMipmapEXT(target);
  late final _glGenerateMipmapEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glGenerateMipmapEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void programParameteriEXT(int program, int pname, int value) => _glProgramParameteriEXT(program, pname, value);
  late final _glProgramParameteriEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glProgramParameteriEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programEnvParameters4fvEXT(int target, int index, int count, Pointer<Float> params) =>
      _glProgramEnvParameters4fvEXT(target, index, count, params);
  late final _glProgramEnvParameters4fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glProgramEnvParameters4fvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void programLocalParameters4fvEXT(int target, int index, int count, Pointer<Float> params) =>
      _glProgramLocalParameters4fvEXT(target, index, count, params);
  late final _glProgramLocalParameters4fvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glProgramLocalParameters4fvEXT')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getUniformuivEXT(int program, int location, Pointer<UnsignedInt> params) =>
      _glGetUniformuivEXT(program, location, params);
  late final _glGetUniformuivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>('glGetUniformuivEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void bindFragDataLocationEXT(int program, int color, Pointer<Char> name) =>
      _glBindFragDataLocationEXT(program, color, name);
  late final _glBindFragDataLocationEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Char>)>>('glBindFragDataLocationEXT')
          .asFunction<void Function(int, int, Pointer<Char>)>(isLeaf: true);

  int getFragDataLocationEXT(int program, Pointer<Char> name) => _glGetFragDataLocationEXT(program, name);
  late final _glGetFragDataLocationEXT =
      _lookup<NativeFunction<Int Function(UnsignedInt, Pointer<Char>)>>('glGetFragDataLocationEXT')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void uniform1uiEXT(int location, int v0) => _glUniform1uiEXT(location, v0);
  late final _glUniform1uiEXT = _lookup<NativeFunction<Void Function(Int, UnsignedInt)>>('glUniform1uiEXT')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void uniform2uiEXT(int location, int v0, int v1) => _glUniform2uiEXT(location, v0, v1);
  late final _glUniform2uiEXT = _lookup<NativeFunction<Void Function(Int, UnsignedInt, UnsignedInt)>>('glUniform2uiEXT')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void uniform3uiEXT(int location, int v0, int v1, int v2) => _glUniform3uiEXT(location, v0, v1, v2);
  late final _glUniform3uiEXT =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, UnsignedInt, UnsignedInt)>>('glUniform3uiEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void uniform4uiEXT(int location, int v0, int v1, int v2, int v3) => _glUniform4uiEXT(location, v0, v1, v2, v3);
  late final _glUniform4uiEXT =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glUniform4uiEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void uniform1uivEXT(int location, int count, Pointer<UnsignedInt> value) => _glUniform1uivEXT(location, count, value);
  late final _glUniform1uivEXT =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<UnsignedInt>)>>('glUniform1uivEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void uniform2uivEXT(int location, int count, Pointer<UnsignedInt> value) => _glUniform2uivEXT(location, count, value);
  late final _glUniform2uivEXT =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<UnsignedInt>)>>('glUniform2uivEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void uniform3uivEXT(int location, int count, Pointer<UnsignedInt> value) => _glUniform3uivEXT(location, count, value);
  late final _glUniform3uivEXT =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<UnsignedInt>)>>('glUniform3uivEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void uniform4uivEXT(int location, int count, Pointer<UnsignedInt> value) => _glUniform4uivEXT(location, count, value);
  late final _glUniform4uivEXT =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<UnsignedInt>)>>('glUniform4uivEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribI1iEXT(int index, int x) => _glVertexAttribI1iEXT(index, x);
  late final _glVertexAttribI1iEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glVertexAttribI1iEXT')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttribI2iEXT(int index, int x, int y) => _glVertexAttribI2iEXT(index, x, y);
  late final _glVertexAttribI2iEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glVertexAttribI2iEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexAttribI3iEXT(int index, int x, int y, int z) => _glVertexAttribI3iEXT(index, x, y, z);
  late final _glVertexAttribI3iEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glVertexAttribI3iEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribI4iEXT(int index, int x, int y, int z, int w) => _glVertexAttribI4iEXT(index, x, y, z, w);
  late final _glVertexAttribI4iEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int)>>('glVertexAttribI4iEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttribI1uiEXT(int index, int x) => _glVertexAttribI1uiEXT(index, x);
  late final _glVertexAttribI1uiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glVertexAttribI1uiEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttribI2uiEXT(int index, int x, int y) => _glVertexAttribI2uiEXT(index, x, y);
  late final _glVertexAttribI2uiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glVertexAttribI2uiEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexAttribI3uiEXT(int index, int x, int y, int z) => _glVertexAttribI3uiEXT(index, x, y, z);
  late final _glVertexAttribI3uiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glVertexAttribI3uiEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribI4uiEXT(int index, int x, int y, int z, int w) => _glVertexAttribI4uiEXT(index, x, y, z, w);
  late final _glVertexAttribI4uiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glVertexAttribI4uiEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttribI1ivEXT(int index, Pointer<Int> v) => _glVertexAttribI1ivEXT(index, v);
  late final _glVertexAttribI1ivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttribI1ivEXT')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttribI2ivEXT(int index, Pointer<Int> v) => _glVertexAttribI2ivEXT(index, v);
  late final _glVertexAttribI2ivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttribI2ivEXT')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttribI3ivEXT(int index, Pointer<Int> v) => _glVertexAttribI3ivEXT(index, v);
  late final _glVertexAttribI3ivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttribI3ivEXT')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttribI4ivEXT(int index, Pointer<Int> v) => _glVertexAttribI4ivEXT(index, v);
  late final _glVertexAttribI4ivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVertexAttribI4ivEXT')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void vertexAttribI1uivEXT(int index, Pointer<UnsignedInt> v) => _glVertexAttribI1uivEXT(index, v);
  late final _glVertexAttribI1uivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttribI1uivEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribI2uivEXT(int index, Pointer<UnsignedInt> v) => _glVertexAttribI2uivEXT(index, v);
  late final _glVertexAttribI2uivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttribI2uivEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribI3uivEXT(int index, Pointer<UnsignedInt> v) => _glVertexAttribI3uivEXT(index, v);
  late final _glVertexAttribI3uivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttribI3uivEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribI4uivEXT(int index, Pointer<UnsignedInt> v) => _glVertexAttribI4uivEXT(index, v);
  late final _glVertexAttribI4uivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVertexAttribI4uivEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexAttribI4bvEXT(int index, Pointer<SignedChar> v) => _glVertexAttribI4bvEXT(index, v);
  late final _glVertexAttribI4bvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glVertexAttribI4bvEXT')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void vertexAttribI4svEXT(int index, Pointer<Short> v) => _glVertexAttribI4svEXT(index, v);
  late final _glVertexAttribI4svEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttribI4svEXT')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttribI4ubvEXT(int index, Pointer<UnsignedChar> v) => _glVertexAttribI4ubvEXT(index, v);
  late final _glVertexAttribI4ubvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glVertexAttribI4ubvEXT')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void vertexAttribI4usvEXT(int index, Pointer<UnsignedShort> v) => _glVertexAttribI4usvEXT(index, v);
  late final _glVertexAttribI4usvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVertexAttribI4usvEXT')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttribIPointerEXT(int index, int size, int type, int stride, Pointer<Void> pointer) =>
      _glVertexAttribIPointerEXT(index, size, type, stride, pointer);
  late final _glVertexAttribIPointerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glVertexAttribIPointerEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getVertexAttribIivEXT(int index, int pname, Pointer<Int> params) =>
      _glGetVertexAttribIivEXT(index, pname, params);
  late final _glGetVertexAttribIivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVertexAttribIivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexAttribIuivEXT(int index, int pname, Pointer<UnsignedInt> params) =>
      _glGetVertexAttribIuivEXT(index, pname, params);
  late final _glGetVertexAttribIuivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glGetVertexAttribIuivEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getHistogramEXT(int target, int reset, int format, int type, Pointer<Void> values) =>
      _glGetHistogramEXT(target, reset, format, type, values);
  late final _glGetHistogramEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glGetHistogramEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getHistogramParameterfvEXT(int target, int pname, Pointer<Float> params) =>
      _glGetHistogramParameterfvEXT(target, pname, params);
  late final _glGetHistogramParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetHistogramParameterfvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getHistogramParameterivEXT(int target, int pname, Pointer<Int> params) =>
      _glGetHistogramParameterivEXT(target, pname, params);
  late final _glGetHistogramParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetHistogramParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getMinmaxEXT(int target, int reset, int format, int type, Pointer<Void> values) =>
      _glGetMinmaxEXT(target, reset, format, type, values);
  late final _glGetMinmaxEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glGetMinmaxEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getMinmaxParameterfvEXT(int target, int pname, Pointer<Float> params) =>
      _glGetMinmaxParameterfvEXT(target, pname, params);
  late final _glGetMinmaxParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetMinmaxParameterfvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getMinmaxParameterivEXT(int target, int pname, Pointer<Int> params) =>
      _glGetMinmaxParameterivEXT(target, pname, params);
  late final _glGetMinmaxParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetMinmaxParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void histogramEXT(int target, int width, int internalformat, int sink) =>
      _glHistogramEXT(target, width, internalformat, sink);
  late final _glHistogramEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedChar)>>('glHistogramEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void minmaxEXT(int target, int internalformat, int sink) => _glMinmaxEXT(target, internalformat, sink);
  late final _glMinmaxEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedChar)>>('glMinmaxEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void resetHistogramEXT(int target) => _glResetHistogramEXT(target);
  late final _glResetHistogramEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glResetHistogramEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void resetMinmaxEXT(int target) => _glResetMinmaxEXT(target);
  late final _glResetMinmaxEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glResetMinmaxEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void indexFuncEXT(int func, double ref) => _glIndexFuncEXT(func, ref);
  late final _glIndexFuncEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glIndexFuncEXT')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void indexMaterialEXT(int face, int mode) => _glIndexMaterialEXT(face, mode);
  late final _glIndexMaterialEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glIndexMaterialEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void applyTextureEXT(int mode) => _glApplyTextureEXT(mode);
  late final _glApplyTextureEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glApplyTextureEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void textureLightEXT(int pname) => _glTextureLightEXT(pname);
  late final _glTextureLightEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glTextureLightEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void textureMaterialEXT(int face, int mode) => _glTextureMaterialEXT(face, mode);
  late final _glTextureMaterialEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glTextureMaterialEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void getUnsignedBytevEXT(int pname, Pointer<UnsignedChar> data) => _glGetUnsignedBytevEXT(pname, data);
  late final _glGetUnsignedBytevEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glGetUnsignedBytevEXT')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void getUnsignedBytei_vEXT(int target, int index, Pointer<UnsignedChar> data) =>
      _glGetUnsignedBytei_vEXT(target, index, data);
  late final _glGetUnsignedBytei_vEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedChar>)>>('glGetUnsignedBytei_vEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void deleteMemoryObjectsEXT(int n, Pointer<UnsignedInt> memoryObjects) => _glDeleteMemoryObjectsEXT(n, memoryObjects);
  late final _glDeleteMemoryObjectsEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteMemoryObjectsEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isMemoryObjectEXT(int memoryObject) => _glIsMemoryObjectEXT(memoryObject);
  late final _glIsMemoryObjectEXT = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsMemoryObjectEXT')
      .asFunction<int Function(int)>(isLeaf: true);

  void createMemoryObjectsEXT(int n, Pointer<UnsignedInt> memoryObjects) => _glCreateMemoryObjectsEXT(n, memoryObjects);
  late final _glCreateMemoryObjectsEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateMemoryObjectsEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void memoryObjectParameterivEXT(int memoryObject, int pname, Pointer<Int> params) =>
      _glMemoryObjectParameterivEXT(memoryObject, pname, params);
  late final _glMemoryObjectParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glMemoryObjectParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getMemoryObjectParameterivEXT(int memoryObject, int pname, Pointer<Int> params) =>
      _glGetMemoryObjectParameterivEXT(memoryObject, pname, params);
  late final _glGetMemoryObjectParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetMemoryObjectParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void texStorageMem2DEXT(int target, int levels, int internalFormat, int width, int height, int memory, int offset) =>
      _glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset);
  late final _glTexStorageMem2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, UnsignedInt, Uint64)>>(
              'glTexStorageMem2DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void texStorageMem2DMultisampleEXT(int target, int samples, int internalFormat, int width, int height,
          int fixedSampleLocations, int memory, int offset) =>
      _glTexStorageMem2DMultisampleEXT(
          target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
  late final _glTexStorageMem2DMultisampleEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, UnsignedChar, UnsignedInt,
                  Uint64)>>('glTexStorageMem2DMultisampleEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void texStorageMem3DEXT(
          int target, int levels, int internalFormat, int width, int height, int depth, int memory, int offset) =>
      _glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset);
  late final _glTexStorageMem3DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, UnsignedInt, Uint64)>>(
              'glTexStorageMem3DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void texStorageMem3DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, int depth,
          int fixedSampleLocations, int memory, int offset) =>
      _glTexStorageMem3DMultisampleEXT(
          target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
  late final _glTexStorageMem3DMultisampleEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, UnsignedChar, UnsignedInt,
                  Uint64)>>('glTexStorageMem3DMultisampleEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void bufferStorageMemEXT(int target, int size, int memory, int offset) =>
      _glBufferStorageMemEXT(target, size, memory, offset);
  late final _glBufferStorageMemEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, UnsignedInt, Uint64)>>('glBufferStorageMemEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void textureStorageMem2DEXT(
          int texture, int levels, int internalFormat, int width, int height, int memory, int offset) =>
      _glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset);
  late final _glTextureStorageMem2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, UnsignedInt, Uint64)>>(
              'glTextureStorageMem2DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void textureStorageMem2DMultisampleEXT(int texture, int samples, int internalFormat, int width, int height,
          int fixedSampleLocations, int memory, int offset) =>
      _glTextureStorageMem2DMultisampleEXT(
          texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
  late final _glTextureStorageMem2DMultisampleEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, UnsignedChar, UnsignedInt,
                  Uint64)>>('glTextureStorageMem2DMultisampleEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void textureStorageMem3DEXT(
          int texture, int levels, int internalFormat, int width, int height, int depth, int memory, int offset) =>
      _glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset);
  late final _glTextureStorageMem3DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, UnsignedInt, Uint64)>>(
              'glTextureStorageMem3DEXT')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void textureStorageMem3DMultisampleEXT(int texture, int samples, int internalFormat, int width, int height, int depth,
          int fixedSampleLocations, int memory, int offset) =>
      _glTextureStorageMem3DMultisampleEXT(
          texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
  late final _glTextureStorageMem3DMultisampleEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, UnsignedChar, UnsignedInt,
                  Uint64)>>('glTextureStorageMem3DMultisampleEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void namedBufferStorageMemEXT(int buffer, int size, int memory, int offset) =>
      _glNamedBufferStorageMemEXT(buffer, size, memory, offset);
  late final _glNamedBufferStorageMemEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, UnsignedInt, Uint64)>>('glNamedBufferStorageMemEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texStorageMem1DEXT(int target, int levels, int internalFormat, int width, int memory, int offset) =>
      _glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset);
  late final _glTexStorageMem1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, UnsignedInt, Uint64)>>(
              'glTexStorageMem1DEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void textureStorageMem1DEXT(int texture, int levels, int internalFormat, int width, int memory, int offset) =>
      _glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset);
  late final _glTextureStorageMem1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, UnsignedInt, Uint64)>>(
              'glTextureStorageMem1DEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void importMemoryFdEXT(int memory, int size, int handleType, int fd) =>
      _glImportMemoryFdEXT(memory, size, handleType, fd);
  late final _glImportMemoryFdEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Uint64, UnsignedInt, Int)>>('glImportMemoryFdEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void importMemoryWin32HandleEXT(int memory, int size, int handleType, Pointer<Void> handle) =>
      _glImportMemoryWin32HandleEXT(memory, size, handleType, handle);
  late final _glImportMemoryWin32HandleEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Uint64, UnsignedInt, Pointer<Void>)>>(
              'glImportMemoryWin32HandleEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void importMemoryWin32NameEXT(int memory, int size, int handleType, Pointer<Void> name) =>
      _glImportMemoryWin32NameEXT(memory, size, handleType, name);
  late final _glImportMemoryWin32NameEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Uint64, UnsignedInt, Pointer<Void>)>>(
              'glImportMemoryWin32NameEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void multiDrawArraysEXT(int mode, Pointer<Int> first, Pointer<Int> count, int primcount) =>
      _glMultiDrawArraysEXT(mode, first, count, primcount);
  late final _glMultiDrawArraysEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>, Pointer<Int>, Int)>>('glMultiDrawArraysEXT')
          .asFunction<void Function(int, Pointer<Int>, Pointer<Int>, int)>(isLeaf: true);

  void multiDrawElementsEXT(int mode, Pointer<Int> count, int type, Pointer<Pointer<Void>> indices, int primcount) =>
      _glMultiDrawElementsEXT(mode, count, type, indices, primcount);
  late final _glMultiDrawElementsEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>, UnsignedInt, Pointer<Pointer<Void>>, Int)>>(
              'glMultiDrawElementsEXT')
          .asFunction<void Function(int, Pointer<Int>, int, Pointer<Pointer<Void>>, int)>(isLeaf: true);

  void sampleMaskEXT(double value, int invert) => _glSampleMaskEXT(value, invert);
  late final _glSampleMaskEXT = _lookup<NativeFunction<Void Function(Float, UnsignedChar)>>('glSampleMaskEXT')
      .asFunction<void Function(double, int)>(isLeaf: true);

  void samplePatternEXT(int pattern) => _glSamplePatternEXT(pattern);
  late final _glSamplePatternEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glSamplePatternEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void colorTableEXT(int target, int internalFormat, int width, int format, int type, Pointer<Void> table) =>
      _glColorTableEXT(target, internalFormat, width, format, type, table);
  late final _glColorTableEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glColorTableEXT')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getColorTableEXT(int target, int format, int type, Pointer<Void> data) =>
      _glGetColorTableEXT(target, format, type, data);
  late final _glGetColorTableEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>('glGetColorTableEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getColorTableParameterivEXT(int target, int pname, Pointer<Int> params) =>
      _glGetColorTableParameterivEXT(target, pname, params);
  late final _glGetColorTableParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetColorTableParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getColorTableParameterfvEXT(int target, int pname, Pointer<Float> params) =>
      _glGetColorTableParameterfvEXT(target, pname, params);
  late final _glGetColorTableParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetColorTableParameterfvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void pixelTransformParameteriEXT(int target, int pname, int param) =>
      _glPixelTransformParameteriEXT(target, pname, param);
  late final _glPixelTransformParameteriEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glPixelTransformParameteriEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void pixelTransformParameterfEXT(int target, int pname, double param) =>
      _glPixelTransformParameterfEXT(target, pname, param);
  late final _glPixelTransformParameterfEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glPixelTransformParameterfEXT')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void pixelTransformParameterivEXT(int target, int pname, Pointer<Int> params) =>
      _glPixelTransformParameterivEXT(target, pname, params);
  late final _glPixelTransformParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glPixelTransformParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void pixelTransformParameterfvEXT(int target, int pname, Pointer<Float> params) =>
      _glPixelTransformParameterfvEXT(target, pname, params);
  late final _glPixelTransformParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glPixelTransformParameterfvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getPixelTransformParameterivEXT(int target, int pname, Pointer<Int> params) =>
      _glGetPixelTransformParameterivEXT(target, pname, params);
  late final _glGetPixelTransformParameterivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetPixelTransformParameterivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getPixelTransformParameterfvEXT(int target, int pname, Pointer<Float> params) =>
      _glGetPixelTransformParameterfvEXT(target, pname, params);
  late final _glGetPixelTransformParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetPixelTransformParameterfvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void pointParameterfEXT(int pname, double param) => _glPointParameterfEXT(pname, param);
  late final _glPointParameterfEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glPointParameterfEXT')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void pointParameterfvEXT(int pname, Pointer<Float> params) => _glPointParameterfvEXT(pname, params);
  late final _glPointParameterfvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glPointParameterfvEXT')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void polygonOffsetEXT(double factor, double bias) => _glPolygonOffsetEXT(factor, bias);
  late final _glPolygonOffsetEXT = _lookup<NativeFunction<Void Function(Float, Float)>>('glPolygonOffsetEXT')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void polygonOffsetClampEXT(double factor, double units, double clamp) =>
      _glPolygonOffsetClampEXT(factor, units, clamp);
  late final _glPolygonOffsetClampEXT =
      _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glPolygonOffsetClampEXT')
          .asFunction<void Function(double, double, double)>(isLeaf: true);

  void provokingVertexEXT(int mode) => _glProvokingVertexEXT(mode);
  late final _glProvokingVertexEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glProvokingVertexEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void rasterSamplesEXT(int samples, int fixedsamplelocations) => _glRasterSamplesEXT(samples, fixedsamplelocations);
  late final _glRasterSamplesEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar)>>('glRasterSamplesEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void secondaryColor3bEXT(int red, int green, int blue) => _glSecondaryColor3bEXT(red, green, blue);
  late final _glSecondaryColor3bEXT =
      _lookup<NativeFunction<Void Function(SignedChar, SignedChar, SignedChar)>>('glSecondaryColor3bEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3bvEXT(Pointer<SignedChar> v) => _glSecondaryColor3bvEXT(v);
  late final _glSecondaryColor3bvEXT =
      _lookup<NativeFunction<Void Function(Pointer<SignedChar>)>>('glSecondaryColor3bvEXT')
          .asFunction<void Function(Pointer<SignedChar>)>(isLeaf: true);

  void secondaryColor3dEXT(double red, double green, double blue) => _glSecondaryColor3dEXT(red, green, blue);
  late final _glSecondaryColor3dEXT =
      _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glSecondaryColor3dEXT')
          .asFunction<void Function(double, double, double)>(isLeaf: true);

  void secondaryColor3dvEXT(Pointer<Double> v) => _glSecondaryColor3dvEXT(v);
  late final _glSecondaryColor3dvEXT = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glSecondaryColor3dvEXT')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void secondaryColor3fEXT(double red, double green, double blue) => _glSecondaryColor3fEXT(red, green, blue);
  late final _glSecondaryColor3fEXT =
      _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glSecondaryColor3fEXT')
          .asFunction<void Function(double, double, double)>(isLeaf: true);

  void secondaryColor3fvEXT(Pointer<Float> v) => _glSecondaryColor3fvEXT(v);
  late final _glSecondaryColor3fvEXT = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glSecondaryColor3fvEXT')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void secondaryColor3iEXT(int red, int green, int blue) => _glSecondaryColor3iEXT(red, green, blue);
  late final _glSecondaryColor3iEXT = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glSecondaryColor3iEXT')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3ivEXT(Pointer<Int> v) => _glSecondaryColor3ivEXT(v);
  late final _glSecondaryColor3ivEXT = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glSecondaryColor3ivEXT')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void secondaryColor3sEXT(int red, int green, int blue) => _glSecondaryColor3sEXT(red, green, blue);
  late final _glSecondaryColor3sEXT =
      _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glSecondaryColor3sEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3svEXT(Pointer<Short> v) => _glSecondaryColor3svEXT(v);
  late final _glSecondaryColor3svEXT = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glSecondaryColor3svEXT')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void secondaryColor3ubEXT(int red, int green, int blue) => _glSecondaryColor3ubEXT(red, green, blue);
  late final _glSecondaryColor3ubEXT =
      _lookup<NativeFunction<Void Function(UnsignedChar, UnsignedChar, UnsignedChar)>>('glSecondaryColor3ubEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3ubvEXT(Pointer<UnsignedChar> v) => _glSecondaryColor3ubvEXT(v);
  late final _glSecondaryColor3ubvEXT =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>)>>('glSecondaryColor3ubvEXT')
          .asFunction<void Function(Pointer<UnsignedChar>)>(isLeaf: true);

  void secondaryColor3uiEXT(int red, int green, int blue) => _glSecondaryColor3uiEXT(red, green, blue);
  late final _glSecondaryColor3uiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glSecondaryColor3uiEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3uivEXT(Pointer<UnsignedInt> v) => _glSecondaryColor3uivEXT(v);
  late final _glSecondaryColor3uivEXT =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>)>>('glSecondaryColor3uivEXT')
          .asFunction<void Function(Pointer<UnsignedInt>)>(isLeaf: true);

  void secondaryColor3usEXT(int red, int green, int blue) => _glSecondaryColor3usEXT(red, green, blue);
  late final _glSecondaryColor3usEXT =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort)>>('glSecondaryColor3usEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3usvEXT(Pointer<UnsignedShort> v) => _glSecondaryColor3usvEXT(v);
  late final _glSecondaryColor3usvEXT =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glSecondaryColor3usvEXT')
          .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void secondaryColorPointerEXT(int size, int type, int stride, Pointer<Void> pointer) =>
      _glSecondaryColorPointerEXT(size, type, stride, pointer);
  late final _glSecondaryColorPointerEXT =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Void>)>>('glSecondaryColorPointerEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void genSemaphoresEXT(int n, Pointer<UnsignedInt> semaphores) => _glGenSemaphoresEXT(n, semaphores);
  late final _glGenSemaphoresEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenSemaphoresEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deleteSemaphoresEXT(int n, Pointer<UnsignedInt> semaphores) => _glDeleteSemaphoresEXT(n, semaphores);
  late final _glDeleteSemaphoresEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteSemaphoresEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isSemaphoreEXT(int semaphore) => _glIsSemaphoreEXT(semaphore);
  late final _glIsSemaphoreEXT = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsSemaphoreEXT')
      .asFunction<int Function(int)>(isLeaf: true);

  void semaphoreParameterui64vEXT(int semaphore, int pname, Pointer<Uint64> params) =>
      _glSemaphoreParameterui64vEXT(semaphore, pname, params);
  late final _glSemaphoreParameterui64vEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Uint64>)>>('glSemaphoreParameterui64vEXT')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void getSemaphoreParameterui64vEXT(int semaphore, int pname, Pointer<Uint64> params) =>
      _glGetSemaphoreParameterui64vEXT(semaphore, pname, params);
  late final _glGetSemaphoreParameterui64vEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Uint64>)>>(
              'glGetSemaphoreParameterui64vEXT')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void waitSemaphoreEXT(int semaphore, int numBufferBarriers, Pointer<UnsignedInt> buffers, int numTextureBarriers,
          Pointer<UnsignedInt> textures, Pointer<UnsignedInt> srcLayouts) =>
      _glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
  late final _glWaitSemaphoreEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>, UnsignedInt, Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>)>>('glWaitSemaphoreEXT')
      .asFunction<void Function(int, int, Pointer<UnsignedInt>, int, Pointer<UnsignedInt>, Pointer<UnsignedInt>)>(
          isLeaf: true);

  void signalSemaphoreEXT(int semaphore, int numBufferBarriers, Pointer<UnsignedInt> buffers, int numTextureBarriers,
          Pointer<UnsignedInt> textures, Pointer<UnsignedInt> dstLayouts) =>
      _glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
  late final _glSignalSemaphoreEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>, UnsignedInt, Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>)>>('glSignalSemaphoreEXT')
      .asFunction<void Function(int, int, Pointer<UnsignedInt>, int, Pointer<UnsignedInt>, Pointer<UnsignedInt>)>(
          isLeaf: true);

  void importSemaphoreFdEXT(int semaphore, int handleType, int fd) =>
      _glImportSemaphoreFdEXT(semaphore, handleType, fd);
  late final _glImportSemaphoreFdEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glImportSemaphoreFdEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void importSemaphoreWin32HandleEXT(int semaphore, int handleType, Pointer<Void> handle) =>
      _glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle);
  late final _glImportSemaphoreWin32HandleEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>)>>('glImportSemaphoreWin32HandleEXT')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void importSemaphoreWin32NameEXT(int semaphore, int handleType, Pointer<Void> name) =>
      _glImportSemaphoreWin32NameEXT(semaphore, handleType, name);
  late final _glImportSemaphoreWin32NameEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>)>>('glImportSemaphoreWin32NameEXT')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void useShaderProgramEXT(int type, int program) => _glUseShaderProgramEXT(type, program);
  late final _glUseShaderProgramEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glUseShaderProgramEXT')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void activeProgramEXT(int program) => _glActiveProgramEXT(program);
  late final _glActiveProgramEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glActiveProgramEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  int createShaderProgramEXT(int type, Pointer<Char> string) => _glCreateShaderProgramEXT(type, string);
  late final _glCreateShaderProgramEXT =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, Pointer<Char>)>>('glCreateShaderProgramEXT')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void framebufferFetchBarrierEXT() => _glFramebufferFetchBarrierEXT();
  late final _glFramebufferFetchBarrierEXT = _lookup<NativeFunction<Void Function()>>('glFramebufferFetchBarrierEXT')
      .asFunction<void Function()>(isLeaf: true);

  void bindImageTextureEXT(int index, int texture, int level, int layered, int layer, int access, int format) =>
      _glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
  late final _glBindImageTextureEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedChar, Int, UnsignedInt, Int)>>(
              'glBindImageTextureEXT')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void memoryBarrierEXT(int barriers) => _glMemoryBarrierEXT(barriers);
  late final _glMemoryBarrierEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMemoryBarrierEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void stencilClearTagEXT(int stencilTagBits, int stencilClearTag) =>
      _glStencilClearTagEXT(stencilTagBits, stencilClearTag);
  late final _glStencilClearTagEXT = _lookup<NativeFunction<Void Function(Int, UnsignedInt)>>('glStencilClearTagEXT')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void activeStencilFaceEXT(int face) => _glActiveStencilFaceEXT(face);
  late final _glActiveStencilFaceEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glActiveStencilFaceEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void texSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, Pointer<Void> pixels) =>
      _glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
  late final _glTexSubImage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glTexSubImage1DEXT')
          .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void texSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
          Pointer<Void> pixels) =>
      _glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
  late final _glTexSubImage2DEXT = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>('glTexSubImage2DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void texImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border,
          int format, int type, Pointer<Void> pixels) =>
      _glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
  late final _glTexImage3DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTexImage3DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void texSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth,
          int format, int type, Pointer<Void> pixels) =>
      _glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  late final _glTexSubImage3DEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTexSubImage3DEXT')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void framebufferTextureLayerEXT(int target, int attachment, int texture, int level, int layer) =>
      _glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
  late final _glFramebufferTextureLayerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int)>>(
              'glFramebufferTextureLayerEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void texBufferEXT(int target, int internalformat, int buffer) => _glTexBufferEXT(target, internalformat, buffer);
  late final _glTexBufferEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glTexBufferEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texParameterIivEXT(int target, int pname, Pointer<Int> params) => _glTexParameterIivEXT(target, pname, params);
  late final _glTexParameterIivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glTexParameterIivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void texParameterIuivEXT(int target, int pname, Pointer<UnsignedInt> params) =>
      _glTexParameterIuivEXT(target, pname, params);
  late final _glTexParameterIuivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glTexParameterIuivEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getTexParameterIivEXT(int target, int pname, Pointer<Int> params) =>
      _glGetTexParameterIivEXT(target, pname, params);
  late final _glGetTexParameterIivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetTexParameterIivEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getTexParameterIuivEXT(int target, int pname, Pointer<UnsignedInt> params) =>
      _glGetTexParameterIuivEXT(target, pname, params);
  late final _glGetTexParameterIuivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glGetTexParameterIuivEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void clearColorIiEXT(int red, int green, int blue, int alpha) => _glClearColorIiEXT(red, green, blue, alpha);
  late final _glClearColorIiEXT = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glClearColorIiEXT')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void clearColorIuiEXT(int red, int green, int blue, int alpha) => _glClearColorIuiEXT(red, green, blue, alpha);
  late final _glClearColorIuiEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glClearColorIuiEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  int areTexturesResidentEXT(int n, Pointer<UnsignedInt> textures, Pointer<UnsignedChar> residences) =>
      _glAreTexturesResidentEXT(n, textures, residences);
  late final _glAreTexturesResidentEXT =
      _lookup<NativeFunction<UnsignedChar Function(Int, Pointer<UnsignedInt>, Pointer<UnsignedChar>)>>(
              'glAreTexturesResidentEXT')
          .asFunction<int Function(int, Pointer<UnsignedInt>, Pointer<UnsignedChar>)>(isLeaf: true);

  void bindTextureEXT(int target, int texture) => _glBindTextureEXT(target, texture);
  late final _glBindTextureEXT = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindTextureEXT')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteTexturesEXT(int n, Pointer<UnsignedInt> textures) => _glDeleteTexturesEXT(n, textures);
  late final _glDeleteTexturesEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteTexturesEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genTexturesEXT(int n, Pointer<UnsignedInt> textures) => _glGenTexturesEXT(n, textures);
  late final _glGenTexturesEXT = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenTexturesEXT')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isTextureEXT(int texture) => _glIsTextureEXT(texture);
  late final _glIsTextureEXT = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsTextureEXT')
      .asFunction<int Function(int)>(isLeaf: true);

  void prioritizeTexturesEXT(int n, Pointer<UnsignedInt> textures, Pointer<Float> priorities) =>
      _glPrioritizeTexturesEXT(n, textures, priorities);
  late final _glPrioritizeTexturesEXT =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>, Pointer<Float>)>>('glPrioritizeTexturesEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>, Pointer<Float>)>(isLeaf: true);

  void textureNormalEXT(int mode) => _glTextureNormalEXT(mode);
  late final _glTextureNormalEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glTextureNormalEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void texStorage1DEXT(int target, int levels, int internalformat, int width) =>
      _glTexStorage1DEXT(target, levels, internalformat, width);
  late final _glTexStorage1DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int)>>('glTexStorage1DEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texStorage2DEXT(int target, int levels, int internalformat, int width, int height) =>
      _glTexStorage2DEXT(target, levels, internalformat, width, height);
  late final _glTexStorage2DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int)>>('glTexStorage2DEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void texStorage3DEXT(int target, int levels, int internalformat, int width, int height, int depth) =>
      _glTexStorage3DEXT(target, levels, internalformat, width, height, depth);
  late final _glTexStorage3DEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int)>>('glTexStorage3DEXT')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void getQueryObjecti64vEXT(int id, int pname, Pointer<Int64> params) => _glGetQueryObjecti64vEXT(id, pname, params);
  late final _glGetQueryObjecti64vEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int64>)>>('glGetQueryObjecti64vEXT')
          .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void getQueryObjectui64vEXT(int id, int pname, Pointer<Uint64> params) =>
      _glGetQueryObjectui64vEXT(id, pname, params);
  late final _glGetQueryObjectui64vEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Uint64>)>>('glGetQueryObjectui64vEXT')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void beginTransformFeedbackEXT(int primitiveMode) => _glBeginTransformFeedbackEXT(primitiveMode);
  late final _glBeginTransformFeedbackEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBeginTransformFeedbackEXT')
          .asFunction<void Function(int)>(isLeaf: true);

  void endTransformFeedbackEXT() => _glEndTransformFeedbackEXT();
  late final _glEndTransformFeedbackEXT =
      _lookup<NativeFunction<Void Function()>>('glEndTransformFeedbackEXT').asFunction<void Function()>(isLeaf: true);

  void bindBufferRangeEXT(int target, int index, int buffer, int offset, int size) =>
      _glBindBufferRangeEXT(target, index, buffer, offset, size);
  late final _glBindBufferRangeEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long, Long)>>('glBindBufferRangeEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void bindBufferOffsetEXT(int target, int index, int buffer, int offset) =>
      _glBindBufferOffsetEXT(target, index, buffer, offset);
  late final _glBindBufferOffsetEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long)>>('glBindBufferOffsetEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void bindBufferBaseEXT(int target, int index, int buffer) => _glBindBufferBaseEXT(target, index, buffer);
  late final _glBindBufferBaseEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBindBufferBaseEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void transformFeedbackVaryingsEXT(int program, int count, Pointer<Pointer<Char>> varyings, int bufferMode) =>
      _glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
  late final _glTransformFeedbackVaryingsEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Pointer<Char>>, UnsignedInt)>>(
              'glTransformFeedbackVaryingsEXT')
          .asFunction<void Function(int, int, Pointer<Pointer<Char>>, int)>(isLeaf: true);

  void getTransformFeedbackVaryingEXT(int program, int index, int bufSize, Pointer<Int> length, Pointer<Int> size,
          Pointer<UnsignedInt> type, Pointer<Char> name) =>
      _glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
  late final _glGetTransformFeedbackVaryingEXT = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>,
                  Pointer<Char>)>>('glGetTransformFeedbackVaryingEXT')
      .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<Char>)>(
          isLeaf: true);

  void arrayElementEXT(int i) => _glArrayElementEXT(i);
  late final _glArrayElementEXT =
      _lookup<NativeFunction<Void Function(Int)>>('glArrayElementEXT').asFunction<void Function(int)>(isLeaf: true);

  void colorPointerEXT(int size, int type, int stride, int count, Pointer<Void> pointer) =>
      _glColorPointerEXT(size, type, stride, count, pointer);
  late final _glColorPointerEXT =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Int, Pointer<Void>)>>('glColorPointerEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void drawArraysEXT(int mode, int first, int count) => _glDrawArraysEXT(mode, first, count);
  late final _glDrawArraysEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int)>>('glDrawArraysEXT')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void edgeFlagPointerEXT(int stride, int count, Pointer<UnsignedChar> pointer) =>
      _glEdgeFlagPointerEXT(stride, count, pointer);
  late final _glEdgeFlagPointerEXT =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<UnsignedChar>)>>('glEdgeFlagPointerEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void getPointervEXT(int pname, Pointer<Pointer<Void>> params) => _glGetPointervEXT(pname, params);
  late final _glGetPointervEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Pointer<Void>>)>>('glGetPointervEXT')
          .asFunction<void Function(int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void indexPointerEXT(int type, int stride, int count, Pointer<Void> pointer) =>
      _glIndexPointerEXT(type, stride, count, pointer);
  late final _glIndexPointerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Void>)>>('glIndexPointerEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void normalPointerEXT(int type, int stride, int count, Pointer<Void> pointer) =>
      _glNormalPointerEXT(type, stride, count, pointer);
  late final _glNormalPointerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Void>)>>('glNormalPointerEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void texCoordPointerEXT(int size, int type, int stride, int count, Pointer<Void> pointer) =>
      _glTexCoordPointerEXT(size, type, stride, count, pointer);
  late final _glTexCoordPointerEXT =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Int, Pointer<Void>)>>('glTexCoordPointerEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void vertexPointerEXT(int size, int type, int stride, int count, Pointer<Void> pointer) =>
      _glVertexPointerEXT(size, type, stride, count, pointer);
  late final _glVertexPointerEXT =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Int, Pointer<Void>)>>('glVertexPointerEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void vertexAttribL1dEXT(int index, double x) => _glVertexAttribL1dEXT(index, x);
  late final _glVertexAttribL1dEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Double)>>('glVertexAttribL1dEXT')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void vertexAttribL2dEXT(int index, double x, double y) => _glVertexAttribL2dEXT(index, x, y);
  late final _glVertexAttribL2dEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double)>>('glVertexAttribL2dEXT')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void vertexAttribL3dEXT(int index, double x, double y, double z) => _glVertexAttribL3dEXT(index, x, y, z);
  late final _glVertexAttribL3dEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glVertexAttribL3dEXT')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void vertexAttribL4dEXT(int index, double x, double y, double z, double w) =>
      _glVertexAttribL4dEXT(index, x, y, z, w);
  late final _glVertexAttribL4dEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double)>>('glVertexAttribL4dEXT')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void vertexAttribL1dvEXT(int index, Pointer<Double> v) => _glVertexAttribL1dvEXT(index, v);
  late final _glVertexAttribL1dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttribL1dvEXT')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribL2dvEXT(int index, Pointer<Double> v) => _glVertexAttribL2dvEXT(index, v);
  late final _glVertexAttribL2dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttribL2dvEXT')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribL3dvEXT(int index, Pointer<Double> v) => _glVertexAttribL3dvEXT(index, v);
  late final _glVertexAttribL3dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttribL3dvEXT')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribL4dvEXT(int index, Pointer<Double> v) => _glVertexAttribL4dvEXT(index, v);
  late final _glVertexAttribL4dvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttribL4dvEXT')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribLPointerEXT(int index, int size, int type, int stride, Pointer<Void> pointer) =>
      _glVertexAttribLPointerEXT(index, size, type, stride, pointer);
  late final _glVertexAttribLPointerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glVertexAttribLPointerEXT')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getVertexAttribLdvEXT(int index, int pname, Pointer<Double> params) =>
      _glGetVertexAttribLdvEXT(index, pname, params);
  late final _glGetVertexAttribLdvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetVertexAttribLdvEXT')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void beginVertexShaderEXT() => _glBeginVertexShaderEXT();
  late final _glBeginVertexShaderEXT =
      _lookup<NativeFunction<Void Function()>>('glBeginVertexShaderEXT').asFunction<void Function()>(isLeaf: true);

  void endVertexShaderEXT() => _glEndVertexShaderEXT();
  late final _glEndVertexShaderEXT =
      _lookup<NativeFunction<Void Function()>>('glEndVertexShaderEXT').asFunction<void Function()>(isLeaf: true);

  void bindVertexShaderEXT(int id) => _glBindVertexShaderEXT(id);
  late final _glBindVertexShaderEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBindVertexShaderEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  int genVertexShadersEXT(int range) => _glGenVertexShadersEXT(range);
  late final _glGenVertexShadersEXT =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt)>>('glGenVertexShadersEXT')
          .asFunction<int Function(int)>(isLeaf: true);

  void deleteVertexShaderEXT(int id) => _glDeleteVertexShaderEXT(id);
  late final _glDeleteVertexShaderEXT = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDeleteVertexShaderEXT')
      .asFunction<void Function(int)>(isLeaf: true);

  void shaderOp1EXT(int op, int res, int arg1) => _glShaderOp1EXT(op, res, arg1);
  late final _glShaderOp1EXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glShaderOp1EXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void shaderOp2EXT(int op, int res, int arg1, int arg2) => _glShaderOp2EXT(op, res, arg1, arg2);
  late final _glShaderOp2EXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glShaderOp2EXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void shaderOp3EXT(int op, int res, int arg1, int arg2, int arg3) => _glShaderOp3EXT(op, res, arg1, arg2, arg3);
  late final _glShaderOp3EXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glShaderOp3EXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void swizzleEXT(int res, int in1, int outX, int outY, int outZ, int outW) =>
      _glSwizzleEXT(res, in1, outX, outY, outZ, outW);
  late final _glSwizzleEXT = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glSwizzleEXT')
      .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void writeMaskEXT(int res, int in1, int outX, int outY, int outZ, int outW) =>
      _glWriteMaskEXT(res, in1, outX, outY, outZ, outW);
  late final _glWriteMaskEXT = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glWriteMaskEXT')
      .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void insertComponentEXT(int res, int src, int num) => _glInsertComponentEXT(res, src, num);
  late final _glInsertComponentEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glInsertComponentEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void extractComponentEXT(int res, int src, int num) => _glExtractComponentEXT(res, src, num);
  late final _glExtractComponentEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glExtractComponentEXT')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  int genSymbolsEXT(int datatype, int storagetype, int range, int components) =>
      _glGenSymbolsEXT(datatype, storagetype, range, components);
  late final _glGenSymbolsEXT =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glGenSymbolsEXT')
          .asFunction<int Function(int, int, int, int)>(isLeaf: true);

  void setInvariantEXT(int id, int type, Pointer<Void> addr) => _glSetInvariantEXT(id, type, addr);
  late final _glSetInvariantEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>)>>('glSetInvariantEXT')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void setLocalConstantEXT(int id, int type, Pointer<Void> addr) => _glSetLocalConstantEXT(id, type, addr);
  late final _glSetLocalConstantEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>)>>('glSetLocalConstantEXT')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void variantbvEXT(int id, Pointer<SignedChar> addr) => _glVariantbvEXT(id, addr);
  late final _glVariantbvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<SignedChar>)>>('glVariantbvEXT')
          .asFunction<void Function(int, Pointer<SignedChar>)>(isLeaf: true);

  void variantsvEXT(int id, Pointer<Short> addr) => _glVariantsvEXT(id, addr);
  late final _glVariantsvEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVariantsvEXT')
      .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void variantivEXT(int id, Pointer<Int> addr) => _glVariantivEXT(id, addr);
  late final _glVariantivEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glVariantivEXT')
      .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void variantfvEXT(int id, Pointer<Float> addr) => _glVariantfvEXT(id, addr);
  late final _glVariantfvEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVariantfvEXT')
      .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void variantdvEXT(int id, Pointer<Double> addr) => _glVariantdvEXT(id, addr);
  late final _glVariantdvEXT = _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVariantdvEXT')
      .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void variantubvEXT(int id, Pointer<UnsignedChar> addr) => _glVariantubvEXT(id, addr);
  late final _glVariantubvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glVariantubvEXT')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void variantusvEXT(int id, Pointer<UnsignedShort> addr) => _glVariantusvEXT(id, addr);
  late final _glVariantusvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVariantusvEXT')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void variantuivEXT(int id, Pointer<UnsignedInt> addr) => _glVariantuivEXT(id, addr);
  late final _glVariantuivEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glVariantuivEXT')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void variantPointerEXT(int id, int type, int stride, Pointer<Void> addr) =>
      _glVariantPointerEXT(id, type, stride, addr);
  late final _glVariantPointerEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glVariantPointerEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void enableVariantClientStateEXT(int id) => _glEnableVariantClientStateEXT(id);
  late final _glEnableVariantClientStateEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glEnableVariantClientStateEXT')
          .asFunction<void Function(int)>(isLeaf: true);

  void disableVariantClientStateEXT(int id) => _glDisableVariantClientStateEXT(id);
  late final _glDisableVariantClientStateEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDisableVariantClientStateEXT')
          .asFunction<void Function(int)>(isLeaf: true);

  int bindLightParameterEXT(int light, int value) => _glBindLightParameterEXT(light, value);
  late final _glBindLightParameterEXT =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt)>>('glBindLightParameterEXT')
          .asFunction<int Function(int, int)>(isLeaf: true);

  int bindMaterialParameterEXT(int face, int value) => _glBindMaterialParameterEXT(face, value);
  late final _glBindMaterialParameterEXT =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt)>>('glBindMaterialParameterEXT')
          .asFunction<int Function(int, int)>(isLeaf: true);

  int bindTexGenParameterEXT(int unit, int coord, int value) => _glBindTexGenParameterEXT(unit, coord, value);
  late final _glBindTexGenParameterEXT =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBindTexGenParameterEXT')
          .asFunction<int Function(int, int, int)>(isLeaf: true);

  int bindTextureUnitParameterEXT(int unit, int value) => _glBindTextureUnitParameterEXT(unit, value);
  late final _glBindTextureUnitParameterEXT =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt)>>('glBindTextureUnitParameterEXT')
          .asFunction<int Function(int, int)>(isLeaf: true);

  int bindParameterEXT(int value) => _glBindParameterEXT(value);
  late final _glBindParameterEXT = _lookup<NativeFunction<UnsignedInt Function(UnsignedInt)>>('glBindParameterEXT')
      .asFunction<int Function(int)>(isLeaf: true);

  int isVariantEnabledEXT(int id, int cap) => _glIsVariantEnabledEXT(id, cap);
  late final _glIsVariantEnabledEXT =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt, UnsignedInt)>>('glIsVariantEnabledEXT')
          .asFunction<int Function(int, int)>(isLeaf: true);

  void getVariantBooleanvEXT(int id, int value, Pointer<UnsignedChar> data) =>
      _glGetVariantBooleanvEXT(id, value, data);
  late final _glGetVariantBooleanvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedChar>)>>('glGetVariantBooleanvEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void getVariantIntegervEXT(int id, int value, Pointer<Int> data) => _glGetVariantIntegervEXT(id, value, data);
  late final _glGetVariantIntegervEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVariantIntegervEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVariantFloatvEXT(int id, int value, Pointer<Float> data) => _glGetVariantFloatvEXT(id, value, data);
  late final _glGetVariantFloatvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetVariantFloatvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getVariantPointervEXT(int id, int value, Pointer<Pointer<Void>> data) =>
      _glGetVariantPointervEXT(id, value, data);
  late final _glGetVariantPointervEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>(
              'glGetVariantPointervEXT')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void getInvariantBooleanvEXT(int id, int value, Pointer<UnsignedChar> data) =>
      _glGetInvariantBooleanvEXT(id, value, data);
  late final _glGetInvariantBooleanvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedChar>)>>(
              'glGetInvariantBooleanvEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void getInvariantIntegervEXT(int id, int value, Pointer<Int> data) => _glGetInvariantIntegervEXT(id, value, data);
  late final _glGetInvariantIntegervEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetInvariantIntegervEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getInvariantFloatvEXT(int id, int value, Pointer<Float> data) => _glGetInvariantFloatvEXT(id, value, data);
  late final _glGetInvariantFloatvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetInvariantFloatvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getLocalConstantBooleanvEXT(int id, int value, Pointer<UnsignedChar> data) =>
      _glGetLocalConstantBooleanvEXT(id, value, data);
  late final _glGetLocalConstantBooleanvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedChar>)>>(
              'glGetLocalConstantBooleanvEXT')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void getLocalConstantIntegervEXT(int id, int value, Pointer<Int> data) =>
      _glGetLocalConstantIntegervEXT(id, value, data);
  late final _glGetLocalConstantIntegervEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetLocalConstantIntegervEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getLocalConstantFloatvEXT(int id, int value, Pointer<Float> data) =>
      _glGetLocalConstantFloatvEXT(id, value, data);
  late final _glGetLocalConstantFloatvEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetLocalConstantFloatvEXT')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void vertexWeightfEXT(double weight) => _glVertexWeightfEXT(weight);
  late final _glVertexWeightfEXT = _lookup<NativeFunction<Void Function(Float)>>('glVertexWeightfEXT')
      .asFunction<void Function(double)>(isLeaf: true);

  void vertexWeightfvEXT(Pointer<Float> weight) => _glVertexWeightfvEXT(weight);
  late final _glVertexWeightfvEXT = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glVertexWeightfvEXT')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void vertexWeightPointerEXT(int size, int type, int stride, Pointer<Void> pointer) =>
      _glVertexWeightPointerEXT(size, type, stride, pointer);
  late final _glVertexWeightPointerEXT =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Void>)>>('glVertexWeightPointerEXT')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  int acquireKeyedMutexWin32EXT(int memory, int key, int timeout) => _glAcquireKeyedMutexWin32EXT(memory, key, timeout);
  late final _glAcquireKeyedMutexWin32EXT =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt, Uint64, UnsignedInt)>>('glAcquireKeyedMutexWin32EXT')
          .asFunction<int Function(int, int, int)>(isLeaf: true);

  int releaseKeyedMutexWin32EXT(int memory, int key) => _glReleaseKeyedMutexWin32EXT(memory, key);
  late final _glReleaseKeyedMutexWin32EXT =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt, Uint64)>>('glReleaseKeyedMutexWin32EXT')
          .asFunction<int Function(int, int)>(isLeaf: true);

  void windowRectanglesEXT(int mode, int count, Pointer<Int> box) => _glWindowRectanglesEXT(mode, count, box);
  late final _glWindowRectanglesEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>)>>('glWindowRectanglesEXT')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  Pointer<NativeType> importSyncEXT(int external_sync_type, int external_sync, int flags) =>
      _glImportSyncEXT(external_sync_type, external_sync, flags);
  late final _glImportSyncEXT =
      _lookup<NativeFunction<Pointer<NativeType> Function(UnsignedInt, Long, UnsignedInt)>>('glImportSyncEXT')
          .asFunction<Pointer<NativeType> Function(int, int, int)>(isLeaf: true);

  void frameTerminatorGREMEDY() => _glFrameTerminatorGREMEDY();
  late final _glFrameTerminatorGREMEDY =
      _lookup<NativeFunction<Void Function()>>('glFrameTerminatorGREMEDY').asFunction<void Function()>(isLeaf: true);

  void stringMarkerGREMEDY(int len, Pointer<Void> string) => _glStringMarkerGREMEDY(len, string);
  late final _glStringMarkerGREMEDY =
      _lookup<NativeFunction<Void Function(Int, Pointer<Void>)>>('glStringMarkerGREMEDY')
          .asFunction<void Function(int, Pointer<Void>)>(isLeaf: true);

  void imageTransformParameteriHP(int target, int pname, int param) =>
      _glImageTransformParameteriHP(target, pname, param);
  late final _glImageTransformParameteriHP =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glImageTransformParameteriHP')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void imageTransformParameterfHP(int target, int pname, double param) =>
      _glImageTransformParameterfHP(target, pname, param);
  late final _glImageTransformParameterfHP =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glImageTransformParameterfHP')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void imageTransformParameterivHP(int target, int pname, Pointer<Int> params) =>
      _glImageTransformParameterivHP(target, pname, params);
  late final _glImageTransformParameterivHP =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glImageTransformParameterivHP')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void imageTransformParameterfvHP(int target, int pname, Pointer<Float> params) =>
      _glImageTransformParameterfvHP(target, pname, params);
  late final _glImageTransformParameterfvHP =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glImageTransformParameterfvHP')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getImageTransformParameterivHP(int target, int pname, Pointer<Int> params) =>
      _glGetImageTransformParameterivHP(target, pname, params);
  late final _glGetImageTransformParameterivHP =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetImageTransformParameterivHP')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getImageTransformParameterfvHP(int target, int pname, Pointer<Float> params) =>
      _glGetImageTransformParameterfvHP(target, pname, params);
  late final _glGetImageTransformParameterfvHP =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetImageTransformParameterfvHP')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void multiModeDrawArraysIBM(
          Pointer<UnsignedInt> mode, Pointer<Int> first, Pointer<Int> count, int primcount, int modestride) =>
      _glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
  late final _glMultiModeDrawArraysIBM =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>, Pointer<Int>, Pointer<Int>, Int, Int)>>(
              'glMultiModeDrawArraysIBM')
          .asFunction<void Function(Pointer<UnsignedInt>, Pointer<Int>, Pointer<Int>, int, int)>(isLeaf: true);

  void multiModeDrawElementsIBM(Pointer<UnsignedInt> mode, Pointer<Int> count, int type, Pointer<Pointer<Void>> indices,
          int primcount, int modestride) =>
      _glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
  late final _glMultiModeDrawElementsIBM = _lookup<
          NativeFunction<
              Void Function(Pointer<UnsignedInt>, Pointer<Int>, UnsignedInt, Pointer<Pointer<Void>>, Int,
                  Int)>>('glMultiModeDrawElementsIBM')
      .asFunction<void Function(Pointer<UnsignedInt>, Pointer<Int>, int, Pointer<Pointer<Void>>, int, int)>(
          isLeaf: true);

  void flushStaticDataIBM(int target) => _glFlushStaticDataIBM(target);
  late final _glFlushStaticDataIBM = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glFlushStaticDataIBM')
      .asFunction<void Function(int)>(isLeaf: true);

  void colorPointerListIBM(int size, int type, int stride, Pointer<Pointer<Void>> pointer, int ptrstride) =>
      _glColorPointerListIBM(size, type, stride, pointer, ptrstride);
  late final _glColorPointerListIBM =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Pointer<Void>>, Int)>>(
              'glColorPointerListIBM')
          .asFunction<void Function(int, int, int, Pointer<Pointer<Void>>, int)>(isLeaf: true);

  void secondaryColorPointerListIBM(int size, int type, int stride, Pointer<Pointer<Void>> pointer, int ptrstride) =>
      _glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
  late final _glSecondaryColorPointerListIBM =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Pointer<Void>>, Int)>>(
              'glSecondaryColorPointerListIBM')
          .asFunction<void Function(int, int, int, Pointer<Pointer<Void>>, int)>(isLeaf: true);

  void edgeFlagPointerListIBM(int stride, Pointer<Pointer<UnsignedChar>> pointer, int ptrstride) =>
      _glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
  late final _glEdgeFlagPointerListIBM =
      _lookup<NativeFunction<Void Function(Int, Pointer<Pointer<UnsignedChar>>, Int)>>('glEdgeFlagPointerListIBM')
          .asFunction<void Function(int, Pointer<Pointer<UnsignedChar>>, int)>(isLeaf: true);

  void fogCoordPointerListIBM(int type, int stride, Pointer<Pointer<Void>> pointer, int ptrstride) =>
      _glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
  late final _glFogCoordPointerListIBM =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Pointer<Void>>, Int)>>('glFogCoordPointerListIBM')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>, int)>(isLeaf: true);

  void indexPointerListIBM(int type, int stride, Pointer<Pointer<Void>> pointer, int ptrstride) =>
      _glIndexPointerListIBM(type, stride, pointer, ptrstride);
  late final _glIndexPointerListIBM =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Pointer<Void>>, Int)>>('glIndexPointerListIBM')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>, int)>(isLeaf: true);

  void normalPointerListIBM(int type, int stride, Pointer<Pointer<Void>> pointer, int ptrstride) =>
      _glNormalPointerListIBM(type, stride, pointer, ptrstride);
  late final _glNormalPointerListIBM =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Pointer<Void>>, Int)>>('glNormalPointerListIBM')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>, int)>(isLeaf: true);

  void texCoordPointerListIBM(int size, int type, int stride, Pointer<Pointer<Void>> pointer, int ptrstride) =>
      _glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
  late final _glTexCoordPointerListIBM =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Pointer<Void>>, Int)>>(
              'glTexCoordPointerListIBM')
          .asFunction<void Function(int, int, int, Pointer<Pointer<Void>>, int)>(isLeaf: true);

  void vertexPointerListIBM(int size, int type, int stride, Pointer<Pointer<Void>> pointer, int ptrstride) =>
      _glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
  late final _glVertexPointerListIBM =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int, Pointer<Pointer<Void>>, Int)>>(
              'glVertexPointerListIBM')
          .asFunction<void Function(int, int, int, Pointer<Pointer<Void>>, int)>(isLeaf: true);

  void blendFuncSeparateINGR(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) =>
      _glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  late final _glBlendFuncSeparateINGR =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glBlendFuncSeparateINGR')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void applyFramebufferAttachmentCMAAINTEL() => _glApplyFramebufferAttachmentCMAAINTEL();
  late final _glApplyFramebufferAttachmentCMAAINTEL =
      _lookup<NativeFunction<Void Function()>>('glApplyFramebufferAttachmentCMAAINTEL')
          .asFunction<void Function()>(isLeaf: true);

  void syncTextureINTEL(int texture) => _glSyncTextureINTEL(texture);
  late final _glSyncTextureINTEL = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glSyncTextureINTEL')
      .asFunction<void Function(int)>(isLeaf: true);

  void unmapTexture2DINTEL(int texture, int level) => _glUnmapTexture2DINTEL(texture, level);
  late final _glUnmapTexture2DINTEL = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glUnmapTexture2DINTEL')
      .asFunction<void Function(int, int)>(isLeaf: true);

  Pointer<Void> mapTexture2DINTEL(
          int texture, int level, int access, Pointer<Int> stride, Pointer<UnsignedInt> layout) =>
      _glMapTexture2DINTEL(texture, level, access, stride, layout);
  late final _glMapTexture2DINTEL = _lookup<
          NativeFunction<
              Pointer<Void> Function(
                  UnsignedInt, Int, UnsignedInt, Pointer<Int>, Pointer<UnsignedInt>)>>('glMapTexture2DINTEL')
      .asFunction<Pointer<Void> Function(int, int, int, Pointer<Int>, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertexPointervINTEL(int size, int type, Pointer<Pointer<Void>> pointer) =>
      _glVertexPointervINTEL(size, type, pointer);
  late final _glVertexPointervINTEL =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Pointer<Pointer<Void>>)>>('glVertexPointervINTEL')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void normalPointervINTEL(int type, Pointer<Pointer<Void>> pointer) => _glNormalPointervINTEL(type, pointer);
  late final _glNormalPointervINTEL =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Pointer<Void>>)>>('glNormalPointervINTEL')
          .asFunction<void Function(int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void colorPointervINTEL(int size, int type, Pointer<Pointer<Void>> pointer) =>
      _glColorPointervINTEL(size, type, pointer);
  late final _glColorPointervINTEL =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Pointer<Pointer<Void>>)>>('glColorPointervINTEL')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void texCoordPointervINTEL(int size, int type, Pointer<Pointer<Void>> pointer) =>
      _glTexCoordPointervINTEL(size, type, pointer);
  late final _glTexCoordPointervINTEL =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Pointer<Pointer<Void>>)>>('glTexCoordPointervINTEL')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void beginPerfQueryINTEL(int queryHandle) => _glBeginPerfQueryINTEL(queryHandle);
  late final _glBeginPerfQueryINTEL = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBeginPerfQueryINTEL')
      .asFunction<void Function(int)>(isLeaf: true);

  void createPerfQueryINTEL(int queryId, Pointer<UnsignedInt> queryHandle) =>
      _glCreatePerfQueryINTEL(queryId, queryHandle);
  late final _glCreatePerfQueryINTEL =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glCreatePerfQueryINTEL')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deletePerfQueryINTEL(int queryHandle) => _glDeletePerfQueryINTEL(queryHandle);
  late final _glDeletePerfQueryINTEL = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDeletePerfQueryINTEL')
      .asFunction<void Function(int)>(isLeaf: true);

  void endPerfQueryINTEL(int queryHandle) => _glEndPerfQueryINTEL(queryHandle);
  late final _glEndPerfQueryINTEL = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glEndPerfQueryINTEL')
      .asFunction<void Function(int)>(isLeaf: true);

  void getFirstPerfQueryIdINTEL(Pointer<UnsignedInt> queryId) => _glGetFirstPerfQueryIdINTEL(queryId);
  late final _glGetFirstPerfQueryIdINTEL =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>)>>('glGetFirstPerfQueryIdINTEL')
          .asFunction<void Function(Pointer<UnsignedInt>)>(isLeaf: true);

  void getNextPerfQueryIdINTEL(int queryId, Pointer<UnsignedInt> nextQueryId) =>
      _glGetNextPerfQueryIdINTEL(queryId, nextQueryId);
  late final _glGetNextPerfQueryIdINTEL =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedInt>)>>('glGetNextPerfQueryIdINTEL')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getPerfCounterInfoINTEL(
          int queryId,
          int counterId,
          int counterNameLength,
          Pointer<Char> counterName,
          int counterDescLength,
          Pointer<Char> counterDesc,
          Pointer<UnsignedInt> counterOffset,
          Pointer<UnsignedInt> counterDataSize,
          Pointer<UnsignedInt> counterTypeEnum,
          Pointer<UnsignedInt> counterDataTypeEnum,
          Pointer<Uint64> rawCounterMaxValue) =>
      _glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc,
          counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
  late final _glGetPerfCounterInfoINTEL = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  Pointer<Char>,
                  UnsignedInt,
                  Pointer<Char>,
                  Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>,
                  Pointer<Uint64>)>>('glGetPerfCounterInfoINTEL')
      .asFunction<
          void Function(int, int, int, Pointer<Char>, int, Pointer<Char>, Pointer<UnsignedInt>, Pointer<UnsignedInt>,
              Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<Uint64>)>();

  void getPerfQueryDataINTEL(
          int queryHandle, int flags, int dataSize, Pointer<Void> data, Pointer<UnsignedInt> bytesWritten) =>
      _glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);
  late final _glGetPerfQueryDataINTEL =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Void>, Pointer<UnsignedInt>)>>(
              'glGetPerfQueryDataINTEL')
          .asFunction<void Function(int, int, int, Pointer<Void>, Pointer<UnsignedInt>)>(isLeaf: true);

  void getPerfQueryIdByNameINTEL(Pointer<Char> queryName, Pointer<UnsignedInt> queryId) =>
      _glGetPerfQueryIdByNameINTEL(queryName, queryId);
  late final _glGetPerfQueryIdByNameINTEL =
      _lookup<NativeFunction<Void Function(Pointer<Char>, Pointer<UnsignedInt>)>>('glGetPerfQueryIdByNameINTEL')
          .asFunction<void Function(Pointer<Char>, Pointer<UnsignedInt>)>(isLeaf: true);

  void getPerfQueryInfoINTEL(int queryId, int queryNameLength, Pointer<Char> queryName, Pointer<UnsignedInt> dataSize,
          Pointer<UnsignedInt> noCounters, Pointer<UnsignedInt> noInstances, Pointer<UnsignedInt> capsMask) =>
      _glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
  late final _glGetPerfQueryInfoINTEL = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Pointer<Char>, Pointer<UnsignedInt>, Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>, Pointer<UnsignedInt>)>>('glGetPerfQueryInfoINTEL')
      .asFunction<
          void Function(int, int, Pointer<Char>, Pointer<UnsignedInt>, Pointer<UnsignedInt>, Pointer<UnsignedInt>,
              Pointer<UnsignedInt>)>();

  void framebufferParameteriMESA(int target, int pname, int param) =>
      _glFramebufferParameteriMESA(target, pname, param);
  late final _glFramebufferParameteriMESA =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glFramebufferParameteriMESA')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void getFramebufferParameterivMESA(int target, int pname, Pointer<Int> params) =>
      _glGetFramebufferParameterivMESA(target, pname, params);
  late final _glGetFramebufferParameterivMESA =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetFramebufferParameterivMESA')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void resizeBuffersMESA() => _glResizeBuffersMESA();
  late final _glResizeBuffersMESA =
      _lookup<NativeFunction<Void Function()>>('glResizeBuffersMESA').asFunction<void Function()>(isLeaf: true);

  void windowPos2dMESA(double x, double y) => _glWindowPos2dMESA(x, y);
  late final _glWindowPos2dMESA = _lookup<NativeFunction<Void Function(Double, Double)>>('glWindowPos2dMESA')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void windowPos2dvMESA(Pointer<Double> v) => _glWindowPos2dvMESA(v);
  late final _glWindowPos2dvMESA = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glWindowPos2dvMESA')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void windowPos2fMESA(double x, double y) => _glWindowPos2fMESA(x, y);
  late final _glWindowPos2fMESA = _lookup<NativeFunction<Void Function(Float, Float)>>('glWindowPos2fMESA')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void windowPos2fvMESA(Pointer<Float> v) => _glWindowPos2fvMESA(v);
  late final _glWindowPos2fvMESA = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glWindowPos2fvMESA')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void windowPos2iMESA(int x, int y) => _glWindowPos2iMESA(x, y);
  late final _glWindowPos2iMESA = _lookup<NativeFunction<Void Function(Int, Int)>>('glWindowPos2iMESA')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void windowPos2ivMESA(Pointer<Int> v) => _glWindowPos2ivMESA(v);
  late final _glWindowPos2ivMESA = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glWindowPos2ivMESA')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void windowPos2sMESA(int x, int y) => _glWindowPos2sMESA(x, y);
  late final _glWindowPos2sMESA = _lookup<NativeFunction<Void Function(Short, Short)>>('glWindowPos2sMESA')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void windowPos2svMESA(Pointer<Short> v) => _glWindowPos2svMESA(v);
  late final _glWindowPos2svMESA = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glWindowPos2svMESA')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void windowPos3dMESA(double x, double y, double z) => _glWindowPos3dMESA(x, y, z);
  late final _glWindowPos3dMESA = _lookup<NativeFunction<Void Function(Double, Double, Double)>>('glWindowPos3dMESA')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void windowPos3dvMESA(Pointer<Double> v) => _glWindowPos3dvMESA(v);
  late final _glWindowPos3dvMESA = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glWindowPos3dvMESA')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void windowPos3fMESA(double x, double y, double z) => _glWindowPos3fMESA(x, y, z);
  late final _glWindowPos3fMESA = _lookup<NativeFunction<Void Function(Float, Float, Float)>>('glWindowPos3fMESA')
      .asFunction<void Function(double, double, double)>(isLeaf: true);

  void windowPos3fvMESA(Pointer<Float> v) => _glWindowPos3fvMESA(v);
  late final _glWindowPos3fvMESA = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glWindowPos3fvMESA')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void windowPos3iMESA(int x, int y, int z) => _glWindowPos3iMESA(x, y, z);
  late final _glWindowPos3iMESA = _lookup<NativeFunction<Void Function(Int, Int, Int)>>('glWindowPos3iMESA')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void windowPos3ivMESA(Pointer<Int> v) => _glWindowPos3ivMESA(v);
  late final _glWindowPos3ivMESA = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glWindowPos3ivMESA')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void windowPos3sMESA(int x, int y, int z) => _glWindowPos3sMESA(x, y, z);
  late final _glWindowPos3sMESA = _lookup<NativeFunction<Void Function(Short, Short, Short)>>('glWindowPos3sMESA')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void windowPos3svMESA(Pointer<Short> v) => _glWindowPos3svMESA(v);
  late final _glWindowPos3svMESA = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glWindowPos3svMESA')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void windowPos4dMESA(double x, double y, double z, double w) => _glWindowPos4dMESA(x, y, z, w);
  late final _glWindowPos4dMESA =
      _lookup<NativeFunction<Void Function(Double, Double, Double, Double)>>('glWindowPos4dMESA')
          .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void windowPos4dvMESA(Pointer<Double> v) => _glWindowPos4dvMESA(v);
  late final _glWindowPos4dvMESA = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glWindowPos4dvMESA')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void windowPos4fMESA(double x, double y, double z, double w) => _glWindowPos4fMESA(x, y, z, w);
  late final _glWindowPos4fMESA =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float)>>('glWindowPos4fMESA')
          .asFunction<void Function(double, double, double, double)>(isLeaf: true);

  void windowPos4fvMESA(Pointer<Float> v) => _glWindowPos4fvMESA(v);
  late final _glWindowPos4fvMESA = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glWindowPos4fvMESA')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void windowPos4iMESA(int x, int y, int z, int w) => _glWindowPos4iMESA(x, y, z, w);
  late final _glWindowPos4iMESA = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glWindowPos4iMESA')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void windowPos4ivMESA(Pointer<Int> v) => _glWindowPos4ivMESA(v);
  late final _glWindowPos4ivMESA = _lookup<NativeFunction<Void Function(Pointer<Int>)>>('glWindowPos4ivMESA')
      .asFunction<void Function(Pointer<Int>)>(isLeaf: true);

  void windowPos4sMESA(int x, int y, int z, int w) => _glWindowPos4sMESA(x, y, z, w);
  late final _glWindowPos4sMESA =
      _lookup<NativeFunction<Void Function(Short, Short, Short, Short)>>('glWindowPos4sMESA')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void windowPos4svMESA(Pointer<Short> v) => _glWindowPos4svMESA(v);
  late final _glWindowPos4svMESA = _lookup<NativeFunction<Void Function(Pointer<Short>)>>('glWindowPos4svMESA')
      .asFunction<void Function(Pointer<Short>)>(isLeaf: true);

  void beginConditionalRenderNVX(int id) => _glBeginConditionalRenderNVX(id);
  late final _glBeginConditionalRenderNVX =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBeginConditionalRenderNVX')
          .asFunction<void Function(int)>(isLeaf: true);

  void endConditionalRenderNVX() => _glEndConditionalRenderNVX();
  late final _glEndConditionalRenderNVX =
      _lookup<NativeFunction<Void Function()>>('glEndConditionalRenderNVX').asFunction<void Function()>(isLeaf: true);

  void uploadGpuMaskNVX(int mask) => _glUploadGpuMaskNVX(mask);
  late final _glUploadGpuMaskNVX = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glUploadGpuMaskNVX')
      .asFunction<void Function(int)>(isLeaf: true);

  void multicastViewportArrayvNVX(int gpu, int first, int count, Pointer<Float> v) =>
      _glMulticastViewportArrayvNVX(gpu, first, count, v);
  late final _glMulticastViewportArrayvNVX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glMulticastViewportArrayvNVX')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void multicastViewportPositionWScaleNVX(int gpu, int index, double xcoeff, double ycoeff) =>
      _glMulticastViewportPositionWScaleNVX(gpu, index, xcoeff, ycoeff);
  late final _glMulticastViewportPositionWScaleNVX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float, Float)>>(
              'glMulticastViewportPositionWScaleNVX')
          .asFunction<void Function(int, int, double, double)>(isLeaf: true);

  void multicastScissorArrayvNVX(int gpu, int first, int count, Pointer<Int> v) =>
      _glMulticastScissorArrayvNVX(gpu, first, count, v);
  late final _glMulticastScissorArrayvNVX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>)>>('glMulticastScissorArrayvNVX')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  int asyncCopyBufferSubDataNVX(
          int waitSemaphoreCount,
          Pointer<UnsignedInt> waitSemaphoreArray,
          Pointer<Uint64> fenceValueArray,
          int readGpu,
          int writeGpuMask,
          int readBuffer,
          int writeBuffer,
          int readOffset,
          int writeOffset,
          int size,
          int signalSemaphoreCount,
          Pointer<UnsignedInt> signalSemaphoreArray,
          Pointer<Uint64> signalValueArray) =>
      _glAsyncCopyBufferSubDataNVX(
          waitSemaphoreCount,
          waitSemaphoreArray,
          fenceValueArray,
          readGpu,
          writeGpuMask,
          readBuffer,
          writeBuffer,
          readOffset,
          writeOffset,
          size,
          signalSemaphoreCount,
          signalSemaphoreArray,
          signalValueArray);
  late final _glAsyncCopyBufferSubDataNVX = _lookup<
          NativeFunction<
              UnsignedInt Function(
                  Int,
                  Pointer<UnsignedInt>,
                  Pointer<Uint64>,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  Long,
                  Long,
                  Long,
                  Int,
                  Pointer<UnsignedInt>,
                  Pointer<Uint64>)>>('glAsyncCopyBufferSubDataNVX')
      .asFunction<
          int Function(int, Pointer<UnsignedInt>, Pointer<Uint64>, int, int, int, int, int, int, int, int,
              Pointer<UnsignedInt>, Pointer<Uint64>)>();

  int asyncCopyImageSubDataNVX(
          int waitSemaphoreCount,
          Pointer<UnsignedInt> waitSemaphoreArray,
          Pointer<Uint64> waitValueArray,
          int srcGpu,
          int dstGpuMask,
          int srcName,
          int srcTarget,
          int srcLevel,
          int srcX,
          int srcY,
          int srcZ,
          int dstName,
          int dstTarget,
          int dstLevel,
          int dstX,
          int dstY,
          int dstZ,
          int srcWidth,
          int srcHeight,
          int srcDepth,
          int signalSemaphoreCount,
          Pointer<UnsignedInt> signalSemaphoreArray,
          Pointer<Uint64> signalValueArray) =>
      _glAsyncCopyImageSubDataNVX(
          waitSemaphoreCount,
          waitSemaphoreArray,
          waitValueArray,
          srcGpu,
          dstGpuMask,
          srcName,
          srcTarget,
          srcLevel,
          srcX,
          srcY,
          srcZ,
          dstName,
          dstTarget,
          dstLevel,
          dstX,
          dstY,
          dstZ,
          srcWidth,
          srcHeight,
          srcDepth,
          signalSemaphoreCount,
          signalSemaphoreArray,
          signalValueArray);
  late final _glAsyncCopyImageSubDataNVX = _lookup<
          NativeFunction<
              UnsignedInt Function(
                  Int,
                  Pointer<UnsignedInt>,
                  Pointer<Uint64>,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  Int,
                  Int,
                  Int,
                  Int,
                  UnsignedInt,
                  UnsignedInt,
                  Int,
                  Int,
                  Int,
                  Int,
                  Int,
                  Int,
                  Int,
                  Int,
                  Pointer<UnsignedInt>,
                  Pointer<Uint64>)>>('glAsyncCopyImageSubDataNVX')
      .asFunction<
          int Function(int, Pointer<UnsignedInt>, Pointer<Uint64>, int, int, int, int, int, int, int, int, int, int,
              int, int, int, int, int, int, int, int, Pointer<UnsignedInt>, Pointer<Uint64>)>();

  void lGPUNamedBufferSubDataNVX(int gpuMask, int buffer, int offset, int size, Pointer<Void> data) =>
      _glLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data);
  late final _glLGPUNamedBufferSubDataNVX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Long, Long, Pointer<Void>)>>(
              'glLGPUNamedBufferSubDataNVX')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void lGPUCopyImageSubDataNVX(
          int sourceGpu,
          int destinationGpuMask,
          int srcName,
          int srcTarget,
          int srcLevel,
          int srcX,
          int srxY,
          int srcZ,
          int dstName,
          int dstTarget,
          int dstLevel,
          int dstX,
          int dstY,
          int dstZ,
          int width,
          int height,
          int depth) =>
      _glLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName,
          dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  late final _glLGPUCopyImageSubDataNVX = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Int, Int, Int, UnsignedInt,
                  UnsignedInt, Int, Int, Int, Int, Int, Int, Int)>>('glLGPUCopyImageSubDataNVX')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)>(
          isLeaf: true);

  void lGPUInterlockNVX() => _glLGPUInterlockNVX();
  late final _glLGPUInterlockNVX =
      _lookup<NativeFunction<Void Function()>>('glLGPUInterlockNVX').asFunction<void Function()>(isLeaf: true);

  int createProgressFenceNVX() => _glCreateProgressFenceNVX();
  late final _glCreateProgressFenceNVX = _lookup<NativeFunction<UnsignedInt Function()>>('glCreateProgressFenceNVX')
      .asFunction<int Function()>(isLeaf: true);

  void signalSemaphoreui64NVX(
          int signalGpu, int fenceObjectCount, Pointer<UnsignedInt> semaphoreArray, Pointer<Uint64> fenceValueArray) =>
      _glSignalSemaphoreui64NVX(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
  late final _glSignalSemaphoreui64NVX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>, Pointer<Uint64>)>>(
              'glSignalSemaphoreui64NVX')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>, Pointer<Uint64>)>(isLeaf: true);

  void waitSemaphoreui64NVX(
          int waitGpu, int fenceObjectCount, Pointer<UnsignedInt> semaphoreArray, Pointer<Uint64> fenceValueArray) =>
      _glWaitSemaphoreui64NVX(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
  late final _glWaitSemaphoreui64NVX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>, Pointer<Uint64>)>>(
              'glWaitSemaphoreui64NVX')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>, Pointer<Uint64>)>(isLeaf: true);

  void clientWaitSemaphoreui64NVX(
          int fenceObjectCount, Pointer<UnsignedInt> semaphoreArray, Pointer<Uint64> fenceValueArray) =>
      _glClientWaitSemaphoreui64NVX(fenceObjectCount, semaphoreArray, fenceValueArray);
  late final _glClientWaitSemaphoreui64NVX =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>, Pointer<Uint64>)>>('glClientWaitSemaphoreui64NVX')
          .asFunction<void Function(int, Pointer<UnsignedInt>, Pointer<Uint64>)>(isLeaf: true);

  void alphaToCoverageDitherControlNV(int mode) => _glAlphaToCoverageDitherControlNV(mode);
  late final _glAlphaToCoverageDitherControlNV =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glAlphaToCoverageDitherControlNV')
          .asFunction<void Function(int)>(isLeaf: true);

  void multiDrawArraysIndirectBindlessNV(
          int mode, Pointer<Void> indirect, int drawCount, int stride, int vertexBufferCount) =>
      _glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount);
  late final _glMultiDrawArraysIndirectBindlessNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>, Int, Int, Int)>>(
              'glMultiDrawArraysIndirectBindlessNV')
          .asFunction<void Function(int, Pointer<Void>, int, int, int)>(isLeaf: true);

  void multiDrawElementsIndirectBindlessNV(
          int mode, int type, Pointer<Void> indirect, int drawCount, int stride, int vertexBufferCount) =>
      _glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount);
  late final _glMultiDrawElementsIndirectBindlessNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>, Int, Int, Int)>>(
              'glMultiDrawElementsIndirectBindlessNV')
          .asFunction<void Function(int, int, Pointer<Void>, int, int, int)>(isLeaf: true);

  void multiDrawArraysIndirectBindlessCountNV(
          int mode, Pointer<Void> indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) =>
      _glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
  late final _glMultiDrawArraysIndirectBindlessCountNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>, Int, Int, Int, Int)>>(
              'glMultiDrawArraysIndirectBindlessCountNV')
          .asFunction<void Function(int, Pointer<Void>, int, int, int, int)>(isLeaf: true);

  void multiDrawElementsIndirectBindlessCountNV(int mode, int type, Pointer<Void> indirect, int drawCount,
          int maxDrawCount, int stride, int vertexBufferCount) =>
      _glMultiDrawElementsIndirectBindlessCountNV(
          mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
  late final _glMultiDrawElementsIndirectBindlessCountNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Void>, Int, Int, Int, Int)>>(
              'glMultiDrawElementsIndirectBindlessCountNV')
          .asFunction<void Function(int, int, Pointer<Void>, int, int, int, int)>(isLeaf: true);

  int getTextureHandleNV(int texture) => _glGetTextureHandleNV(texture);
  late final _glGetTextureHandleNV = _lookup<NativeFunction<Uint64 Function(UnsignedInt)>>('glGetTextureHandleNV')
      .asFunction<int Function(int)>(isLeaf: true);

  int getTextureSamplerHandleNV(int texture, int sampler) => _glGetTextureSamplerHandleNV(texture, sampler);
  late final _glGetTextureSamplerHandleNV =
      _lookup<NativeFunction<Uint64 Function(UnsignedInt, UnsignedInt)>>('glGetTextureSamplerHandleNV')
          .asFunction<int Function(int, int)>(isLeaf: true);

  void makeTextureHandleResidentNV(int handle) => _glMakeTextureHandleResidentNV(handle);
  late final _glMakeTextureHandleResidentNV =
      _lookup<NativeFunction<Void Function(Uint64)>>('glMakeTextureHandleResidentNV')
          .asFunction<void Function(int)>(isLeaf: true);

  void makeTextureHandleNonResidentNV(int handle) => _glMakeTextureHandleNonResidentNV(handle);
  late final _glMakeTextureHandleNonResidentNV =
      _lookup<NativeFunction<Void Function(Uint64)>>('glMakeTextureHandleNonResidentNV')
          .asFunction<void Function(int)>(isLeaf: true);

  int getImageHandleNV(int texture, int level, int layered, int layer, int format) =>
      _glGetImageHandleNV(texture, level, layered, layer, format);
  late final _glGetImageHandleNV =
      _lookup<NativeFunction<Uint64 Function(UnsignedInt, Int, UnsignedChar, Int, UnsignedInt)>>('glGetImageHandleNV')
          .asFunction<int Function(int, int, int, int, int)>(isLeaf: true);

  void makeImageHandleResidentNV(int handle, int access) => _glMakeImageHandleResidentNV(handle, access);
  late final _glMakeImageHandleResidentNV =
      _lookup<NativeFunction<Void Function(Uint64, UnsignedInt)>>('glMakeImageHandleResidentNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void makeImageHandleNonResidentNV(int handle) => _glMakeImageHandleNonResidentNV(handle);
  late final _glMakeImageHandleNonResidentNV =
      _lookup<NativeFunction<Void Function(Uint64)>>('glMakeImageHandleNonResidentNV')
          .asFunction<void Function(int)>(isLeaf: true);

  void uniformHandleui64NV(int location, int value) => _glUniformHandleui64NV(location, value);
  late final _glUniformHandleui64NV = _lookup<NativeFunction<Void Function(Int, Uint64)>>('glUniformHandleui64NV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void uniformHandleui64vNV(int location, int count, Pointer<Uint64> value) =>
      _glUniformHandleui64vNV(location, count, value);
  late final _glUniformHandleui64vNV =
      _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniformHandleui64vNV')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniformHandleui64NV(int program, int location, int value) =>
      _glProgramUniformHandleui64NV(program, location, value);
  late final _glProgramUniformHandleui64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64)>>('glProgramUniformHandleui64NV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniformHandleui64vNV(int program, int location, int count, Pointer<Uint64> values) =>
      _glProgramUniformHandleui64vNV(program, location, count, values);
  late final _glProgramUniformHandleui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniformHandleui64vNV')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  int isTextureHandleResidentNV(int handle) => _glIsTextureHandleResidentNV(handle);
  late final _glIsTextureHandleResidentNV =
      _lookup<NativeFunction<UnsignedChar Function(Uint64)>>('glIsTextureHandleResidentNV')
          .asFunction<int Function(int)>(isLeaf: true);

  int isImageHandleResidentNV(int handle) => _glIsImageHandleResidentNV(handle);
  late final _glIsImageHandleResidentNV =
      _lookup<NativeFunction<UnsignedChar Function(Uint64)>>('glIsImageHandleResidentNV')
          .asFunction<int Function(int)>(isLeaf: true);

  void blendParameteriNV(int pname, int value) => _glBlendParameteriNV(pname, value);
  late final _glBlendParameteriNV = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glBlendParameteriNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void blendBarrierNV() => _glBlendBarrierNV();
  late final _glBlendBarrierNV =
      _lookup<NativeFunction<Void Function()>>('glBlendBarrierNV').asFunction<void Function()>(isLeaf: true);

  void viewportPositionWScaleNV(int index, double xcoeff, double ycoeff) =>
      _glViewportPositionWScaleNV(index, xcoeff, ycoeff);
  late final _glViewportPositionWScaleNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float)>>('glViewportPositionWScaleNV')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void createStatesNV(int n, Pointer<UnsignedInt> states) => _glCreateStatesNV(n, states);
  late final _glCreateStatesNV = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateStatesNV')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deleteStatesNV(int n, Pointer<UnsignedInt> states) => _glDeleteStatesNV(n, states);
  late final _glDeleteStatesNV = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteStatesNV')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isStateNV(int state) => _glIsStateNV(state);
  late final _glIsStateNV = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsStateNV')
      .asFunction<int Function(int)>(isLeaf: true);

  void stateCaptureNV(int state, int mode) => _glStateCaptureNV(state, mode);
  late final _glStateCaptureNV = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glStateCaptureNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  int getCommandHeaderNV(int tokenID, int size) => _glGetCommandHeaderNV(tokenID, size);
  late final _glGetCommandHeaderNV =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, UnsignedInt)>>('glGetCommandHeaderNV')
          .asFunction<int Function(int, int)>(isLeaf: true);

  int getStageIndexNV(int shadertype) => _glGetStageIndexNV(shadertype);
  late final _glGetStageIndexNV = _lookup<NativeFunction<UnsignedShort Function(UnsignedInt)>>('glGetStageIndexNV')
      .asFunction<int Function(int)>(isLeaf: true);

  void drawCommandsNV(int primitiveMode, int buffer, Pointer<Long> indirects, Pointer<Int> sizes, int count) =>
      _glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count);
  late final _glDrawCommandsNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Long>, Pointer<Int>, UnsignedInt)>>(
              'glDrawCommandsNV')
          .asFunction<void Function(int, int, Pointer<Long>, Pointer<Int>, int)>(isLeaf: true);

  void drawCommandsAddressNV(int primitiveMode, Pointer<Uint64> indirects, Pointer<Int> sizes, int count) =>
      _glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count);
  late final _glDrawCommandsAddressNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Uint64>, Pointer<Int>, UnsignedInt)>>(
              'glDrawCommandsAddressNV')
          .asFunction<void Function(int, Pointer<Uint64>, Pointer<Int>, int)>(isLeaf: true);

  void drawCommandsStatesNV(int buffer, Pointer<Long> indirects, Pointer<Int> sizes, Pointer<UnsignedInt> states,
          Pointer<UnsignedInt> fbos, int count) =>
      _glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count);
  late final _glDrawCommandsStatesNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Pointer<Long>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<UnsignedInt>,
                  UnsignedInt)>>('glDrawCommandsStatesNV')
      .asFunction<void Function(int, Pointer<Long>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<UnsignedInt>, int)>(
          isLeaf: true);

  void drawCommandsStatesAddressNV(Pointer<Uint64> indirects, Pointer<Int> sizes, Pointer<UnsignedInt> states,
          Pointer<UnsignedInt> fbos, int count) =>
      _glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count);
  late final _glDrawCommandsStatesAddressNV = _lookup<
          NativeFunction<
              Void Function(Pointer<Uint64>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<UnsignedInt>,
                  UnsignedInt)>>('glDrawCommandsStatesAddressNV')
      .asFunction<void Function(Pointer<Uint64>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<UnsignedInt>, int)>(
          isLeaf: true);

  void createCommandListsNV(int n, Pointer<UnsignedInt> lists) => _glCreateCommandListsNV(n, lists);
  late final _glCreateCommandListsNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateCommandListsNV')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deleteCommandListsNV(int n, Pointer<UnsignedInt> lists) => _glDeleteCommandListsNV(n, lists);
  late final _glDeleteCommandListsNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteCommandListsNV')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isCommandListNV(int list) => _glIsCommandListNV(list);
  late final _glIsCommandListNV = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsCommandListNV')
      .asFunction<int Function(int)>(isLeaf: true);

  void listDrawCommandsStatesClientNV(int list, int segment, Pointer<Pointer<Void>> indirects, Pointer<Int> sizes,
          Pointer<UnsignedInt> states, Pointer<UnsignedInt> fbos, int count) =>
      _glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count);
  late final _glListDrawCommandsStatesClientNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>, Pointer<Int>, Pointer<UnsignedInt>,
                  Pointer<UnsignedInt>, UnsignedInt)>>('glListDrawCommandsStatesClientNV')
      .asFunction<
          void Function(
              int, int, Pointer<Pointer<Void>>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<UnsignedInt>, int)>();

  void commandListSegmentsNV(int list, int segments) => _glCommandListSegmentsNV(list, segments);
  late final _glCommandListSegmentsNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glCommandListSegmentsNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void compileCommandListNV(int list) => _glCompileCommandListNV(list);
  late final _glCompileCommandListNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glCompileCommandListNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void callCommandListNV(int list) => _glCallCommandListNV(list);
  late final _glCallCommandListNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glCallCommandListNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void beginConditionalRenderNV(int id, int mode) => _glBeginConditionalRenderNV(id, mode);
  late final _glBeginConditionalRenderNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBeginConditionalRenderNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void endConditionalRenderNV() => _glEndConditionalRenderNV();
  late final _glEndConditionalRenderNV =
      _lookup<NativeFunction<Void Function()>>('glEndConditionalRenderNV').asFunction<void Function()>(isLeaf: true);

  void subpixelPrecisionBiasNV(int xbits, int ybits) => _glSubpixelPrecisionBiasNV(xbits, ybits);
  late final _glSubpixelPrecisionBiasNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glSubpixelPrecisionBiasNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void conservativeRasterParameterfNV(int pname, double value) => _glConservativeRasterParameterfNV(pname, value);
  late final _glConservativeRasterParameterfNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glConservativeRasterParameterfNV')
          .asFunction<void Function(int, double)>(isLeaf: true);

  void conservativeRasterParameteriNV(int pname, int param) => _glConservativeRasterParameteriNV(pname, param);
  late final _glConservativeRasterParameteriNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glConservativeRasterParameteriNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void copyImageSubDataNV(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName,
          int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth) =>
      _glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY,
          dstZ, width, height, depth);
  late final _glCopyImageSubDataNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, UnsignedInt, UnsignedInt, Int, Int, Int, Int,
                  Int, Int, Int)>>('glCopyImageSubDataNV')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)>(
          isLeaf: true);

  void depthRangedNV(double zNear, double zFar) => _glDepthRangedNV(zNear, zFar);
  late final _glDepthRangedNV = _lookup<NativeFunction<Void Function(Double, Double)>>('glDepthRangedNV')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void clearDepthdNV(double depth) => _glClearDepthdNV(depth);
  late final _glClearDepthdNV =
      _lookup<NativeFunction<Void Function(Double)>>('glClearDepthdNV').asFunction<void Function(double)>(isLeaf: true);

  void depthBoundsdNV(double zmin, double zmax) => _glDepthBoundsdNV(zmin, zmax);
  late final _glDepthBoundsdNV = _lookup<NativeFunction<Void Function(Double, Double)>>('glDepthBoundsdNV')
      .asFunction<void Function(double, double)>(isLeaf: true);

  void drawTextureNV(int texture, int sampler, double x0, double y0, double x1, double y1, double z, double s0,
          double t0, double s1, double t1) =>
      _glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  late final _glDrawTextureNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Float, Float, Float, Float, Float, Float, Float, Float,
                  Float)>>('glDrawTextureNV')
      .asFunction<void Function(int, int, double, double, double, double, double, double, double, double, double)>(
          isLeaf: true);

  void drawVkImageNV(int vkImage, int sampler, double x0, double y0, double x1, double y1, double z, double s0,
          double t0, double s1, double t1) =>
      _glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  late final _glDrawVkImageNV = _lookup<
          NativeFunction<
              Void Function(Uint64, UnsignedInt, Float, Float, Float, Float, Float, Float, Float, Float,
                  Float)>>('glDrawVkImageNV')
      .asFunction<void Function(int, int, double, double, double, double, double, double, double, double, double)>(
          isLeaf: true);

  Pointer<NativeFunction<Void Function()>> getVkProcAddrNV(Pointer<Char> name) => _glGetVkProcAddrNV(name);
  late final _glGetVkProcAddrNV =
      _lookup<NativeFunction<Pointer<NativeFunction<Void Function()>> Function(Pointer<Char>)>>('glGetVkProcAddrNV')
          .asFunction<Pointer<NativeFunction<Void Function()>> Function(Pointer<Char>)>(isLeaf: true);

  void waitVkSemaphoreNV(int vkSemaphore) => _glWaitVkSemaphoreNV(vkSemaphore);
  late final _glWaitVkSemaphoreNV = _lookup<NativeFunction<Void Function(Uint64)>>('glWaitVkSemaphoreNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void signalVkSemaphoreNV(int vkSemaphore) => _glSignalVkSemaphoreNV(vkSemaphore);
  late final _glSignalVkSemaphoreNV = _lookup<NativeFunction<Void Function(Uint64)>>('glSignalVkSemaphoreNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void signalVkFenceNV(int vkFence) => _glSignalVkFenceNV(vkFence);
  late final _glSignalVkFenceNV =
      _lookup<NativeFunction<Void Function(Uint64)>>('glSignalVkFenceNV').asFunction<void Function(int)>(isLeaf: true);

  void mapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed,
          Pointer<Void> points) =>
      _glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
  late final _glMapControlPointsNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int, Int, Int, UnsignedChar,
                  Pointer<Void>)>>('glMapControlPointsNV')
      .asFunction<void Function(int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void mapParameterivNV(int target, int pname, Pointer<Int> params) => _glMapParameterivNV(target, pname, params);
  late final _glMapParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glMapParameterivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void mapParameterfvNV(int target, int pname, Pointer<Float> params) => _glMapParameterfvNV(target, pname, params);
  late final _glMapParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glMapParameterfvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getMapControlPointsNV(
          int target, int index, int type, int ustride, int vstride, int packed, Pointer<Void> points) =>
      _glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
  late final _glGetMapControlPointsNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int, UnsignedChar,
                  Pointer<Void>)>>('glGetMapControlPointsNV')
      .asFunction<void Function(int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void getMapParameterivNV(int target, int pname, Pointer<Int> params) => _glGetMapParameterivNV(target, pname, params);
  late final _glGetMapParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetMapParameterivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getMapParameterfvNV(int target, int pname, Pointer<Float> params) =>
      _glGetMapParameterfvNV(target, pname, params);
  late final _glGetMapParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetMapParameterfvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getMapAttribParameterivNV(int target, int index, int pname, Pointer<Int> params) =>
      _glGetMapAttribParameterivNV(target, index, pname, params);
  late final _glGetMapAttribParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetMapAttribParameterivNV')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getMapAttribParameterfvNV(int target, int index, int pname, Pointer<Float> params) =>
      _glGetMapAttribParameterfvNV(target, index, pname, params);
  late final _glGetMapAttribParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetMapAttribParameterfvNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void evalMapsNV(int target, int mode) => _glEvalMapsNV(target, mode);
  late final _glEvalMapsNV = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glEvalMapsNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void getMultisamplefvNV(int pname, int index, Pointer<Float> val) => _glGetMultisamplefvNV(pname, index, val);
  late final _glGetMultisamplefvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetMultisamplefvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void sampleMaskIndexedNV(int index, int mask) => _glSampleMaskIndexedNV(index, mask);
  late final _glSampleMaskIndexedNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glSampleMaskIndexedNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void texRenderbufferNV(int target, int renderbuffer) => _glTexRenderbufferNV(target, renderbuffer);
  late final _glTexRenderbufferNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glTexRenderbufferNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteFencesNV(int n, Pointer<UnsignedInt> fences) => _glDeleteFencesNV(n, fences);
  late final _glDeleteFencesNV = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteFencesNV')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genFencesNV(int n, Pointer<UnsignedInt> fences) => _glGenFencesNV(n, fences);
  late final _glGenFencesNV = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenFencesNV')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isFenceNV(int fence) => _glIsFenceNV(fence);
  late final _glIsFenceNV = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsFenceNV')
      .asFunction<int Function(int)>(isLeaf: true);

  int testFenceNV(int fence) => _glTestFenceNV(fence);
  late final _glTestFenceNV = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glTestFenceNV')
      .asFunction<int Function(int)>(isLeaf: true);

  void getFenceivNV(int fence, int pname, Pointer<Int> params) => _glGetFenceivNV(fence, pname, params);
  late final _glGetFenceivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetFenceivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void finishFenceNV(int fence) => _glFinishFenceNV(fence);
  late final _glFinishFenceNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glFinishFenceNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void setFenceNV(int fence, int condition) => _glSetFenceNV(fence, condition);
  late final _glSetFenceNV = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glSetFenceNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void fragmentCoverageColorNV(int color) => _glFragmentCoverageColorNV(color);
  late final _glFragmentCoverageColorNV =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glFragmentCoverageColorNV')
          .asFunction<void Function(int)>(isLeaf: true);

  void programNamedParameter4fNV(int id, int len, Pointer<UnsignedChar> name, double x, double y, double z, double w) =>
      _glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
  late final _glProgramNamedParameter4fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedChar>, Float, Float, Float, Float)>>(
              'glProgramNamedParameter4fNV')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>, double, double, double, double)>(isLeaf: true);

  void programNamedParameter4fvNV(int id, int len, Pointer<UnsignedChar> name, Pointer<Float> v) =>
      _glProgramNamedParameter4fvNV(id, len, name, v);
  late final _glProgramNamedParameter4fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedChar>, Pointer<Float>)>>(
              'glProgramNamedParameter4fvNV')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>, Pointer<Float>)>(isLeaf: true);

  void programNamedParameter4dNV(int id, int len, Pointer<UnsignedChar> name, double x, double y, double z, double w) =>
      _glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
  late final _glProgramNamedParameter4dNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedChar>, Double, Double, Double, Double)>>(
              'glProgramNamedParameter4dNV')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>, double, double, double, double)>(isLeaf: true);

  void programNamedParameter4dvNV(int id, int len, Pointer<UnsignedChar> name, Pointer<Double> v) =>
      _glProgramNamedParameter4dvNV(id, len, name, v);
  late final _glProgramNamedParameter4dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedChar>, Pointer<Double>)>>(
              'glProgramNamedParameter4dvNV')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>, Pointer<Double>)>(isLeaf: true);

  void getProgramNamedParameterfvNV(int id, int len, Pointer<UnsignedChar> name, Pointer<Float> params) =>
      _glGetProgramNamedParameterfvNV(id, len, name, params);
  late final _glGetProgramNamedParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedChar>, Pointer<Float>)>>(
              'glGetProgramNamedParameterfvNV')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>, Pointer<Float>)>(isLeaf: true);

  void getProgramNamedParameterdvNV(int id, int len, Pointer<UnsignedChar> name, Pointer<Double> params) =>
      _glGetProgramNamedParameterdvNV(id, len, name, params);
  late final _glGetProgramNamedParameterdvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedChar>, Pointer<Double>)>>(
              'glGetProgramNamedParameterdvNV')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>, Pointer<Double>)>(isLeaf: true);

  void coverageModulationTableNV(int n, Pointer<Float> v) => _glCoverageModulationTableNV(n, v);
  late final _glCoverageModulationTableNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<Float>)>>('glCoverageModulationTableNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void getCoverageModulationTableNV(int bufSize, Pointer<Float> v) => _glGetCoverageModulationTableNV(bufSize, v);
  late final _glGetCoverageModulationTableNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<Float>)>>('glGetCoverageModulationTableNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void coverageModulationNV(int components) => _glCoverageModulationNV(components);
  late final _glCoverageModulationNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glCoverageModulationNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void renderbufferStorageMultisampleCoverageNV(
          int target, int coverageSamples, int colorSamples, int internalformat, int width, int height) =>
      _glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
  late final _glRenderbufferStorageMultisampleCoverageNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedInt, Int, Int)>>(
              'glRenderbufferStorageMultisampleCoverageNV')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programVertexLimitNV(int target, int limit) => _glProgramVertexLimitNV(target, limit);
  late final _glProgramVertexLimitNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glProgramVertexLimitNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void framebufferTextureEXT(int target, int attachment, int texture, int level) =>
      _glFramebufferTextureEXT(target, attachment, texture, level);
  late final _glFramebufferTextureEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int)>>('glFramebufferTextureEXT')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void framebufferTextureFaceEXT(int target, int attachment, int texture, int level, int face) =>
      _glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
  late final _glFramebufferTextureFaceEXT =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, UnsignedInt)>>(
              'glFramebufferTextureFaceEXT')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void renderGpuMaskNV(int mask) => _glRenderGpuMaskNV(mask);
  late final _glRenderGpuMaskNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glRenderGpuMaskNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void multicastBufferSubDataNV(int gpuMask, int buffer, int offset, int size, Pointer<Void> data) =>
      _glMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data);
  late final _glMulticastBufferSubDataNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Long, Long, Pointer<Void>)>>(
              'glMulticastBufferSubDataNV')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void multicastCopyBufferSubDataNV(
          int readGpu, int writeGpuMask, int readBuffer, int writeBuffer, int readOffset, int writeOffset, int size) =>
      _glMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
  late final _glMulticastCopyBufferSubDataNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Long, Long, Long)>>(
              'glMulticastCopyBufferSubDataNV')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void multicastCopyImageSubDataNV(
          int srcGpu,
          int dstGpuMask,
          int srcName,
          int srcTarget,
          int srcLevel,
          int srcX,
          int srcY,
          int srcZ,
          int dstName,
          int dstTarget,
          int dstLevel,
          int dstX,
          int dstY,
          int dstZ,
          int srcWidth,
          int srcHeight,
          int srcDepth) =>
      _glMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName,
          dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  late final _glMulticastCopyImageSubDataNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Int, Int, Int, Int, UnsignedInt,
                  UnsignedInt, Int, Int, Int, Int, Int, Int, Int)>>('glMulticastCopyImageSubDataNV')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)>(
          isLeaf: true);

  void multicastBlitFramebufferNV(int srcGpu, int dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0,
          int dstY0, int dstX1, int dstY1, int mask, int filter) =>
      _glMulticastBlitFramebufferNV(
          srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  late final _glMulticastBlitFramebufferNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int, UnsignedInt,
                  UnsignedInt)>>('glMulticastBlitFramebufferNV')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void multicastFramebufferSampleLocationsfvNV(int gpu, int framebuffer, int start, int count, Pointer<Float> v) =>
      _glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v);
  late final _glMulticastFramebufferSampleLocationsfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glMulticastFramebufferSampleLocationsfvNV')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void multicastBarrierNV() => _glMulticastBarrierNV();
  late final _glMulticastBarrierNV =
      _lookup<NativeFunction<Void Function()>>('glMulticastBarrierNV').asFunction<void Function()>(isLeaf: true);

  void multicastWaitSyncNV(int signalGpu, int waitGpuMask) => _glMulticastWaitSyncNV(signalGpu, waitGpuMask);
  late final _glMulticastWaitSyncNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glMulticastWaitSyncNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void multicastGetQueryObjectivNV(int gpu, int id, int pname, Pointer<Int> params) =>
      _glMulticastGetQueryObjectivNV(gpu, id, pname, params);
  late final _glMulticastGetQueryObjectivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glMulticastGetQueryObjectivNV')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void multicastGetQueryObjectuivNV(int gpu, int id, int pname, Pointer<UnsignedInt> params) =>
      _glMulticastGetQueryObjectuivNV(gpu, id, pname, params);
  late final _glMulticastGetQueryObjectuivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glMulticastGetQueryObjectuivNV')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void multicastGetQueryObjecti64vNV(int gpu, int id, int pname, Pointer<Int64> params) =>
      _glMulticastGetQueryObjecti64vNV(gpu, id, pname, params);
  late final _glMulticastGetQueryObjecti64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int64>)>>(
              'glMulticastGetQueryObjecti64vNV')
          .asFunction<void Function(int, int, int, Pointer<Int64>)>(isLeaf: true);

  void multicastGetQueryObjectui64vNV(int gpu, int id, int pname, Pointer<Uint64> params) =>
      _glMulticastGetQueryObjectui64vNV(gpu, id, pname, params);
  late final _glMulticastGetQueryObjectui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Uint64>)>>(
              'glMulticastGetQueryObjectui64vNV')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void programLocalParameterI4iNV(int target, int index, int x, int y, int z, int w) =>
      _glProgramLocalParameterI4iNV(target, index, x, y, z, w);
  late final _glProgramLocalParameterI4iNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int)>>(
              'glProgramLocalParameterI4iNV')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programLocalParameterI4ivNV(int target, int index, Pointer<Int> params) =>
      _glProgramLocalParameterI4ivNV(target, index, params);
  late final _glProgramLocalParameterI4ivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glProgramLocalParameterI4ivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void programLocalParametersI4ivNV(int target, int index, int count, Pointer<Int> params) =>
      _glProgramLocalParametersI4ivNV(target, index, count, params);
  late final _glProgramLocalParametersI4ivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>)>>(
              'glProgramLocalParametersI4ivNV')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void programLocalParameterI4uiNV(int target, int index, int x, int y, int z, int w) =>
      _glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
  late final _glProgramLocalParameterI4uiNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt)>>('glProgramLocalParameterI4uiNV')
      .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programLocalParameterI4uivNV(int target, int index, Pointer<UnsignedInt> params) =>
      _glProgramLocalParameterI4uivNV(target, index, params);
  late final _glProgramLocalParameterI4uivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glProgramLocalParameterI4uivNV')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programLocalParametersI4uivNV(int target, int index, int count, Pointer<UnsignedInt> params) =>
      _glProgramLocalParametersI4uivNV(target, index, count, params);
  late final _glProgramLocalParametersI4uivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>)>>(
              'glProgramLocalParametersI4uivNV')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programEnvParameterI4iNV(int target, int index, int x, int y, int z, int w) =>
      _glProgramEnvParameterI4iNV(target, index, x, y, z, w);
  late final _glProgramEnvParameterI4iNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int)>>('glProgramEnvParameterI4iNV')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programEnvParameterI4ivNV(int target, int index, Pointer<Int> params) =>
      _glProgramEnvParameterI4ivNV(target, index, params);
  late final _glProgramEnvParameterI4ivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glProgramEnvParameterI4ivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void programEnvParametersI4ivNV(int target, int index, int count, Pointer<Int> params) =>
      _glProgramEnvParametersI4ivNV(target, index, count, params);
  late final _glProgramEnvParametersI4ivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>)>>(
              'glProgramEnvParametersI4ivNV')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void programEnvParameterI4uiNV(int target, int index, int x, int y, int z, int w) =>
      _glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
  late final _glProgramEnvParameterI4uiNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt)>>('glProgramEnvParameterI4uiNV')
      .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void programEnvParameterI4uivNV(int target, int index, Pointer<UnsignedInt> params) =>
      _glProgramEnvParameterI4uivNV(target, index, params);
  late final _glProgramEnvParameterI4uivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glProgramEnvParameterI4uivNV')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programEnvParametersI4uivNV(int target, int index, int count, Pointer<UnsignedInt> params) =>
      _glProgramEnvParametersI4uivNV(target, index, count, params);
  late final _glProgramEnvParametersI4uivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>)>>(
              'glProgramEnvParametersI4uivNV')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getProgramLocalParameterIivNV(int target, int index, Pointer<Int> params) =>
      _glGetProgramLocalParameterIivNV(target, index, params);
  late final _glGetProgramLocalParameterIivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetProgramLocalParameterIivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getProgramLocalParameterIuivNV(int target, int index, Pointer<UnsignedInt> params) =>
      _glGetProgramLocalParameterIuivNV(target, index, params);
  late final _glGetProgramLocalParameterIuivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glGetProgramLocalParameterIuivNV')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getProgramEnvParameterIivNV(int target, int index, Pointer<Int> params) =>
      _glGetProgramEnvParameterIivNV(target, index, params);
  late final _glGetProgramEnvParameterIivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetProgramEnvParameterIivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getProgramEnvParameterIuivNV(int target, int index, Pointer<UnsignedInt> params) =>
      _glGetProgramEnvParameterIuivNV(target, index, params);
  late final _glGetProgramEnvParameterIuivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glGetProgramEnvParameterIuivNV')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programSubroutineParametersuivNV(int target, int count, Pointer<UnsignedInt> params) =>
      _glProgramSubroutineParametersuivNV(target, count, params);
  late final _glProgramSubroutineParametersuivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>)>>(
              'glProgramSubroutineParametersuivNV')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getProgramSubroutineParameteruivNV(int target, int index, Pointer<UnsignedInt> param) =>
      _glGetProgramSubroutineParameteruivNV(target, index, param);
  late final _glGetProgramSubroutineParameteruivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glGetProgramSubroutineParameteruivNV')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void vertex2hNV(int x, int y) => _glVertex2hNV(x, y);
  late final _glVertex2hNV = _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort)>>('glVertex2hNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertex2hvNV(Pointer<UnsignedShort> v) => _glVertex2hvNV(v);
  late final _glVertex2hvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glVertex2hvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void vertex3hNV(int x, int y, int z) => _glVertex3hNV(x, y, z);
  late final _glVertex3hNV =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort)>>('glVertex3hNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertex3hvNV(Pointer<UnsignedShort> v) => _glVertex3hvNV(v);
  late final _glVertex3hvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glVertex3hvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void vertex4hNV(int x, int y, int z, int w) => _glVertex4hNV(x, y, z, w);
  late final _glVertex4hNV =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort, UnsignedShort)>>('glVertex4hNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertex4hvNV(Pointer<UnsignedShort> v) => _glVertex4hvNV(v);
  late final _glVertex4hvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glVertex4hvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void normal3hNV(int nx, int ny, int nz) => _glNormal3hNV(nx, ny, nz);
  late final _glNormal3hNV =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort)>>('glNormal3hNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void normal3hvNV(Pointer<UnsignedShort> v) => _glNormal3hvNV(v);
  late final _glNormal3hvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glNormal3hvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void color3hNV(int red, int green, int blue) => _glColor3hNV(red, green, blue);
  late final _glColor3hNV =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort)>>('glColor3hNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void color3hvNV(Pointer<UnsignedShort> v) => _glColor3hvNV(v);
  late final _glColor3hvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glColor3hvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void color4hNV(int red, int green, int blue, int alpha) => _glColor4hNV(red, green, blue, alpha);
  late final _glColor4hNV =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort, UnsignedShort)>>('glColor4hNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void color4hvNV(Pointer<UnsignedShort> v) => _glColor4hvNV(v);
  late final _glColor4hvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glColor4hvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void texCoord1hNV(int s) => _glTexCoord1hNV(s);
  late final _glTexCoord1hNV = _lookup<NativeFunction<Void Function(UnsignedShort)>>('glTexCoord1hNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void texCoord1hvNV(Pointer<UnsignedShort> v) => _glTexCoord1hvNV(v);
  late final _glTexCoord1hvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glTexCoord1hvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void texCoord2hNV(int s, int t) => _glTexCoord2hNV(s, t);
  late final _glTexCoord2hNV = _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort)>>('glTexCoord2hNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void texCoord2hvNV(Pointer<UnsignedShort> v) => _glTexCoord2hvNV(v);
  late final _glTexCoord2hvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glTexCoord2hvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void texCoord3hNV(int s, int t, int r) => _glTexCoord3hNV(s, t, r);
  late final _glTexCoord3hNV =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort)>>('glTexCoord3hNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void texCoord3hvNV(Pointer<UnsignedShort> v) => _glTexCoord3hvNV(v);
  late final _glTexCoord3hvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glTexCoord3hvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void texCoord4hNV(int s, int t, int r, int q) => _glTexCoord4hNV(s, t, r, q);
  late final _glTexCoord4hNV =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort, UnsignedShort)>>(
              'glTexCoord4hNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void texCoord4hvNV(Pointer<UnsignedShort> v) => _glTexCoord4hvNV(v);
  late final _glTexCoord4hvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glTexCoord4hvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void multiTexCoord1hNV(int target, int s) => _glMultiTexCoord1hNV(target, s);
  late final _glMultiTexCoord1hNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedShort)>>('glMultiTexCoord1hNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void multiTexCoord1hvNV(int target, Pointer<UnsignedShort> v) => _glMultiTexCoord1hvNV(target, v);
  late final _glMultiTexCoord1hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glMultiTexCoord1hvNV')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void multiTexCoord2hNV(int target, int s, int t) => _glMultiTexCoord2hNV(target, s, t);
  late final _glMultiTexCoord2hNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedShort, UnsignedShort)>>('glMultiTexCoord2hNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiTexCoord2hvNV(int target, Pointer<UnsignedShort> v) => _glMultiTexCoord2hvNV(target, v);
  late final _glMultiTexCoord2hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glMultiTexCoord2hvNV')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void multiTexCoord3hNV(int target, int s, int t, int r) => _glMultiTexCoord3hNV(target, s, t, r);
  late final _glMultiTexCoord3hNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedShort, UnsignedShort, UnsignedShort)>>(
              'glMultiTexCoord3hNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void multiTexCoord3hvNV(int target, Pointer<UnsignedShort> v) => _glMultiTexCoord3hvNV(target, v);
  late final _glMultiTexCoord3hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glMultiTexCoord3hvNV')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void multiTexCoord4hNV(int target, int s, int t, int r, int q) => _glMultiTexCoord4hNV(target, s, t, r, q);
  late final _glMultiTexCoord4hNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedShort, UnsignedShort, UnsignedShort, UnsignedShort)>>(
              'glMultiTexCoord4hNV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void multiTexCoord4hvNV(int target, Pointer<UnsignedShort> v) => _glMultiTexCoord4hvNV(target, v);
  late final _glMultiTexCoord4hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glMultiTexCoord4hvNV')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttrib1hNV(int index, int x) => _glVertexAttrib1hNV(index, x);
  late final _glVertexAttrib1hNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedShort)>>('glVertexAttrib1hNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttrib1hvNV(int index, Pointer<UnsignedShort> v) => _glVertexAttrib1hvNV(index, v);
  late final _glVertexAttrib1hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVertexAttrib1hvNV')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttrib2hNV(int index, int x, int y) => _glVertexAttrib2hNV(index, x, y);
  late final _glVertexAttrib2hNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedShort, UnsignedShort)>>('glVertexAttrib2hNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexAttrib2hvNV(int index, Pointer<UnsignedShort> v) => _glVertexAttrib2hvNV(index, v);
  late final _glVertexAttrib2hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVertexAttrib2hvNV')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttrib3hNV(int index, int x, int y, int z) => _glVertexAttrib3hNV(index, x, y, z);
  late final _glVertexAttrib3hNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedShort, UnsignedShort, UnsignedShort)>>(
              'glVertexAttrib3hNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttrib3hvNV(int index, Pointer<UnsignedShort> v) => _glVertexAttrib3hvNV(index, v);
  late final _glVertexAttrib3hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVertexAttrib3hvNV')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttrib4hNV(int index, int x, int y, int z, int w) => _glVertexAttrib4hNV(index, x, y, z, w);
  late final _glVertexAttrib4hNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedShort, UnsignedShort, UnsignedShort, UnsignedShort)>>(
              'glVertexAttrib4hNV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttrib4hvNV(int index, Pointer<UnsignedShort> v) => _glVertexAttrib4hvNV(index, v);
  late final _glVertexAttrib4hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedShort>)>>('glVertexAttrib4hvNV')
          .asFunction<void Function(int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttribs1hvNV(int index, int n, Pointer<UnsignedShort> v) => _glVertexAttribs1hvNV(index, n, v);
  late final _glVertexAttribs1hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedShort>)>>('glVertexAttribs1hvNV')
          .asFunction<void Function(int, int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttribs2hvNV(int index, int n, Pointer<UnsignedShort> v) => _glVertexAttribs2hvNV(index, n, v);
  late final _glVertexAttribs2hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedShort>)>>('glVertexAttribs2hvNV')
          .asFunction<void Function(int, int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttribs3hvNV(int index, int n, Pointer<UnsignedShort> v) => _glVertexAttribs3hvNV(index, n, v);
  late final _glVertexAttribs3hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedShort>)>>('glVertexAttribs3hvNV')
          .asFunction<void Function(int, int, Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexAttribs4hvNV(int index, int n, Pointer<UnsignedShort> v) => _glVertexAttribs4hvNV(index, n, v);
  late final _glVertexAttribs4hvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedShort>)>>('glVertexAttribs4hvNV')
          .asFunction<void Function(int, int, Pointer<UnsignedShort>)>(isLeaf: true);

  void fogCoordhNV(int fog) => _glFogCoordhNV(fog);
  late final _glFogCoordhNV = _lookup<NativeFunction<Void Function(UnsignedShort)>>('glFogCoordhNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void fogCoordhvNV(Pointer<UnsignedShort> fog) => _glFogCoordhvNV(fog);
  late final _glFogCoordhvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glFogCoordhvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void secondaryColor3hNV(int red, int green, int blue) => _glSecondaryColor3hNV(red, green, blue);
  late final _glSecondaryColor3hNV =
      _lookup<NativeFunction<Void Function(UnsignedShort, UnsignedShort, UnsignedShort)>>('glSecondaryColor3hNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void secondaryColor3hvNV(Pointer<UnsignedShort> v) => _glSecondaryColor3hvNV(v);
  late final _glSecondaryColor3hvNV =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glSecondaryColor3hvNV')
          .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void vertexWeighthNV(int weight) => _glVertexWeighthNV(weight);
  late final _glVertexWeighthNV = _lookup<NativeFunction<Void Function(UnsignedShort)>>('glVertexWeighthNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void vertexWeighthvNV(Pointer<UnsignedShort> weight) => _glVertexWeighthvNV(weight);
  late final _glVertexWeighthvNV = _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glVertexWeighthvNV')
      .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void getInternalformatSampleivNV(
          int target, int internalformat, int samples, int pname, int count, Pointer<Int> params) =>
      _glGetInternalformatSampleivNV(target, internalformat, samples, pname, count, params);
  late final _glGetInternalformatSampleivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, Int, Pointer<Int>)>>(
              'glGetInternalformatSampleivNV')
          .asFunction<void Function(int, int, int, int, int, Pointer<Int>)>(isLeaf: true);

  void getMemoryObjectDetachedResourcesuivNV(
          int memory, int pname, int first, int count, Pointer<UnsignedInt> params) =>
      _glGetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, params);
  late final _glGetMemoryObjectDetachedResourcesuivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Pointer<UnsignedInt>)>>(
              'glGetMemoryObjectDetachedResourcesuivNV')
          .asFunction<void Function(int, int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void resetMemoryObjectParameterNV(int memory, int pname) => _glResetMemoryObjectParameterNV(memory, pname);
  late final _glResetMemoryObjectParameterNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glResetMemoryObjectParameterNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void texAttachMemoryNV(int target, int memory, int offset) => _glTexAttachMemoryNV(target, memory, offset);
  late final _glTexAttachMemoryNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Uint64)>>('glTexAttachMemoryNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void bufferAttachMemoryNV(int target, int memory, int offset) => _glBufferAttachMemoryNV(target, memory, offset);
  late final _glBufferAttachMemoryNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Uint64)>>('glBufferAttachMemoryNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void textureAttachMemoryNV(int texture, int memory, int offset) => _glTextureAttachMemoryNV(texture, memory, offset);
  late final _glTextureAttachMemoryNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Uint64)>>('glTextureAttachMemoryNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void namedBufferAttachMemoryNV(int buffer, int memory, int offset) =>
      _glNamedBufferAttachMemoryNV(buffer, memory, offset);
  late final _glNamedBufferAttachMemoryNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Uint64)>>('glNamedBufferAttachMemoryNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void bufferPageCommitmentMemNV(int target, int offset, int size, int memory, int memOffset, int commit) =>
      _glBufferPageCommitmentMemNV(target, offset, size, memory, memOffset, commit);
  late final _glBufferPageCommitmentMemNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, UnsignedInt, Uint64, UnsignedChar)>>(
              'glBufferPageCommitmentMemNV')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void texPageCommitmentMemNV(int target, int layer, int level, int xoffset, int yoffset, int zoffset, int width,
          int height, int depth, int memory, int offset, int commit) =>
      _glTexPageCommitmentMemNV(
          target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
  late final _glTexPageCommitmentMemNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, Uint64,
                  UnsignedChar)>>('glTexPageCommitmentMemNV')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void namedBufferPageCommitmentMemNV(int buffer, int offset, int size, int memory, int memOffset, int commit) =>
      _glNamedBufferPageCommitmentMemNV(buffer, offset, size, memory, memOffset, commit);
  late final _glNamedBufferPageCommitmentMemNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Long, Long, UnsignedInt, Uint64, UnsignedChar)>>(
              'glNamedBufferPageCommitmentMemNV')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void texturePageCommitmentMemNV(int texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width,
          int height, int depth, int memory, int offset, int commit) =>
      _glTexturePageCommitmentMemNV(
          texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
  late final _glTexturePageCommitmentMemNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, Uint64,
                  UnsignedChar)>>('glTexturePageCommitmentMemNV')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void drawMeshTasksNV(int first, int count) => _glDrawMeshTasksNV(first, count);
  late final _glDrawMeshTasksNV = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDrawMeshTasksNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void drawMeshTasksIndirectNV(int indirect) => _glDrawMeshTasksIndirectNV(indirect);
  late final _glDrawMeshTasksIndirectNV = _lookup<NativeFunction<Void Function(Long)>>('glDrawMeshTasksIndirectNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void multiDrawMeshTasksIndirectNV(int indirect, int drawcount, int stride) =>
      _glMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride);
  late final _glMultiDrawMeshTasksIndirectNV =
      _lookup<NativeFunction<Void Function(Long, Int, Int)>>('glMultiDrawMeshTasksIndirectNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void multiDrawMeshTasksIndirectCountNV(int indirect, int drawcount, int maxdrawcount, int stride) =>
      _glMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride);
  late final _glMultiDrawMeshTasksIndirectCountNV =
      _lookup<NativeFunction<Void Function(Long, Long, Int, Int)>>('glMultiDrawMeshTasksIndirectCountNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void genOcclusionQueriesNV(int n, Pointer<UnsignedInt> ids) => _glGenOcclusionQueriesNV(n, ids);
  late final _glGenOcclusionQueriesNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenOcclusionQueriesNV')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void deleteOcclusionQueriesNV(int n, Pointer<UnsignedInt> ids) => _glDeleteOcclusionQueriesNV(n, ids);
  late final _glDeleteOcclusionQueriesNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteOcclusionQueriesNV')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isOcclusionQueryNV(int id) => _glIsOcclusionQueryNV(id);
  late final _glIsOcclusionQueryNV = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsOcclusionQueryNV')
      .asFunction<int Function(int)>(isLeaf: true);

  void beginOcclusionQueryNV(int id) => _glBeginOcclusionQueryNV(id);
  late final _glBeginOcclusionQueryNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBeginOcclusionQueryNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void endOcclusionQueryNV() => _glEndOcclusionQueryNV();
  late final _glEndOcclusionQueryNV =
      _lookup<NativeFunction<Void Function()>>('glEndOcclusionQueryNV').asFunction<void Function()>(isLeaf: true);

  void getOcclusionQueryivNV(int id, int pname, Pointer<Int> params) => _glGetOcclusionQueryivNV(id, pname, params);
  late final _glGetOcclusionQueryivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetOcclusionQueryivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getOcclusionQueryuivNV(int id, int pname, Pointer<UnsignedInt> params) =>
      _glGetOcclusionQueryuivNV(id, pname, params);
  late final _glGetOcclusionQueryuivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glGetOcclusionQueryuivNV')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void programBufferParametersfvNV(int target, int bindingIndex, int wordIndex, int count, Pointer<Float> params) =>
      _glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params);
  late final _glProgramBufferParametersfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glProgramBufferParametersfvNV')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void programBufferParametersIivNV(int target, int bindingIndex, int wordIndex, int count, Pointer<Int> params) =>
      _glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params);
  late final _glProgramBufferParametersIivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<Int>)>>(
              'glProgramBufferParametersIivNV')
          .asFunction<void Function(int, int, int, int, Pointer<Int>)>(isLeaf: true);

  void programBufferParametersIuivNV(
          int target, int bindingIndex, int wordIndex, int count, Pointer<UnsignedInt> params) =>
      _glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params);
  late final _glProgramBufferParametersIuivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>)>>(
              'glProgramBufferParametersIuivNV')
          .asFunction<void Function(int, int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  int genPathsNV(int range) => _glGenPathsNV(range);
  late final _glGenPathsNV =
      _lookup<NativeFunction<UnsignedInt Function(Int)>>('glGenPathsNV').asFunction<int Function(int)>(isLeaf: true);

  void deletePathsNV(int path, int range) => _glDeletePathsNV(path, range);
  late final _glDeletePathsNV = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glDeletePathsNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  int isPathNV(int path) => _glIsPathNV(path);
  late final _glIsPathNV = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsPathNV')
      .asFunction<int Function(int)>(isLeaf: true);

  void pathCommandsNV(int path, int numCommands, Pointer<UnsignedChar> commands, int numCoords, int coordType,
          Pointer<Void> coords) =>
      _glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
  late final _glPathCommandsNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedChar>, Int, UnsignedInt, Pointer<Void>)>>(
              'glPathCommandsNV')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>, int, int, Pointer<Void>)>(isLeaf: true);

  void pathCoordsNV(int path, int numCoords, int coordType, Pointer<Void> coords) =>
      _glPathCoordsNV(path, numCoords, coordType, coords);
  late final _glPathCoordsNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>)>>('glPathCoordsNV')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void pathSubCommandsNV(int path, int commandStart, int commandsToDelete, int numCommands,
          Pointer<UnsignedChar> commands, int numCoords, int coordType, Pointer<Void> coords) =>
      _glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  late final _glPathSubCommandsNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Pointer<UnsignedChar>, Int, UnsignedInt,
                  Pointer<Void>)>>('glPathSubCommandsNV')
      .asFunction<void Function(int, int, int, int, Pointer<UnsignedChar>, int, int, Pointer<Void>)>(isLeaf: true);

  void pathSubCoordsNV(int path, int coordStart, int numCoords, int coordType, Pointer<Void> coords) =>
      _glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
  late final _glPathSubCoordsNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, UnsignedInt, Pointer<Void>)>>('glPathSubCoordsNV')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void pathStringNV(int path, int format, int length, Pointer<Void> pathString) =>
      _glPathStringNV(path, format, length, pathString);
  late final _glPathStringNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Void>)>>('glPathStringNV')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void pathGlyphsNV(int firstPathName, int fontTarget, Pointer<Void> fontName, int fontStyle, int numGlyphs, int type,
          Pointer<Void> charcodes, int handleMissingGlyphs, int pathParameterTemplate, double emScale) =>
      _glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs,
          pathParameterTemplate, emScale);
  late final _glPathGlyphsNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Pointer<Void>, UnsignedInt, Int, UnsignedInt, Pointer<Void>,
                  UnsignedInt, UnsignedInt, Float)>>('glPathGlyphsNV')
      .asFunction<void Function(int, int, Pointer<Void>, int, int, int, Pointer<Void>, int, int, double)>(isLeaf: true);

  void pathGlyphRangeNV(int firstPathName, int fontTarget, Pointer<Void> fontName, int fontStyle, int firstGlyph,
          int numGlyphs, int handleMissingGlyphs, int pathParameterTemplate, double emScale) =>
      _glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs,
          pathParameterTemplate, emScale);
  late final _glPathGlyphRangeNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Pointer<Void>, UnsignedInt, UnsignedInt, Int, UnsignedInt,
                  UnsignedInt, Float)>>('glPathGlyphRangeNV')
      .asFunction<void Function(int, int, Pointer<Void>, int, int, int, int, int, double)>(isLeaf: true);

  void weightPathsNV(int resultPath, int numPaths, Pointer<UnsignedInt> paths, Pointer<Float> weights) =>
      _glWeightPathsNV(resultPath, numPaths, paths, weights);
  late final _glWeightPathsNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedInt>, Pointer<Float>)>>('glWeightPathsNV')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>, Pointer<Float>)>(isLeaf: true);

  void copyPathNV(int resultPath, int srcPath) => _glCopyPathNV(resultPath, srcPath);
  late final _glCopyPathNV = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glCopyPathNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void interpolatePathsNV(int resultPath, int pathA, int pathB, double weight) =>
      _glInterpolatePathsNV(resultPath, pathA, pathB, weight);
  late final _glInterpolatePathsNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Float)>>('glInterpolatePathsNV')
          .asFunction<void Function(int, int, int, double)>(isLeaf: true);

  void transformPathNV(int resultPath, int srcPath, int transformType, Pointer<Float> transformValues) =>
      _glTransformPathNV(resultPath, srcPath, transformType, transformValues);
  late final _glTransformPathNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>('glTransformPathNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void pathParameterivNV(int path, int pname, Pointer<Int> value) => _glPathParameterivNV(path, pname, value);
  late final _glPathParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glPathParameterivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void pathParameteriNV(int path, int pname, int value) => _glPathParameteriNV(path, pname, value);
  late final _glPathParameteriNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glPathParameteriNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void pathParameterfvNV(int path, int pname, Pointer<Float> value) => _glPathParameterfvNV(path, pname, value);
  late final _glPathParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glPathParameterfvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void pathParameterfNV(int path, int pname, double value) => _glPathParameterfNV(path, pname, value);
  late final _glPathParameterfNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glPathParameterfNV')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void pathDashArrayNV(int path, int dashCount, Pointer<Float> dashArray) =>
      _glPathDashArrayNV(path, dashCount, dashArray);
  late final _glPathDashArrayNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glPathDashArrayNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void pathStencilFuncNV(int func, int ref, int mask) => _glPathStencilFuncNV(func, ref, mask);
  late final _glPathStencilFuncNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt)>>('glPathStencilFuncNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void pathStencilDepthOffsetNV(double factor, double units) => _glPathStencilDepthOffsetNV(factor, units);
  late final _glPathStencilDepthOffsetNV =
      _lookup<NativeFunction<Void Function(Float, Float)>>('glPathStencilDepthOffsetNV')
          .asFunction<void Function(double, double)>(isLeaf: true);

  void stencilFillPathNV(int path, int fillMode, int mask) => _glStencilFillPathNV(path, fillMode, mask);
  late final _glStencilFillPathNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glStencilFillPathNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void stencilStrokePathNV(int path, int reference, int mask) => _glStencilStrokePathNV(path, reference, mask);
  late final _glStencilStrokePathNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt)>>('glStencilStrokePathNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void stencilFillPathInstancedNV(int numPaths, int pathNameType, Pointer<Void> paths, int pathBase, int fillMode,
          int mask, int transformType, Pointer<Float> transformValues) =>
      _glStencilFillPathInstancedNV(
          numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  late final _glStencilFillPathInstancedNV = _lookup<
          NativeFunction<
              Void Function(Int, UnsignedInt, Pointer<Void>, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  Pointer<Float>)>>('glStencilFillPathInstancedNV')
      .asFunction<void Function(int, int, Pointer<Void>, int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void stencilStrokePathInstancedNV(int numPaths, int pathNameType, Pointer<Void> paths, int pathBase, int reference,
          int mask, int transformType, Pointer<Float> transformValues) =>
      _glStencilStrokePathInstancedNV(
          numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  late final _glStencilStrokePathInstancedNV = _lookup<
          NativeFunction<
              Void Function(Int, UnsignedInt, Pointer<Void>, UnsignedInt, Int, UnsignedInt, UnsignedInt,
                  Pointer<Float>)>>('glStencilStrokePathInstancedNV')
      .asFunction<void Function(int, int, Pointer<Void>, int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void pathCoverDepthFuncNV(int func) => _glPathCoverDepthFuncNV(func);
  late final _glPathCoverDepthFuncNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glPathCoverDepthFuncNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void coverFillPathNV(int path, int coverMode) => _glCoverFillPathNV(path, coverMode);
  late final _glCoverFillPathNV = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glCoverFillPathNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void coverStrokePathNV(int path, int coverMode) => _glCoverStrokePathNV(path, coverMode);
  late final _glCoverStrokePathNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glCoverStrokePathNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void coverFillPathInstancedNV(int numPaths, int pathNameType, Pointer<Void> paths, int pathBase, int coverMode,
          int transformType, Pointer<Float> transformValues) =>
      _glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  late final _glCoverFillPathInstancedNV = _lookup<
          NativeFunction<
              Void Function(Int, UnsignedInt, Pointer<Void>, UnsignedInt, UnsignedInt, UnsignedInt,
                  Pointer<Float>)>>('glCoverFillPathInstancedNV')
      .asFunction<void Function(int, int, Pointer<Void>, int, int, int, Pointer<Float>)>(isLeaf: true);

  void coverStrokePathInstancedNV(int numPaths, int pathNameType, Pointer<Void> paths, int pathBase, int coverMode,
          int transformType, Pointer<Float> transformValues) =>
      _glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  late final _glCoverStrokePathInstancedNV = _lookup<
          NativeFunction<
              Void Function(Int, UnsignedInt, Pointer<Void>, UnsignedInt, UnsignedInt, UnsignedInt,
                  Pointer<Float>)>>('glCoverStrokePathInstancedNV')
      .asFunction<void Function(int, int, Pointer<Void>, int, int, int, Pointer<Float>)>(isLeaf: true);

  void getPathParameterivNV(int path, int pname, Pointer<Int> value) => _glGetPathParameterivNV(path, pname, value);
  late final _glGetPathParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetPathParameterivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getPathParameterfvNV(int path, int pname, Pointer<Float> value) => _glGetPathParameterfvNV(path, pname, value);
  late final _glGetPathParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetPathParameterfvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getPathCommandsNV(int path, Pointer<UnsignedChar> commands) => _glGetPathCommandsNV(path, commands);
  late final _glGetPathCommandsNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glGetPathCommandsNV')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void getPathCoordsNV(int path, Pointer<Float> coords) => _glGetPathCoordsNV(path, coords);
  late final _glGetPathCoordsNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glGetPathCoordsNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void getPathDashArrayNV(int path, Pointer<Float> dashArray) => _glGetPathDashArrayNV(path, dashArray);
  late final _glGetPathDashArrayNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glGetPathDashArrayNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void getPathMetricsNV(int metricQueryMask, int numPaths, int pathNameType, Pointer<Void> paths, int pathBase,
          int stride, Pointer<Float> metrics) =>
      _glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  late final _glGetPathMetricsNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>, UnsignedInt, Int,
                  Pointer<Float>)>>('glGetPathMetricsNV')
      .asFunction<void Function(int, int, int, Pointer<Void>, int, int, Pointer<Float>)>(isLeaf: true);

  void getPathMetricRangeNV(int metricQueryMask, int firstPathName, int numPaths, int stride, Pointer<Float> metrics) =>
      _glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
  late final _glGetPathMetricRangeNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Pointer<Float>)>>(
              'glGetPathMetricRangeNV')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void getPathSpacingNV(int pathListMode, int numPaths, int pathNameType, Pointer<Void> paths, int pathBase,
          double advanceScale, double kerningScale, int transformType, Pointer<Float> returnedSpacing) =>
      _glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale,
          transformType, returnedSpacing);
  late final _glGetPathSpacingNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, UnsignedInt, Pointer<Void>, UnsignedInt, Float, Float, UnsignedInt,
                  Pointer<Float>)>>('glGetPathSpacingNV')
      .asFunction<void Function(int, int, int, Pointer<Void>, int, double, double, int, Pointer<Float>)>(isLeaf: true);

  int isPointInFillPathNV(int path, int mask, double x, double y) => _glIsPointInFillPathNV(path, mask, x, y);
  late final _glIsPointInFillPathNV =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt, UnsignedInt, Float, Float)>>('glIsPointInFillPathNV')
          .asFunction<int Function(int, int, double, double)>(isLeaf: true);

  int isPointInStrokePathNV(int path, double x, double y) => _glIsPointInStrokePathNV(path, x, y);
  late final _glIsPointInStrokePathNV =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt, Float, Float)>>('glIsPointInStrokePathNV')
          .asFunction<int Function(int, double, double)>(isLeaf: true);

  double getPathLengthNV(int path, int startSegment, int numSegments) =>
      _glGetPathLengthNV(path, startSegment, numSegments);
  late final _glGetPathLengthNV = _lookup<NativeFunction<Float Function(UnsignedInt, Int, Int)>>('glGetPathLengthNV')
      .asFunction<double Function(int, int, int)>(isLeaf: true);

  int pointAlongPathNV(int path, int startSegment, int numSegments, double distance, Pointer<Float> x, Pointer<Float> y,
          Pointer<Float> tangentX, Pointer<Float> tangentY) =>
      _glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  late final _glPointAlongPathNV = _lookup<
          NativeFunction<
              UnsignedChar Function(UnsignedInt, Int, Int, Float, Pointer<Float>, Pointer<Float>, Pointer<Float>,
                  Pointer<Float>)>>('glPointAlongPathNV')
      .asFunction<
          int Function(int, int, int, double, Pointer<Float>, Pointer<Float>, Pointer<Float>, Pointer<Float>)>();

  void matrixLoad3x2fNV(int matrixMode, Pointer<Float> m) => _glMatrixLoad3x2fNV(matrixMode, m);
  late final _glMatrixLoad3x2fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMatrixLoad3x2fNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void matrixLoad3x3fNV(int matrixMode, Pointer<Float> m) => _glMatrixLoad3x3fNV(matrixMode, m);
  late final _glMatrixLoad3x3fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMatrixLoad3x3fNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void matrixLoadTranspose3x3fNV(int matrixMode, Pointer<Float> m) => _glMatrixLoadTranspose3x3fNV(matrixMode, m);
  late final _glMatrixLoadTranspose3x3fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMatrixLoadTranspose3x3fNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void matrixMult3x2fNV(int matrixMode, Pointer<Float> m) => _glMatrixMult3x2fNV(matrixMode, m);
  late final _glMatrixMult3x2fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMatrixMult3x2fNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void matrixMult3x3fNV(int matrixMode, Pointer<Float> m) => _glMatrixMult3x3fNV(matrixMode, m);
  late final _glMatrixMult3x3fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMatrixMult3x3fNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void matrixMultTranspose3x3fNV(int matrixMode, Pointer<Float> m) => _glMatrixMultTranspose3x3fNV(matrixMode, m);
  late final _glMatrixMultTranspose3x3fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glMatrixMultTranspose3x3fNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void stencilThenCoverFillPathNV(int path, int fillMode, int mask, int coverMode) =>
      _glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
  late final _glStencilThenCoverFillPathNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glStencilThenCoverFillPathNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void stencilThenCoverStrokePathNV(int path, int reference, int mask, int coverMode) =>
      _glStencilThenCoverStrokePathNV(path, reference, mask, coverMode);
  late final _glStencilThenCoverStrokePathNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedInt)>>(
              'glStencilThenCoverStrokePathNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void stencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, Pointer<Void> paths, int pathBase,
          int fillMode, int mask, int coverMode, int transformType, Pointer<Float> transformValues) =>
      _glStencilThenCoverFillPathInstancedNV(
          numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
  late final _glStencilThenCoverFillPathInstancedNV = _lookup<
          NativeFunction<
              Void Function(Int, UnsignedInt, Pointer<Void>, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt, Pointer<Float>)>>('glStencilThenCoverFillPathInstancedNV')
      .asFunction<void Function(int, int, Pointer<Void>, int, int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void stencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, Pointer<Void> paths, int pathBase,
          int reference, int mask, int coverMode, int transformType, Pointer<Float> transformValues) =>
      _glStencilThenCoverStrokePathInstancedNV(
          numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
  late final _glStencilThenCoverStrokePathInstancedNV = _lookup<
          NativeFunction<
              Void Function(Int, UnsignedInt, Pointer<Void>, UnsignedInt, Int, UnsignedInt, UnsignedInt, UnsignedInt,
                  Pointer<Float>)>>('glStencilThenCoverStrokePathInstancedNV')
      .asFunction<void Function(int, int, Pointer<Void>, int, int, int, int, int, Pointer<Float>)>(isLeaf: true);

  int pathGlyphIndexRangeNV(int fontTarget, Pointer<Void> fontName, int fontStyle, int pathParameterTemplate,
          double emScale, Pointer<UnsignedInt> baseAndCount) =>
      _glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
  late final _glPathGlyphIndexRangeNV = _lookup<
          NativeFunction<
              UnsignedInt Function(UnsignedInt, Pointer<Void>, UnsignedInt, UnsignedInt, Float,
                  Pointer<UnsignedInt>)>>('glPathGlyphIndexRangeNV')
      .asFunction<int Function(int, Pointer<Void>, int, int, double, Pointer<UnsignedInt>)>(isLeaf: true);

  int pathGlyphIndexArrayNV(int firstPathName, int fontTarget, Pointer<Void> fontName, int fontStyle,
          int firstGlyphIndex, int numGlyphs, int pathParameterTemplate, double emScale) =>
      _glPathGlyphIndexArrayNV(
          firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  late final _glPathGlyphIndexArrayNV = _lookup<
          NativeFunction<
              UnsignedInt Function(UnsignedInt, UnsignedInt, Pointer<Void>, UnsignedInt, UnsignedInt, Int, UnsignedInt,
                  Float)>>('glPathGlyphIndexArrayNV')
      .asFunction<int Function(int, int, Pointer<Void>, int, int, int, int, double)>(isLeaf: true);

  int pathMemoryGlyphIndexArrayNV(int firstPathName, int fontTarget, int fontSize, Pointer<Void> fontData,
          int faceIndex, int firstGlyphIndex, int numGlyphs, int pathParameterTemplate, double emScale) =>
      _glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex,
          numGlyphs, pathParameterTemplate, emScale);
  late final _glPathMemoryGlyphIndexArrayNV = _lookup<
          NativeFunction<
              UnsignedInt Function(UnsignedInt, UnsignedInt, Long, Pointer<Void>, Int, UnsignedInt, Int, UnsignedInt,
                  Float)>>('glPathMemoryGlyphIndexArrayNV')
      .asFunction<int Function(int, int, int, Pointer<Void>, int, int, int, int, double)>(isLeaf: true);

  void programPathFragmentInputGenNV(int program, int location, int genMode, int components, Pointer<Float> coeffs) =>
      _glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs);
  late final _glProgramPathFragmentInputGenNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Pointer<Float>)>>(
              'glProgramPathFragmentInputGenNV')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void getProgramResourcefvNV(int program, int programInterface, int index, int propCount, Pointer<UnsignedInt> props,
          int count, Pointer<Int> length, Pointer<Float> params) =>
      _glGetProgramResourcefvNV(program, programInterface, index, propCount, props, count, length, params);
  late final _glGetProgramResourcefvNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>, Int, Pointer<Int>,
                  Pointer<Float>)>>('glGetProgramResourcefvNV')
      .asFunction<void Function(int, int, int, int, Pointer<UnsignedInt>, int, Pointer<Int>, Pointer<Float>)>(
          isLeaf: true);

  void pathColorGenNV(int color, int genMode, int colorFormat, Pointer<Float> coeffs) =>
      _glPathColorGenNV(color, genMode, colorFormat, coeffs);
  late final _glPathColorGenNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>('glPathColorGenNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void pathTexGenNV(int texCoordSet, int genMode, int components, Pointer<Float> coeffs) =>
      _glPathTexGenNV(texCoordSet, genMode, components, coeffs);
  late final _glPathTexGenNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>('glPathTexGenNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void pathFogGenNV(int genMode) => _glPathFogGenNV(genMode);
  late final _glPathFogGenNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glPathFogGenNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void getPathColorGenivNV(int color, int pname, Pointer<Int> value) => _glGetPathColorGenivNV(color, pname, value);
  late final _glGetPathColorGenivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetPathColorGenivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getPathColorGenfvNV(int color, int pname, Pointer<Float> value) => _glGetPathColorGenfvNV(color, pname, value);
  late final _glGetPathColorGenfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetPathColorGenfvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getPathTexGenivNV(int texCoordSet, int pname, Pointer<Int> value) =>
      _glGetPathTexGenivNV(texCoordSet, pname, value);
  late final _glGetPathTexGenivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetPathTexGenivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getPathTexGenfvNV(int texCoordSet, int pname, Pointer<Float> value) =>
      _glGetPathTexGenfvNV(texCoordSet, pname, value);
  late final _glGetPathTexGenfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetPathTexGenfvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void pixelDataRangeNV(int target, int length, Pointer<Void> pointer) => _glPixelDataRangeNV(target, length, pointer);
  late final _glPixelDataRangeNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Void>)>>('glPixelDataRangeNV')
          .asFunction<void Function(int, int, Pointer<Void>)>(isLeaf: true);

  void flushPixelDataRangeNV(int target) => _glFlushPixelDataRangeNV(target);
  late final _glFlushPixelDataRangeNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glFlushPixelDataRangeNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void pointParameteriNV(int pname, int param) => _glPointParameteriNV(pname, param);
  late final _glPointParameteriNV = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glPointParameteriNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void pointParameterivNV(int pname, Pointer<Int> params) => _glPointParameterivNV(pname, params);
  late final _glPointParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glPointParameterivNV')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void presentFrameKeyedNV(int video_slot, int minPresentTime, int beginPresentTimeId, int presentDurationId, int type,
          int target0, int fill0, int key0, int target1, int fill1, int key1) =>
      _glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0,
          key0, target1, fill1, key1);
  late final _glPresentFrameKeyedNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Uint64, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glPresentFrameKeyedNV')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void presentFrameDualFillNV(int video_slot, int minPresentTime, int beginPresentTimeId, int presentDurationId,
          int type, int target0, int fill0, int target1, int fill1, int target2, int fill2, int target3, int fill3) =>
      _glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0,
          target1, fill1, target2, fill2, target3, fill3);
  late final _glPresentFrameDualFillNV = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt,
                  Uint64,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt,
                  UnsignedInt)>>('glPresentFrameDualFillNV')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void getVideoivNV(int video_slot, int pname, Pointer<Int> params) => _glGetVideoivNV(video_slot, pname, params);
  late final _glGetVideoivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVideoivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVideouivNV(int video_slot, int pname, Pointer<UnsignedInt> params) =>
      _glGetVideouivNV(video_slot, pname, params);
  late final _glGetVideouivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>('glGetVideouivNV')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getVideoi64vNV(int video_slot, int pname, Pointer<Int64> params) => _glGetVideoi64vNV(video_slot, pname, params);
  late final _glGetVideoi64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int64>)>>('glGetVideoi64vNV')
          .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void getVideoui64vNV(int video_slot, int pname, Pointer<Uint64> params) =>
      _glGetVideoui64vNV(video_slot, pname, params);
  late final _glGetVideoui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Uint64>)>>('glGetVideoui64vNV')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void primitiveRestartNV() => _glPrimitiveRestartNV();
  late final _glPrimitiveRestartNV =
      _lookup<NativeFunction<Void Function()>>('glPrimitiveRestartNV').asFunction<void Function()>(isLeaf: true);

  void primitiveRestartIndexNV(int index) => _glPrimitiveRestartIndexNV(index);
  late final _glPrimitiveRestartIndexNV =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glPrimitiveRestartIndexNV')
          .asFunction<void Function(int)>(isLeaf: true);

  int queryResourceNV(int queryType, int tagId, int count, Pointer<Int> buffer) =>
      _glQueryResourceNV(queryType, tagId, count, buffer);
  late final _glQueryResourceNV =
      _lookup<NativeFunction<Int Function(UnsignedInt, Int, UnsignedInt, Pointer<Int>)>>('glQueryResourceNV')
          .asFunction<int Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void genQueryResourceTagNV(int n, Pointer<Int> tagIds) => _glGenQueryResourceTagNV(n, tagIds);
  late final _glGenQueryResourceTagNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<Int>)>>('glGenQueryResourceTagNV')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void deleteQueryResourceTagNV(int n, Pointer<Int> tagIds) => _glDeleteQueryResourceTagNV(n, tagIds);
  late final _glDeleteQueryResourceTagNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<Int>)>>('glDeleteQueryResourceTagNV')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void queryResourceTagNV(int tagId, Pointer<Char> tagString) => _glQueryResourceTagNV(tagId, tagString);
  late final _glQueryResourceTagNV = _lookup<NativeFunction<Void Function(Int, Pointer<Char>)>>('glQueryResourceTagNV')
      .asFunction<void Function(int, Pointer<Char>)>(isLeaf: true);

  void combinerParameterfvNV(int pname, Pointer<Float> params) => _glCombinerParameterfvNV(pname, params);
  late final _glCombinerParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glCombinerParameterfvNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void combinerParameterfNV(int pname, double param) => _glCombinerParameterfNV(pname, param);
  late final _glCombinerParameterfNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glCombinerParameterfNV')
          .asFunction<void Function(int, double)>(isLeaf: true);

  void combinerParameterivNV(int pname, Pointer<Int> params) => _glCombinerParameterivNV(pname, params);
  late final _glCombinerParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glCombinerParameterivNV')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void combinerParameteriNV(int pname, int param) => _glCombinerParameteriNV(pname, param);
  late final _glCombinerParameteriNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glCombinerParameteriNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void combinerInputNV(int stage, int portion, int variable, int input, int mapping, int componentUsage) =>
      _glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
  late final _glCombinerInputNV = _lookup<
          NativeFunction<
              Void Function(
                  UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glCombinerInputNV')
      .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void combinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias,
          int abDotProduct, int cdDotProduct, int muxSum) =>
      _glCombinerOutputNV(
          stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
  late final _glCombinerOutputNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt,
                  UnsignedChar, UnsignedChar, UnsignedChar)>>('glCombinerOutputNV')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void finalCombinerInputNV(int variable, int input, int mapping, int componentUsage) =>
      _glFinalCombinerInputNV(variable, input, mapping, componentUsage);
  late final _glFinalCombinerInputNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glFinalCombinerInputNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, Pointer<Float> params) =>
      _glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
  late final _glGetCombinerInputParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetCombinerInputParameterfvNV')
          .asFunction<void Function(int, int, int, int, Pointer<Float>)>(isLeaf: true);

  void getCombinerInputParameterivNV(int stage, int portion, int variable, int pname, Pointer<Int> params) =>
      _glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);
  late final _glGetCombinerInputParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetCombinerInputParameterivNV')
          .asFunction<void Function(int, int, int, int, Pointer<Int>)>(isLeaf: true);

  void getCombinerOutputParameterfvNV(int stage, int portion, int pname, Pointer<Float> params) =>
      _glGetCombinerOutputParameterfvNV(stage, portion, pname, params);
  late final _glGetCombinerOutputParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetCombinerOutputParameterfvNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getCombinerOutputParameterivNV(int stage, int portion, int pname, Pointer<Int> params) =>
      _glGetCombinerOutputParameterivNV(stage, portion, pname, params);
  late final _glGetCombinerOutputParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetCombinerOutputParameterivNV')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getFinalCombinerInputParameterfvNV(int variable, int pname, Pointer<Float> params) =>
      _glGetFinalCombinerInputParameterfvNV(variable, pname, params);
  late final _glGetFinalCombinerInputParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetFinalCombinerInputParameterfvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getFinalCombinerInputParameterivNV(int variable, int pname, Pointer<Int> params) =>
      _glGetFinalCombinerInputParameterivNV(variable, pname, params);
  late final _glGetFinalCombinerInputParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetFinalCombinerInputParameterivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void combinerStageParameterfvNV(int stage, int pname, Pointer<Float> params) =>
      _glCombinerStageParameterfvNV(stage, pname, params);
  late final _glCombinerStageParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glCombinerStageParameterfvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getCombinerStageParameterfvNV(int stage, int pname, Pointer<Float> params) =>
      _glGetCombinerStageParameterfvNV(stage, pname, params);
  late final _glGetCombinerStageParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetCombinerStageParameterfvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void framebufferSampleLocationsfvNV(int target, int start, int count, Pointer<Float> v) =>
      _glFramebufferSampleLocationsfvNV(target, start, count, v);
  late final _glFramebufferSampleLocationsfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glFramebufferSampleLocationsfvNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void namedFramebufferSampleLocationsfvNV(int framebuffer, int start, int count, Pointer<Float> v) =>
      _glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v);
  late final _glNamedFramebufferSampleLocationsfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>(
              'glNamedFramebufferSampleLocationsfvNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void resolveDepthValuesNV() => _glResolveDepthValuesNV();
  late final _glResolveDepthValuesNV =
      _lookup<NativeFunction<Void Function()>>('glResolveDepthValuesNV').asFunction<void Function()>(isLeaf: true);

  void scissorExclusiveNV(int x, int y, int width, int height) => _glScissorExclusiveNV(x, y, width, height);
  late final _glScissorExclusiveNV = _lookup<NativeFunction<Void Function(Int, Int, Int, Int)>>('glScissorExclusiveNV')
      .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void scissorExclusiveArrayvNV(int first, int count, Pointer<Int> v) => _glScissorExclusiveArrayvNV(first, count, v);
  late final _glScissorExclusiveArrayvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>)>>('glScissorExclusiveArrayvNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void makeBufferResidentNV(int target, int access) => _glMakeBufferResidentNV(target, access);
  late final _glMakeBufferResidentNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glMakeBufferResidentNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void makeBufferNonResidentNV(int target) => _glMakeBufferNonResidentNV(target);
  late final _glMakeBufferNonResidentNV =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMakeBufferNonResidentNV')
          .asFunction<void Function(int)>(isLeaf: true);

  int isBufferResidentNV(int target) => _glIsBufferResidentNV(target);
  late final _glIsBufferResidentNV = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsBufferResidentNV')
      .asFunction<int Function(int)>(isLeaf: true);

  void makeNamedBufferResidentNV(int buffer, int access) => _glMakeNamedBufferResidentNV(buffer, access);
  late final _glMakeNamedBufferResidentNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glMakeNamedBufferResidentNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void makeNamedBufferNonResidentNV(int buffer) => _glMakeNamedBufferNonResidentNV(buffer);
  late final _glMakeNamedBufferNonResidentNV =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glMakeNamedBufferNonResidentNV')
          .asFunction<void Function(int)>(isLeaf: true);

  int isNamedBufferResidentNV(int buffer) => _glIsNamedBufferResidentNV(buffer);
  late final _glIsNamedBufferResidentNV =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsNamedBufferResidentNV')
          .asFunction<int Function(int)>(isLeaf: true);

  void getBufferParameterui64vNV(int target, int pname, Pointer<Uint64> params) =>
      _glGetBufferParameterui64vNV(target, pname, params);
  late final _glGetBufferParameterui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Uint64>)>>('glGetBufferParameterui64vNV')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void getNamedBufferParameterui64vNV(int buffer, int pname, Pointer<Uint64> params) =>
      _glGetNamedBufferParameterui64vNV(buffer, pname, params);
  late final _glGetNamedBufferParameterui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Uint64>)>>(
              'glGetNamedBufferParameterui64vNV')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void getIntegerui64vNV(int value, Pointer<Uint64> result) => _glGetIntegerui64vNV(value, result);
  late final _glGetIntegerui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Uint64>)>>('glGetIntegerui64vNV')
          .asFunction<void Function(int, Pointer<Uint64>)>(isLeaf: true);

  void uniformui64NV(int location, int value) => _glUniformui64NV(location, value);
  late final _glUniformui64NV = _lookup<NativeFunction<Void Function(Int, Uint64)>>('glUniformui64NV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void uniformui64vNV(int location, int count, Pointer<Uint64> value) => _glUniformui64vNV(location, count, value);
  late final _glUniformui64vNV = _lookup<NativeFunction<Void Function(Int, Int, Pointer<Uint64>)>>('glUniformui64vNV')
      .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void programUniformui64NV(int program, int location, int value) => _glProgramUniformui64NV(program, location, value);
  late final _glProgramUniformui64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Uint64)>>('glProgramUniformui64NV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void programUniformui64vNV(int program, int location, int count, Pointer<Uint64> value) =>
      _glProgramUniformui64vNV(program, location, count, value);
  late final _glProgramUniformui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Pointer<Uint64>)>>('glProgramUniformui64vNV')
          .asFunction<void Function(int, int, int, Pointer<Uint64>)>(isLeaf: true);

  void bindShadingRateImageNV(int texture) => _glBindShadingRateImageNV(texture);
  late final _glBindShadingRateImageNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBindShadingRateImageNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void getShadingRateImagePaletteNV(int viewport, int entry, Pointer<UnsignedInt> rate) =>
      _glGetShadingRateImagePaletteNV(viewport, entry, rate);
  late final _glGetShadingRateImagePaletteNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedInt>)>>(
              'glGetShadingRateImagePaletteNV')
          .asFunction<void Function(int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getShadingRateSampleLocationivNV(int rate, int samples, int index, Pointer<Int> location) =>
      _glGetShadingRateSampleLocationivNV(rate, samples, index, location);
  late final _glGetShadingRateSampleLocationivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetShadingRateSampleLocationivNV')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void shadingRateImageBarrierNV(int synchronize) => _glShadingRateImageBarrierNV(synchronize);
  late final _glShadingRateImageBarrierNV =
      _lookup<NativeFunction<Void Function(UnsignedChar)>>('glShadingRateImageBarrierNV')
          .asFunction<void Function(int)>(isLeaf: true);

  void shadingRateImagePaletteNV(int viewport, int first, int count, Pointer<UnsignedInt> rates) =>
      _glShadingRateImagePaletteNV(viewport, first, count, rates);
  late final _glShadingRateImagePaletteNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<UnsignedInt>)>>(
              'glShadingRateImagePaletteNV')
          .asFunction<void Function(int, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  void shadingRateSampleOrderNV(int order) => _glShadingRateSampleOrderNV(order);
  late final _glShadingRateSampleOrderNV =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glShadingRateSampleOrderNV')
          .asFunction<void Function(int)>(isLeaf: true);

  void shadingRateSampleOrderCustomNV(int rate, int samples, Pointer<Int> locations) =>
      _glShadingRateSampleOrderCustomNV(rate, samples, locations);
  late final _glShadingRateSampleOrderCustomNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glShadingRateSampleOrderCustomNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void textureBarrierNV() => _glTextureBarrierNV();
  late final _glTextureBarrierNV =
      _lookup<NativeFunction<Void Function()>>('glTextureBarrierNV').asFunction<void Function()>(isLeaf: true);

  void texImage2DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width,
          int height, int fixedSampleLocations) =>
      _glTexImage2DMultisampleCoverageNV(
          target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  late final _glTexImage2DMultisampleCoverageNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, UnsignedChar)>>(
              'glTexImage2DMultisampleCoverageNV')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void texImage3DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width,
          int height, int depth, int fixedSampleLocations) =>
      _glTexImage3DMultisampleCoverageNV(
          target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  late final _glTexImage3DMultisampleCoverageNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, UnsignedChar)>>(
              'glTexImage3DMultisampleCoverageNV')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void textureImage2DMultisampleNV(
          int texture, int target, int samples, int internalFormat, int width, int height, int fixedSampleLocations) =>
      _glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
  late final _glTextureImage2DMultisampleNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, UnsignedChar)>>(
              'glTextureImage2DMultisampleNV')
          .asFunction<void Function(int, int, int, int, int, int, int)>(isLeaf: true);

  void textureImage3DMultisampleNV(int texture, int target, int samples, int internalFormat, int width, int height,
          int depth, int fixedSampleLocations) =>
      _glTextureImage3DMultisampleNV(
          texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
  late final _glTextureImage3DMultisampleNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, UnsignedChar)>>(
              'glTextureImage3DMultisampleNV')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void textureImage2DMultisampleCoverageNV(int texture, int target, int coverageSamples, int colorSamples,
          int internalFormat, int width, int height, int fixedSampleLocations) =>
      _glTextureImage2DMultisampleCoverageNV(
          texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  late final _glTextureImage2DMultisampleCoverageNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, UnsignedChar)>>(
              'glTextureImage2DMultisampleCoverageNV')
          .asFunction<void Function(int, int, int, int, int, int, int, int)>(isLeaf: true);

  void textureImage3DMultisampleCoverageNV(int texture, int target, int coverageSamples, int colorSamples,
          int internalFormat, int width, int height, int depth, int fixedSampleLocations) =>
      _glTextureImage3DMultisampleCoverageNV(
          texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  late final _glTextureImage3DMultisampleCoverageNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int, Int, Int, Int, UnsignedChar)>>(
              'glTextureImage3DMultisampleCoverageNV')
          .asFunction<void Function(int, int, int, int, int, int, int, int, int)>(isLeaf: true);

  void createSemaphoresNV(int n, Pointer<UnsignedInt> semaphores) => _glCreateSemaphoresNV(n, semaphores);
  late final _glCreateSemaphoresNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glCreateSemaphoresNV')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void semaphoreParameterivNV(int semaphore, int pname, Pointer<Int> params) =>
      _glSemaphoreParameterivNV(semaphore, pname, params);
  late final _glSemaphoreParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glSemaphoreParameterivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getSemaphoreParameterivNV(int semaphore, int pname, Pointer<Int> params) =>
      _glGetSemaphoreParameterivNV(semaphore, pname, params);
  late final _glGetSemaphoreParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetSemaphoreParameterivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void beginTransformFeedbackNV(int primitiveMode) => _glBeginTransformFeedbackNV(primitiveMode);
  late final _glBeginTransformFeedbackNV =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBeginTransformFeedbackNV')
          .asFunction<void Function(int)>(isLeaf: true);

  void endTransformFeedbackNV() => _glEndTransformFeedbackNV();
  late final _glEndTransformFeedbackNV =
      _lookup<NativeFunction<Void Function()>>('glEndTransformFeedbackNV').asFunction<void Function()>(isLeaf: true);

  void transformFeedbackAttribsNV(int count, Pointer<Int> attribs, int bufferMode) =>
      _glTransformFeedbackAttribsNV(count, attribs, bufferMode);
  late final _glTransformFeedbackAttribsNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<Int>, UnsignedInt)>>('glTransformFeedbackAttribsNV')
          .asFunction<void Function(int, Pointer<Int>, int)>(isLeaf: true);

  void bindBufferRangeNV(int target, int index, int buffer, int offset, int size) =>
      _glBindBufferRangeNV(target, index, buffer, offset, size);
  late final _glBindBufferRangeNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long, Long)>>('glBindBufferRangeNV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void bindBufferOffsetNV(int target, int index, int buffer, int offset) =>
      _glBindBufferOffsetNV(target, index, buffer, offset);
  late final _glBindBufferOffsetNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long)>>('glBindBufferOffsetNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void bindBufferBaseNV(int target, int index, int buffer) => _glBindBufferBaseNV(target, index, buffer);
  late final _glBindBufferBaseNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt)>>('glBindBufferBaseNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void transformFeedbackVaryingsNV(int program, int count, Pointer<Int> locations, int bufferMode) =>
      _glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
  late final _glTransformFeedbackVaryingsNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Int>, UnsignedInt)>>(
              'glTransformFeedbackVaryingsNV')
          .asFunction<void Function(int, int, Pointer<Int>, int)>(isLeaf: true);

  void activeVaryingNV(int program, Pointer<Char> name) => _glActiveVaryingNV(program, name);
  late final _glActiveVaryingNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Char>)>>('glActiveVaryingNV')
          .asFunction<void Function(int, Pointer<Char>)>(isLeaf: true);

  int getVaryingLocationNV(int program, Pointer<Char> name) => _glGetVaryingLocationNV(program, name);
  late final _glGetVaryingLocationNV =
      _lookup<NativeFunction<Int Function(UnsignedInt, Pointer<Char>)>>('glGetVaryingLocationNV')
          .asFunction<int Function(int, Pointer<Char>)>(isLeaf: true);

  void getActiveVaryingNV(int program, int index, int bufSize, Pointer<Int> length, Pointer<Int> size,
          Pointer<UnsignedInt> type, Pointer<Char> name) =>
      _glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
  late final _glGetActiveVaryingNV = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>,
                  Pointer<Char>)>>('glGetActiveVaryingNV')
      .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Int>, Pointer<UnsignedInt>, Pointer<Char>)>(
          isLeaf: true);

  void getTransformFeedbackVaryingNV(int program, int index, Pointer<Int> location) =>
      _glGetTransformFeedbackVaryingNV(program, index, location);
  late final _glGetTransformFeedbackVaryingNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetTransformFeedbackVaryingNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void transformFeedbackStreamAttribsNV(
          int count, Pointer<Int> attribs, int nbuffers, Pointer<Int> bufstreams, int bufferMode) =>
      _glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);
  late final _glTransformFeedbackStreamAttribsNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<Int>, Int, Pointer<Int>, UnsignedInt)>>(
              'glTransformFeedbackStreamAttribsNV')
          .asFunction<void Function(int, Pointer<Int>, int, Pointer<Int>, int)>(isLeaf: true);

  void bindTransformFeedbackNV(int target, int id) => _glBindTransformFeedbackNV(target, id);
  late final _glBindTransformFeedbackNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindTransformFeedbackNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteTransformFeedbacksNV(int n, Pointer<UnsignedInt> ids) => _glDeleteTransformFeedbacksNV(n, ids);
  late final _glDeleteTransformFeedbacksNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteTransformFeedbacksNV')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void genTransformFeedbacksNV(int n, Pointer<UnsignedInt> ids) => _glGenTransformFeedbacksNV(n, ids);
  late final _glGenTransformFeedbacksNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenTransformFeedbacksNV')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  int isTransformFeedbackNV(int id) => _glIsTransformFeedbackNV(id);
  late final _glIsTransformFeedbackNV =
      _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsTransformFeedbackNV')
          .asFunction<int Function(int)>(isLeaf: true);

  void pauseTransformFeedbackNV() => _glPauseTransformFeedbackNV();
  late final _glPauseTransformFeedbackNV =
      _lookup<NativeFunction<Void Function()>>('glPauseTransformFeedbackNV').asFunction<void Function()>(isLeaf: true);

  void resumeTransformFeedbackNV() => _glResumeTransformFeedbackNV();
  late final _glResumeTransformFeedbackNV =
      _lookup<NativeFunction<Void Function()>>('glResumeTransformFeedbackNV').asFunction<void Function()>(isLeaf: true);

  void drawTransformFeedbackNV(int mode, int id) => _glDrawTransformFeedbackNV(mode, id);
  late final _glDrawTransformFeedbackNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glDrawTransformFeedbackNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vDPAUInitNV(Pointer<Void> vdpDevice, Pointer<Void> getProcAddress) => _glVDPAUInitNV(vdpDevice, getProcAddress);
  late final _glVDPAUInitNV = _lookup<NativeFunction<Void Function(Pointer<Void>, Pointer<Void>)>>('glVDPAUInitNV')
      .asFunction<void Function(Pointer<Void>, Pointer<Void>)>(isLeaf: true);

  void vDPAUFiniNV() => _glVDPAUFiniNV();
  late final _glVDPAUFiniNV =
      _lookup<NativeFunction<Void Function()>>('glVDPAUFiniNV').asFunction<void Function()>(isLeaf: true);

  int vDPAURegisterVideoSurfaceNV(
          Pointer<Void> vdpSurface, int target, int numTextureNames, Pointer<UnsignedInt> textureNames) =>
      _glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
  late final _glVDPAURegisterVideoSurfaceNV =
      _lookup<NativeFunction<Long Function(Pointer<Void>, UnsignedInt, Int, Pointer<UnsignedInt>)>>(
              'glVDPAURegisterVideoSurfaceNV')
          .asFunction<int Function(Pointer<Void>, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  int vDPAURegisterOutputSurfaceNV(
          Pointer<Void> vdpSurface, int target, int numTextureNames, Pointer<UnsignedInt> textureNames) =>
      _glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
  late final _glVDPAURegisterOutputSurfaceNV =
      _lookup<NativeFunction<Long Function(Pointer<Void>, UnsignedInt, Int, Pointer<UnsignedInt>)>>(
              'glVDPAURegisterOutputSurfaceNV')
          .asFunction<int Function(Pointer<Void>, int, int, Pointer<UnsignedInt>)>(isLeaf: true);

  int vDPAUIsSurfaceNV(int surface) => _glVDPAUIsSurfaceNV(surface);
  late final _glVDPAUIsSurfaceNV = _lookup<NativeFunction<UnsignedChar Function(Long)>>('glVDPAUIsSurfaceNV')
      .asFunction<int Function(int)>(isLeaf: true);

  void vDPAUUnregisterSurfaceNV(int surface) => _glVDPAUUnregisterSurfaceNV(surface);
  late final _glVDPAUUnregisterSurfaceNV = _lookup<NativeFunction<Void Function(Long)>>('glVDPAUUnregisterSurfaceNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void vDPAUGetSurfaceivNV(int surface, int pname, int count, Pointer<Int> length, Pointer<Int> values) =>
      _glVDPAUGetSurfaceivNV(surface, pname, count, length, values);
  late final _glVDPAUGetSurfaceivNV =
      _lookup<NativeFunction<Void Function(Long, UnsignedInt, Int, Pointer<Int>, Pointer<Int>)>>(
              'glVDPAUGetSurfaceivNV')
          .asFunction<void Function(int, int, int, Pointer<Int>, Pointer<Int>)>(isLeaf: true);

  void vDPAUSurfaceAccessNV(int surface, int access) => _glVDPAUSurfaceAccessNV(surface, access);
  late final _glVDPAUSurfaceAccessNV =
      _lookup<NativeFunction<Void Function(Long, UnsignedInt)>>('glVDPAUSurfaceAccessNV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vDPAUMapSurfacesNV(int numSurfaces, Pointer<Long> surfaces) => _glVDPAUMapSurfacesNV(numSurfaces, surfaces);
  late final _glVDPAUMapSurfacesNV = _lookup<NativeFunction<Void Function(Int, Pointer<Long>)>>('glVDPAUMapSurfacesNV')
      .asFunction<void Function(int, Pointer<Long>)>(isLeaf: true);

  void vDPAUUnmapSurfacesNV(int numSurface, Pointer<Long> surfaces) => _glVDPAUUnmapSurfacesNV(numSurface, surfaces);
  late final _glVDPAUUnmapSurfacesNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<Long>)>>('glVDPAUUnmapSurfacesNV')
          .asFunction<void Function(int, Pointer<Long>)>(isLeaf: true);

  int vDPAURegisterVideoSurfaceWithPictureStructureNV(Pointer<Void> vdpSurface, int target, int numTextureNames,
          Pointer<UnsignedInt> textureNames, int isFrameStructure) =>
      _glVDPAURegisterVideoSurfaceWithPictureStructureNV(
          vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
  late final _glVDPAURegisterVideoSurfaceWithPictureStructureNV =
      _lookup<NativeFunction<Long Function(Pointer<Void>, UnsignedInt, Int, Pointer<UnsignedInt>, UnsignedChar)>>(
              'glVDPAURegisterVideoSurfaceWithPictureStructureNV')
          .asFunction<int Function(Pointer<Void>, int, int, Pointer<UnsignedInt>, int)>(isLeaf: true);

  void flushVertexArrayRangeNV() => _glFlushVertexArrayRangeNV();
  late final _glFlushVertexArrayRangeNV =
      _lookup<NativeFunction<Void Function()>>('glFlushVertexArrayRangeNV').asFunction<void Function()>(isLeaf: true);

  void vertexArrayRangeNV(int length, Pointer<Void> pointer) => _glVertexArrayRangeNV(length, pointer);
  late final _glVertexArrayRangeNV = _lookup<NativeFunction<Void Function(Int, Pointer<Void>)>>('glVertexArrayRangeNV')
      .asFunction<void Function(int, Pointer<Void>)>(isLeaf: true);

  void vertexAttribL1i64NV(int index, int x) => _glVertexAttribL1i64NV(index, x);
  late final _glVertexAttribL1i64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int64)>>('glVertexAttribL1i64NV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttribL2i64NV(int index, int x, int y) => _glVertexAttribL2i64NV(index, x, y);
  late final _glVertexAttribL2i64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int64, Int64)>>('glVertexAttribL2i64NV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexAttribL3i64NV(int index, int x, int y, int z) => _glVertexAttribL3i64NV(index, x, y, z);
  late final _glVertexAttribL3i64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int64, Int64, Int64)>>('glVertexAttribL3i64NV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribL4i64NV(int index, int x, int y, int z, int w) => _glVertexAttribL4i64NV(index, x, y, z, w);
  late final _glVertexAttribL4i64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int64, Int64, Int64, Int64)>>('glVertexAttribL4i64NV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttribL1i64vNV(int index, Pointer<Int64> v) => _glVertexAttribL1i64vNV(index, v);
  late final _glVertexAttribL1i64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int64>)>>('glVertexAttribL1i64vNV')
          .asFunction<void Function(int, Pointer<Int64>)>(isLeaf: true);

  void vertexAttribL2i64vNV(int index, Pointer<Int64> v) => _glVertexAttribL2i64vNV(index, v);
  late final _glVertexAttribL2i64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int64>)>>('glVertexAttribL2i64vNV')
          .asFunction<void Function(int, Pointer<Int64>)>(isLeaf: true);

  void vertexAttribL3i64vNV(int index, Pointer<Int64> v) => _glVertexAttribL3i64vNV(index, v);
  late final _glVertexAttribL3i64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int64>)>>('glVertexAttribL3i64vNV')
          .asFunction<void Function(int, Pointer<Int64>)>(isLeaf: true);

  void vertexAttribL4i64vNV(int index, Pointer<Int64> v) => _glVertexAttribL4i64vNV(index, v);
  late final _glVertexAttribL4i64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int64>)>>('glVertexAttribL4i64vNV')
          .asFunction<void Function(int, Pointer<Int64>)>(isLeaf: true);

  void vertexAttribL1ui64NV(int index, int x) => _glVertexAttribL1ui64NV(index, x);
  late final _glVertexAttribL1ui64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Uint64)>>('glVertexAttribL1ui64NV')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttribL2ui64NV(int index, int x, int y) => _glVertexAttribL2ui64NV(index, x, y);
  late final _glVertexAttribL2ui64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Uint64, Uint64)>>('glVertexAttribL2ui64NV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexAttribL3ui64NV(int index, int x, int y, int z) => _glVertexAttribL3ui64NV(index, x, y, z);
  late final _glVertexAttribL3ui64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Uint64, Uint64, Uint64)>>('glVertexAttribL3ui64NV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribL4ui64NV(int index, int x, int y, int z, int w) => _glVertexAttribL4ui64NV(index, x, y, z, w);
  late final _glVertexAttribL4ui64NV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Uint64, Uint64, Uint64, Uint64)>>('glVertexAttribL4ui64NV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttribL1ui64vNV(int index, Pointer<Uint64> v) => _glVertexAttribL1ui64vNV(index, v);
  late final _glVertexAttribL1ui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Uint64>)>>('glVertexAttribL1ui64vNV')
          .asFunction<void Function(int, Pointer<Uint64>)>(isLeaf: true);

  void vertexAttribL2ui64vNV(int index, Pointer<Uint64> v) => _glVertexAttribL2ui64vNV(index, v);
  late final _glVertexAttribL2ui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Uint64>)>>('glVertexAttribL2ui64vNV')
          .asFunction<void Function(int, Pointer<Uint64>)>(isLeaf: true);

  void vertexAttribL3ui64vNV(int index, Pointer<Uint64> v) => _glVertexAttribL3ui64vNV(index, v);
  late final _glVertexAttribL3ui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Uint64>)>>('glVertexAttribL3ui64vNV')
          .asFunction<void Function(int, Pointer<Uint64>)>(isLeaf: true);

  void vertexAttribL4ui64vNV(int index, Pointer<Uint64> v) => _glVertexAttribL4ui64vNV(index, v);
  late final _glVertexAttribL4ui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Uint64>)>>('glVertexAttribL4ui64vNV')
          .asFunction<void Function(int, Pointer<Uint64>)>(isLeaf: true);

  void getVertexAttribLi64vNV(int index, int pname, Pointer<Int64> params) =>
      _glGetVertexAttribLi64vNV(index, pname, params);
  late final _glGetVertexAttribLi64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int64>)>>('glGetVertexAttribLi64vNV')
          .asFunction<void Function(int, int, Pointer<Int64>)>(isLeaf: true);

  void getVertexAttribLui64vNV(int index, int pname, Pointer<Uint64> params) =>
      _glGetVertexAttribLui64vNV(index, pname, params);
  late final _glGetVertexAttribLui64vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Uint64>)>>('glGetVertexAttribLui64vNV')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  void vertexAttribLFormatNV(int index, int size, int type, int stride) =>
      _glVertexAttribLFormatNV(index, size, type, stride);
  late final _glVertexAttribLFormatNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int)>>('glVertexAttribLFormatNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void bufferAddressRangeNV(int pname, int index, int address, int length) =>
      _glBufferAddressRangeNV(pname, index, address, length);
  late final _glBufferAddressRangeNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Uint64, Long)>>('glBufferAddressRangeNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexFormatNV(int size, int type, int stride) => _glVertexFormatNV(size, type, stride);
  late final _glVertexFormatNV = _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int)>>('glVertexFormatNV')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void normalFormatNV(int type, int stride) => _glNormalFormatNV(type, stride);
  late final _glNormalFormatNV = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glNormalFormatNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void colorFormatNV(int size, int type, int stride) => _glColorFormatNV(size, type, stride);
  late final _glColorFormatNV = _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int)>>('glColorFormatNV')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void indexFormatNV(int type, int stride) => _glIndexFormatNV(type, stride);
  late final _glIndexFormatNV = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glIndexFormatNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void texCoordFormatNV(int size, int type, int stride) => _glTexCoordFormatNV(size, type, stride);
  late final _glTexCoordFormatNV = _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int)>>('glTexCoordFormatNV')
      .asFunction<void Function(int, int, int)>(isLeaf: true);

  void edgeFlagFormatNV(int stride) => _glEdgeFlagFormatNV(stride);
  late final _glEdgeFlagFormatNV =
      _lookup<NativeFunction<Void Function(Int)>>('glEdgeFlagFormatNV').asFunction<void Function(int)>(isLeaf: true);

  void secondaryColorFormatNV(int size, int type, int stride) => _glSecondaryColorFormatNV(size, type, stride);
  late final _glSecondaryColorFormatNV =
      _lookup<NativeFunction<Void Function(Int, UnsignedInt, Int)>>('glSecondaryColorFormatNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void fogCoordFormatNV(int type, int stride) => _glFogCoordFormatNV(type, stride);
  late final _glFogCoordFormatNV = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glFogCoordFormatNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttribFormatNV(int index, int size, int type, int normalized, int stride) =>
      _glVertexAttribFormatNV(index, size, type, normalized, stride);
  late final _glVertexAttribFormatNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, UnsignedChar, Int)>>('glVertexAttribFormatNV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttribIFormatNV(int index, int size, int type, int stride) =>
      _glVertexAttribIFormatNV(index, size, type, stride);
  late final _glVertexAttribIFormatNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int)>>('glVertexAttribIFormatNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getIntegerui64i_vNV(int value, int index, Pointer<Uint64> result) =>
      _glGetIntegerui64i_vNV(value, index, result);
  late final _glGetIntegerui64i_vNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Uint64>)>>('glGetIntegerui64i_vNV')
          .asFunction<void Function(int, int, Pointer<Uint64>)>(isLeaf: true);

  int areProgramsResidentNV(int n, Pointer<UnsignedInt> programs, Pointer<UnsignedChar> residences) =>
      _glAreProgramsResidentNV(n, programs, residences);
  late final _glAreProgramsResidentNV =
      _lookup<NativeFunction<UnsignedChar Function(Int, Pointer<UnsignedInt>, Pointer<UnsignedChar>)>>(
              'glAreProgramsResidentNV')
          .asFunction<int Function(int, Pointer<UnsignedInt>, Pointer<UnsignedChar>)>(isLeaf: true);

  void bindProgramNV(int target, int id) => _glBindProgramNV(target, id);
  late final _glBindProgramNV = _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glBindProgramNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void deleteProgramsNV(int n, Pointer<UnsignedInt> programs) => _glDeleteProgramsNV(n, programs);
  late final _glDeleteProgramsNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glDeleteProgramsNV')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void executeProgramNV(int target, int id, Pointer<Float> params) => _glExecuteProgramNV(target, id, params);
  late final _glExecuteProgramNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glExecuteProgramNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void genProgramsNV(int n, Pointer<UnsignedInt> programs) => _glGenProgramsNV(n, programs);
  late final _glGenProgramsNV = _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glGenProgramsNV')
      .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void getProgramParameterdvNV(int target, int index, int pname, Pointer<Double> params) =>
      _glGetProgramParameterdvNV(target, index, pname, params);
  late final _glGetProgramParameterdvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Double>)>>(
              'glGetProgramParameterdvNV')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void getProgramParameterfvNV(int target, int index, int pname, Pointer<Float> params) =>
      _glGetProgramParameterfvNV(target, index, pname, params);
  late final _glGetProgramParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetProgramParameterfvNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getProgramivNV(int id, int pname, Pointer<Int> params) => _glGetProgramivNV(id, pname, params);
  late final _glGetProgramivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetProgramivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getProgramStringNV(int id, int pname, Pointer<UnsignedChar> program) =>
      _glGetProgramStringNV(id, pname, program);
  late final _glGetProgramStringNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<UnsignedChar>)>>('glGetProgramStringNV')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void getTrackMatrixivNV(int target, int address, int pname, Pointer<Int> params) =>
      _glGetTrackMatrixivNV(target, address, pname, params);
  late final _glGetTrackMatrixivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetTrackMatrixivNV')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexAttribdvNV(int index, int pname, Pointer<Double> params) =>
      _glGetVertexAttribdvNV(index, pname, params);
  late final _glGetVertexAttribdvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glGetVertexAttribdvNV')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void getVertexAttribfvNV(int index, int pname, Pointer<Float> params) => _glGetVertexAttribfvNV(index, pname, params);
  late final _glGetVertexAttribfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetVertexAttribfvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getVertexAttribivNV(int index, int pname, Pointer<Int> params) => _glGetVertexAttribivNV(index, pname, params);
  late final _glGetVertexAttribivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVertexAttribivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVertexAttribPointervNV(int index, int pname, Pointer<Pointer<Void>> pointer) =>
      _glGetVertexAttribPointervNV(index, pname, pointer);
  late final _glGetVertexAttribPointervNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Pointer<Void>>)>>(
              'glGetVertexAttribPointervNV')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  int isProgramNV(int id) => _glIsProgramNV(id);
  late final _glIsProgramNV = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsProgramNV')
      .asFunction<int Function(int)>(isLeaf: true);

  void loadProgramNV(int target, int id, int len, Pointer<UnsignedChar> program) =>
      _glLoadProgramNV(target, id, len, program);
  late final _glLoadProgramNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<UnsignedChar>)>>('glLoadProgramNV')
          .asFunction<void Function(int, int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void programParameter4dNV(int target, int index, double x, double y, double z, double w) =>
      _glProgramParameter4dNV(target, index, x, y, z, w);
  late final _glProgramParameter4dNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Double, Double, Double, Double)>>(
              'glProgramParameter4dNV')
          .asFunction<void Function(int, int, double, double, double, double)>(isLeaf: true);

  void programParameter4dvNV(int target, int index, Pointer<Double> v) => _glProgramParameter4dvNV(target, index, v);
  late final _glProgramParameter4dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Double>)>>('glProgramParameter4dvNV')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void programParameter4fNV(int target, int index, double x, double y, double z, double w) =>
      _glProgramParameter4fNV(target, index, x, y, z, w);
  late final _glProgramParameter4fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float, Float, Float, Float)>>(
              'glProgramParameter4fNV')
          .asFunction<void Function(int, int, double, double, double, double)>(isLeaf: true);

  void programParameter4fvNV(int target, int index, Pointer<Float> v) => _glProgramParameter4fvNV(target, index, v);
  late final _glProgramParameter4fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glProgramParameter4fvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void programParameters4dvNV(int target, int index, int count, Pointer<Double> v) =>
      _glProgramParameters4dvNV(target, index, count, v);
  late final _glProgramParameters4dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Double>)>>('glProgramParameters4dvNV')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void programParameters4fvNV(int target, int index, int count, Pointer<Float> v) =>
      _glProgramParameters4fvNV(target, index, count, v);
  late final _glProgramParameters4fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>('glProgramParameters4fvNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void requestResidentProgramsNV(int n, Pointer<UnsignedInt> programs) => _glRequestResidentProgramsNV(n, programs);
  late final _glRequestResidentProgramsNV =
      _lookup<NativeFunction<Void Function(Int, Pointer<UnsignedInt>)>>('glRequestResidentProgramsNV')
          .asFunction<void Function(int, Pointer<UnsignedInt>)>(isLeaf: true);

  void trackMatrixNV(int target, int address, int matrix, int transform) =>
      _glTrackMatrixNV(target, address, matrix, transform);
  late final _glTrackMatrixNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>('glTrackMatrixNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttribPointerNV(int index, int fsize, int type, int stride, Pointer<Void> pointer) =>
      _glVertexAttribPointerNV(index, fsize, type, stride, pointer);
  late final _glVertexAttribPointerNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, UnsignedInt, Int, Pointer<Void>)>>(
              'glVertexAttribPointerNV')
          .asFunction<void Function(int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void vertexAttrib1dNV(int index, double x) => _glVertexAttrib1dNV(index, x);
  late final _glVertexAttrib1dNV = _lookup<NativeFunction<Void Function(UnsignedInt, Double)>>('glVertexAttrib1dNV')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void vertexAttrib1dvNV(int index, Pointer<Double> v) => _glVertexAttrib1dvNV(index, v);
  late final _glVertexAttrib1dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib1dvNV')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib1fNV(int index, double x) => _glVertexAttrib1fNV(index, x);
  late final _glVertexAttrib1fNV = _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glVertexAttrib1fNV')
      .asFunction<void Function(int, double)>(isLeaf: true);

  void vertexAttrib1fvNV(int index, Pointer<Float> v) => _glVertexAttrib1fvNV(index, v);
  late final _glVertexAttrib1fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib1fvNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib1sNV(int index, int x) => _glVertexAttrib1sNV(index, x);
  late final _glVertexAttrib1sNV = _lookup<NativeFunction<Void Function(UnsignedInt, Short)>>('glVertexAttrib1sNV')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void vertexAttrib1svNV(int index, Pointer<Short> v) => _glVertexAttrib1svNV(index, v);
  late final _glVertexAttrib1svNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib1svNV')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib2dNV(int index, double x, double y) => _glVertexAttrib2dNV(index, x, y);
  late final _glVertexAttrib2dNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double)>>('glVertexAttrib2dNV')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void vertexAttrib2dvNV(int index, Pointer<Double> v) => _glVertexAttrib2dvNV(index, v);
  late final _glVertexAttrib2dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib2dvNV')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib2fNV(int index, double x, double y) => _glVertexAttrib2fNV(index, x, y);
  late final _glVertexAttrib2fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float)>>('glVertexAttrib2fNV')
          .asFunction<void Function(int, double, double)>(isLeaf: true);

  void vertexAttrib2fvNV(int index, Pointer<Float> v) => _glVertexAttrib2fvNV(index, v);
  late final _glVertexAttrib2fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib2fvNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib2sNV(int index, int x, int y) => _glVertexAttrib2sNV(index, x, y);
  late final _glVertexAttrib2sNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short)>>('glVertexAttrib2sNV')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void vertexAttrib2svNV(int index, Pointer<Short> v) => _glVertexAttrib2svNV(index, v);
  late final _glVertexAttrib2svNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib2svNV')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib3dNV(int index, double x, double y, double z) => _glVertexAttrib3dNV(index, x, y, z);
  late final _glVertexAttrib3dNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double)>>('glVertexAttrib3dNV')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void vertexAttrib3dvNV(int index, Pointer<Double> v) => _glVertexAttrib3dvNV(index, v);
  late final _glVertexAttrib3dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib3dvNV')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib3fNV(int index, double x, double y, double z) => _glVertexAttrib3fNV(index, x, y, z);
  late final _glVertexAttrib3fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float)>>('glVertexAttrib3fNV')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void vertexAttrib3fvNV(int index, Pointer<Float> v) => _glVertexAttrib3fvNV(index, v);
  late final _glVertexAttrib3fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib3fvNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib3sNV(int index, int x, int y, int z) => _glVertexAttrib3sNV(index, x, y, z);
  late final _glVertexAttrib3sNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short)>>('glVertexAttrib3sNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void vertexAttrib3svNV(int index, Pointer<Short> v) => _glVertexAttrib3svNV(index, v);
  late final _glVertexAttrib3svNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib3svNV')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib4dNV(int index, double x, double y, double z, double w) => _glVertexAttrib4dNV(index, x, y, z, w);
  late final _glVertexAttrib4dNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Double, Double, Double, Double)>>('glVertexAttrib4dNV')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void vertexAttrib4dvNV(int index, Pointer<Double> v) => _glVertexAttrib4dvNV(index, v);
  late final _glVertexAttrib4dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Double>)>>('glVertexAttrib4dvNV')
          .asFunction<void Function(int, Pointer<Double>)>(isLeaf: true);

  void vertexAttrib4fNV(int index, double x, double y, double z, double w) => _glVertexAttrib4fNV(index, x, y, z, w);
  late final _glVertexAttrib4fNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float)>>('glVertexAttrib4fNV')
          .asFunction<void Function(int, double, double, double, double)>(isLeaf: true);

  void vertexAttrib4fvNV(int index, Pointer<Float> v) => _glVertexAttrib4fvNV(index, v);
  late final _glVertexAttrib4fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glVertexAttrib4fvNV')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void vertexAttrib4sNV(int index, int x, int y, int z, int w) => _glVertexAttrib4sNV(index, x, y, z, w);
  late final _glVertexAttrib4sNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Short, Short, Short, Short)>>('glVertexAttrib4sNV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttrib4svNV(int index, Pointer<Short> v) => _glVertexAttrib4svNV(index, v);
  late final _glVertexAttrib4svNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Short>)>>('glVertexAttrib4svNV')
          .asFunction<void Function(int, Pointer<Short>)>(isLeaf: true);

  void vertexAttrib4ubNV(int index, int x, int y, int z, int w) => _glVertexAttrib4ubNV(index, x, y, z, w);
  late final _glVertexAttrib4ubNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar)>>(
              'glVertexAttrib4ubNV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void vertexAttrib4ubvNV(int index, Pointer<UnsignedChar> v) => _glVertexAttrib4ubvNV(index, v);
  late final _glVertexAttrib4ubvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<UnsignedChar>)>>('glVertexAttrib4ubvNV')
          .asFunction<void Function(int, Pointer<UnsignedChar>)>(isLeaf: true);

  void vertexAttribs1dvNV(int index, int count, Pointer<Double> v) => _glVertexAttribs1dvNV(index, count, v);
  late final _glVertexAttribs1dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Double>)>>('glVertexAttribs1dvNV')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribs1fvNV(int index, int count, Pointer<Float> v) => _glVertexAttribs1fvNV(index, count, v);
  late final _glVertexAttribs1fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glVertexAttribs1fvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void vertexAttribs1svNV(int index, int count, Pointer<Short> v) => _glVertexAttribs1svNV(index, count, v);
  late final _glVertexAttribs1svNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Short>)>>('glVertexAttribs1svNV')
          .asFunction<void Function(int, int, Pointer<Short>)>(isLeaf: true);

  void vertexAttribs2dvNV(int index, int count, Pointer<Double> v) => _glVertexAttribs2dvNV(index, count, v);
  late final _glVertexAttribs2dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Double>)>>('glVertexAttribs2dvNV')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribs2fvNV(int index, int count, Pointer<Float> v) => _glVertexAttribs2fvNV(index, count, v);
  late final _glVertexAttribs2fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glVertexAttribs2fvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void vertexAttribs2svNV(int index, int count, Pointer<Short> v) => _glVertexAttribs2svNV(index, count, v);
  late final _glVertexAttribs2svNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Short>)>>('glVertexAttribs2svNV')
          .asFunction<void Function(int, int, Pointer<Short>)>(isLeaf: true);

  void vertexAttribs3dvNV(int index, int count, Pointer<Double> v) => _glVertexAttribs3dvNV(index, count, v);
  late final _glVertexAttribs3dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Double>)>>('glVertexAttribs3dvNV')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribs3fvNV(int index, int count, Pointer<Float> v) => _glVertexAttribs3fvNV(index, count, v);
  late final _glVertexAttribs3fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glVertexAttribs3fvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void vertexAttribs3svNV(int index, int count, Pointer<Short> v) => _glVertexAttribs3svNV(index, count, v);
  late final _glVertexAttribs3svNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Short>)>>('glVertexAttribs3svNV')
          .asFunction<void Function(int, int, Pointer<Short>)>(isLeaf: true);

  void vertexAttribs4dvNV(int index, int count, Pointer<Double> v) => _glVertexAttribs4dvNV(index, count, v);
  late final _glVertexAttribs4dvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Double>)>>('glVertexAttribs4dvNV')
          .asFunction<void Function(int, int, Pointer<Double>)>(isLeaf: true);

  void vertexAttribs4fvNV(int index, int count, Pointer<Float> v) => _glVertexAttribs4fvNV(index, count, v);
  late final _glVertexAttribs4fvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glVertexAttribs4fvNV')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void vertexAttribs4svNV(int index, int count, Pointer<Short> v) => _glVertexAttribs4svNV(index, count, v);
  late final _glVertexAttribs4svNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Short>)>>('glVertexAttribs4svNV')
          .asFunction<void Function(int, int, Pointer<Short>)>(isLeaf: true);

  void vertexAttribs4ubvNV(int index, int count, Pointer<UnsignedChar> v) => _glVertexAttribs4ubvNV(index, count, v);
  late final _glVertexAttribs4ubvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<UnsignedChar>)>>('glVertexAttribs4ubvNV')
          .asFunction<void Function(int, int, Pointer<UnsignedChar>)>(isLeaf: true);

  void beginVideoCaptureNV(int video_capture_slot) => _glBeginVideoCaptureNV(video_capture_slot);
  late final _glBeginVideoCaptureNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glBeginVideoCaptureNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void bindVideoCaptureStreamBufferNV(int video_capture_slot, int stream, int frame_region, int offset) =>
      _glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
  late final _glBindVideoCaptureStreamBufferNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Long)>>(
              'glBindVideoCaptureStreamBufferNV')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void bindVideoCaptureStreamTextureNV(int video_capture_slot, int stream, int frame_region, int target, int texture) =>
      _glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
  late final _glBindVideoCaptureStreamTextureNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glBindVideoCaptureStreamTextureNV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void endVideoCaptureNV(int video_capture_slot) => _glEndVideoCaptureNV(video_capture_slot);
  late final _glEndVideoCaptureNV = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glEndVideoCaptureNV')
      .asFunction<void Function(int)>(isLeaf: true);

  void getVideoCaptureivNV(int video_capture_slot, int pname, Pointer<Int> params) =>
      _glGetVideoCaptureivNV(video_capture_slot, pname, params);
  late final _glGetVideoCaptureivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetVideoCaptureivNV')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getVideoCaptureStreamivNV(int video_capture_slot, int stream, int pname, Pointer<Int> params) =>
      _glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
  late final _glGetVideoCaptureStreamivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glGetVideoCaptureStreamivNV')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void getVideoCaptureStreamfvNV(int video_capture_slot, int stream, int pname, Pointer<Float> params) =>
      _glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
  late final _glGetVideoCaptureStreamfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glGetVideoCaptureStreamfvNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void getVideoCaptureStreamdvNV(int video_capture_slot, int stream, int pname, Pointer<Double> params) =>
      _glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
  late final _glGetVideoCaptureStreamdvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Double>)>>(
              'glGetVideoCaptureStreamdvNV')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  int videoCaptureNV(int video_capture_slot, Pointer<UnsignedInt> sequence_num, Pointer<Uint64> capture_time) =>
      _glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
  late final _glVideoCaptureNV =
      _lookup<NativeFunction<UnsignedInt Function(UnsignedInt, Pointer<UnsignedInt>, Pointer<Uint64>)>>(
              'glVideoCaptureNV')
          .asFunction<int Function(int, Pointer<UnsignedInt>, Pointer<Uint64>)>(isLeaf: true);

  void videoCaptureStreamParameterivNV(int video_capture_slot, int stream, int pname, Pointer<Int> params) =>
      _glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
  late final _glVideoCaptureStreamParameterivNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Int>)>>(
              'glVideoCaptureStreamParameterivNV')
          .asFunction<void Function(int, int, int, Pointer<Int>)>(isLeaf: true);

  void videoCaptureStreamParameterfvNV(int video_capture_slot, int stream, int pname, Pointer<Float> params) =>
      _glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
  late final _glVideoCaptureStreamParameterfvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Float>)>>(
              'glVideoCaptureStreamParameterfvNV')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void videoCaptureStreamParameterdvNV(int video_capture_slot, int stream, int pname, Pointer<Double> params) =>
      _glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
  late final _glVideoCaptureStreamParameterdvNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Double>)>>(
              'glVideoCaptureStreamParameterdvNV')
          .asFunction<void Function(int, int, int, Pointer<Double>)>(isLeaf: true);

  void viewportSwizzleNV(int index, int swizzlex, int swizzley, int swizzlez, int swizzlew) =>
      _glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);
  late final _glViewportSwizzleNV =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt, UnsignedInt)>>(
              'glViewportSwizzleNV')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void framebufferTextureMultiviewOVR(
          int target, int attachment, int texture, int level, int baseViewIndex, int numViews) =>
      _glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);
  late final _glFramebufferTextureMultiviewOVR =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Int, Int, Int)>>(
              'glFramebufferTextureMultiviewOVR')
          .asFunction<void Function(int, int, int, int, int, int)>(isLeaf: true);

  void hintPGI(int target, int mode) => _glHintPGI(target, mode);
  late final _glHintPGI = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glHintPGI')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void detailTexFuncSGIS(int target, int n, Pointer<Float> points) => _glDetailTexFuncSGIS(target, n, points);
  late final _glDetailTexFuncSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glDetailTexFuncSGIS')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getDetailTexFuncSGIS(int target, Pointer<Float> points) => _glGetDetailTexFuncSGIS(target, points);
  late final _glGetDetailTexFuncSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glGetDetailTexFuncSGIS')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void fogFuncSGIS(int n, Pointer<Float> points) => _glFogFuncSGIS(n, points);
  late final _glFogFuncSGIS = _lookup<NativeFunction<Void Function(Int, Pointer<Float>)>>('glFogFuncSGIS')
      .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void getFogFuncSGIS(Pointer<Float> points) => _glGetFogFuncSGIS(points);
  late final _glGetFogFuncSGIS = _lookup<NativeFunction<Void Function(Pointer<Float>)>>('glGetFogFuncSGIS')
      .asFunction<void Function(Pointer<Float>)>(isLeaf: true);

  void sampleMaskSGIS(double value, int invert) => _glSampleMaskSGIS(value, invert);
  late final _glSampleMaskSGIS = _lookup<NativeFunction<Void Function(Float, UnsignedChar)>>('glSampleMaskSGIS')
      .asFunction<void Function(double, int)>(isLeaf: true);

  void samplePatternSGIS(int pattern) => _glSamplePatternSGIS(pattern);
  late final _glSamplePatternSGIS = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glSamplePatternSGIS')
      .asFunction<void Function(int)>(isLeaf: true);

  void pixelTexGenParameteriSGIS(int pname, int param) => _glPixelTexGenParameteriSGIS(pname, param);
  late final _glPixelTexGenParameteriSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glPixelTexGenParameteriSGIS')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void pixelTexGenParameterivSGIS(int pname, Pointer<Int> params) => _glPixelTexGenParameterivSGIS(pname, params);
  late final _glPixelTexGenParameterivSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glPixelTexGenParameterivSGIS')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void pixelTexGenParameterfSGIS(int pname, double param) => _glPixelTexGenParameterfSGIS(pname, param);
  late final _glPixelTexGenParameterfSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glPixelTexGenParameterfSGIS')
          .asFunction<void Function(int, double)>(isLeaf: true);

  void pixelTexGenParameterfvSGIS(int pname, Pointer<Float> params) => _glPixelTexGenParameterfvSGIS(pname, params);
  late final _glPixelTexGenParameterfvSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glPixelTexGenParameterfvSGIS')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void getPixelTexGenParameterivSGIS(int pname, Pointer<Int> params) => _glGetPixelTexGenParameterivSGIS(pname, params);
  late final _glGetPixelTexGenParameterivSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glGetPixelTexGenParameterivSGIS')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void getPixelTexGenParameterfvSGIS(int pname, Pointer<Float> params) =>
      _glGetPixelTexGenParameterfvSGIS(pname, params);
  late final _glGetPixelTexGenParameterfvSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glGetPixelTexGenParameterfvSGIS')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void pointParameterfSGIS(int pname, double param) => _glPointParameterfSGIS(pname, param);
  late final _glPointParameterfSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glPointParameterfSGIS')
          .asFunction<void Function(int, double)>(isLeaf: true);

  void pointParameterfvSGIS(int pname, Pointer<Float> params) => _glPointParameterfvSGIS(pname, params);
  late final _glPointParameterfvSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glPointParameterfvSGIS')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void sharpenTexFuncSGIS(int target, int n, Pointer<Float> points) => _glSharpenTexFuncSGIS(target, n, points);
  late final _glSharpenTexFuncSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Float>)>>('glSharpenTexFuncSGIS')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getSharpenTexFuncSGIS(int target, Pointer<Float> points) => _glGetSharpenTexFuncSGIS(target, points);
  late final _glGetSharpenTexFuncSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glGetSharpenTexFuncSGIS')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void texImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d,
          int border, int format, int type, Pointer<Void> pixels) =>
      _glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
  late final _glTexImage4DSGIS = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, UnsignedInt, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTexImage4DSGIS')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void texSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width,
          int height, int depth, int size4d, int format, int type, Pointer<Void> pixels) =>
      _glTexSubImage4DSGIS(
          target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
  late final _glTexSubImage4DSGIS = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Int, Int, Int, Int, Int, Int, Int, Int, Int, UnsignedInt, UnsignedInt,
                  Pointer<Void>)>>('glTexSubImage4DSGIS')
      .asFunction<void Function(int, int, int, int, int, int, int, int, int, int, int, int, Pointer<Void>)>(
          isLeaf: true);

  void textureColorMaskSGIS(int red, int green, int blue, int alpha) =>
      _glTextureColorMaskSGIS(red, green, blue, alpha);
  late final _glTextureColorMaskSGIS =
      _lookup<NativeFunction<Void Function(UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar)>>(
              'glTextureColorMaskSGIS')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void getTexFilterFuncSGIS(int target, int filter, Pointer<Float> weights) =>
      _glGetTexFilterFuncSGIS(target, filter, weights);
  late final _glGetTexFilterFuncSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetTexFilterFuncSGIS')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void texFilterFuncSGIS(int target, int filter, int n, Pointer<Float> weights) =>
      _glTexFilterFuncSGIS(target, filter, n, weights);
  late final _glTexFilterFuncSGIS =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Pointer<Float>)>>('glTexFilterFuncSGIS')
          .asFunction<void Function(int, int, int, Pointer<Float>)>(isLeaf: true);

  void asyncMarkerSGIX(int marker) => _glAsyncMarkerSGIX(marker);
  late final _glAsyncMarkerSGIX = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glAsyncMarkerSGIX')
      .asFunction<void Function(int)>(isLeaf: true);

  int finishAsyncSGIX(Pointer<UnsignedInt> markerp) => _glFinishAsyncSGIX(markerp);
  late final _glFinishAsyncSGIX = _lookup<NativeFunction<Int Function(Pointer<UnsignedInt>)>>('glFinishAsyncSGIX')
      .asFunction<int Function(Pointer<UnsignedInt>)>(isLeaf: true);

  int pollAsyncSGIX(Pointer<UnsignedInt> markerp) => _glPollAsyncSGIX(markerp);
  late final _glPollAsyncSGIX = _lookup<NativeFunction<Int Function(Pointer<UnsignedInt>)>>('glPollAsyncSGIX')
      .asFunction<int Function(Pointer<UnsignedInt>)>(isLeaf: true);

  int genAsyncMarkersSGIX(int range) => _glGenAsyncMarkersSGIX(range);
  late final _glGenAsyncMarkersSGIX = _lookup<NativeFunction<UnsignedInt Function(Int)>>('glGenAsyncMarkersSGIX')
      .asFunction<int Function(int)>(isLeaf: true);

  void deleteAsyncMarkersSGIX(int marker, int range) => _glDeleteAsyncMarkersSGIX(marker, range);
  late final _glDeleteAsyncMarkersSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glDeleteAsyncMarkersSGIX')
          .asFunction<void Function(int, int)>(isLeaf: true);

  int isAsyncMarkerSGIX(int marker) => _glIsAsyncMarkerSGIX(marker);
  late final _glIsAsyncMarkerSGIX = _lookup<NativeFunction<UnsignedChar Function(UnsignedInt)>>('glIsAsyncMarkerSGIX')
      .asFunction<int Function(int)>(isLeaf: true);

  void flushRasterSGIX() => _glFlushRasterSGIX();
  late final _glFlushRasterSGIX =
      _lookup<NativeFunction<Void Function()>>('glFlushRasterSGIX').asFunction<void Function()>(isLeaf: true);

  void fragmentColorMaterialSGIX(int face, int mode) => _glFragmentColorMaterialSGIX(face, mode);
  late final _glFragmentColorMaterialSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt)>>('glFragmentColorMaterialSGIX')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void fragmentLightfSGIX(int light, int pname, double param) => _glFragmentLightfSGIX(light, pname, param);
  late final _glFragmentLightfSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glFragmentLightfSGIX')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void fragmentLightfvSGIX(int light, int pname, Pointer<Float> params) => _glFragmentLightfvSGIX(light, pname, params);
  late final _glFragmentLightfvSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glFragmentLightfvSGIX')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void fragmentLightiSGIX(int light, int pname, int param) => _glFragmentLightiSGIX(light, pname, param);
  late final _glFragmentLightiSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glFragmentLightiSGIX')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void fragmentLightivSGIX(int light, int pname, Pointer<Int> params) => _glFragmentLightivSGIX(light, pname, params);
  late final _glFragmentLightivSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glFragmentLightivSGIX')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void fragmentLightModelfSGIX(int pname, double param) => _glFragmentLightModelfSGIX(pname, param);
  late final _glFragmentLightModelfSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glFragmentLightModelfSGIX')
          .asFunction<void Function(int, double)>(isLeaf: true);

  void fragmentLightModelfvSGIX(int pname, Pointer<Float> params) => _glFragmentLightModelfvSGIX(pname, params);
  late final _glFragmentLightModelfvSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glFragmentLightModelfvSGIX')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void fragmentLightModeliSGIX(int pname, int param) => _glFragmentLightModeliSGIX(pname, param);
  late final _glFragmentLightModeliSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glFragmentLightModeliSGIX')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void fragmentLightModelivSGIX(int pname, Pointer<Int> params) => _glFragmentLightModelivSGIX(pname, params);
  late final _glFragmentLightModelivSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glFragmentLightModelivSGIX')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void fragmentMaterialfSGIX(int face, int pname, double param) => _glFragmentMaterialfSGIX(face, pname, param);
  late final _glFragmentMaterialfSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glFragmentMaterialfSGIX')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void fragmentMaterialfvSGIX(int face, int pname, Pointer<Float> params) =>
      _glFragmentMaterialfvSGIX(face, pname, params);
  late final _glFragmentMaterialfvSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glFragmentMaterialfvSGIX')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void fragmentMaterialiSGIX(int face, int pname, int param) => _glFragmentMaterialiSGIX(face, pname, param);
  late final _glFragmentMaterialiSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glFragmentMaterialiSGIX')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void fragmentMaterialivSGIX(int face, int pname, Pointer<Int> params) =>
      _glFragmentMaterialivSGIX(face, pname, params);
  late final _glFragmentMaterialivSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glFragmentMaterialivSGIX')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getFragmentLightfvSGIX(int light, int pname, Pointer<Float> params) =>
      _glGetFragmentLightfvSGIX(light, pname, params);
  late final _glGetFragmentLightfvSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetFragmentLightfvSGIX')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getFragmentLightivSGIX(int light, int pname, Pointer<Int> params) =>
      _glGetFragmentLightivSGIX(light, pname, params);
  late final _glGetFragmentLightivSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetFragmentLightivSGIX')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void getFragmentMaterialfvSGIX(int face, int pname, Pointer<Float> params) =>
      _glGetFragmentMaterialfvSGIX(face, pname, params);
  late final _glGetFragmentMaterialfvSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetFragmentMaterialfvSGIX')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getFragmentMaterialivSGIX(int face, int pname, Pointer<Int> params) =>
      _glGetFragmentMaterialivSGIX(face, pname, params);
  late final _glGetFragmentMaterialivSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetFragmentMaterialivSGIX')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void lightEnviSGIX(int pname, int param) => _glLightEnviSGIX(pname, param);
  late final _glLightEnviSGIX = _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glLightEnviSGIX')
      .asFunction<void Function(int, int)>(isLeaf: true);

  void frameZoomSGIX(int factor) => _glFrameZoomSGIX(factor);
  late final _glFrameZoomSGIX =
      _lookup<NativeFunction<Void Function(Int)>>('glFrameZoomSGIX').asFunction<void Function(int)>(isLeaf: true);

  void iglooInterfaceSGIX(int pname, Pointer<Void> params) => _glIglooInterfaceSGIX(pname, params);
  late final _glIglooInterfaceSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Void>)>>('glIglooInterfaceSGIX')
          .asFunction<void Function(int, Pointer<Void>)>(isLeaf: true);

  int getInstrumentsSGIX() => _glGetInstrumentsSGIX();
  late final _glGetInstrumentsSGIX =
      _lookup<NativeFunction<Int Function()>>('glGetInstrumentsSGIX').asFunction<int Function()>(isLeaf: true);

  void instrumentsBufferSGIX(int size, Pointer<Int> buffer) => _glInstrumentsBufferSGIX(size, buffer);
  late final _glInstrumentsBufferSGIX =
      _lookup<NativeFunction<Void Function(Int, Pointer<Int>)>>('glInstrumentsBufferSGIX')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  int pollInstrumentsSGIX(Pointer<Int> marker_p) => _glPollInstrumentsSGIX(marker_p);
  late final _glPollInstrumentsSGIX = _lookup<NativeFunction<Int Function(Pointer<Int>)>>('glPollInstrumentsSGIX')
      .asFunction<int Function(Pointer<Int>)>(isLeaf: true);

  void readInstrumentsSGIX(int marker) => _glReadInstrumentsSGIX(marker);
  late final _glReadInstrumentsSGIX =
      _lookup<NativeFunction<Void Function(Int)>>('glReadInstrumentsSGIX').asFunction<void Function(int)>(isLeaf: true);

  void startInstrumentsSGIX() => _glStartInstrumentsSGIX();
  late final _glStartInstrumentsSGIX =
      _lookup<NativeFunction<Void Function()>>('glStartInstrumentsSGIX').asFunction<void Function()>(isLeaf: true);

  void stopInstrumentsSGIX(int marker) => _glStopInstrumentsSGIX(marker);
  late final _glStopInstrumentsSGIX =
      _lookup<NativeFunction<Void Function(Int)>>('glStopInstrumentsSGIX').asFunction<void Function(int)>(isLeaf: true);

  void getListParameterfvSGIX(int list, int pname, Pointer<Float> params) =>
      _glGetListParameterfvSGIX(list, pname, params);
  late final _glGetListParameterfvSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetListParameterfvSGIX')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getListParameterivSGIX(int list, int pname, Pointer<Int> params) =>
      _glGetListParameterivSGIX(list, pname, params);
  late final _glGetListParameterivSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetListParameterivSGIX')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void listParameterfSGIX(int list, int pname, double param) => _glListParameterfSGIX(list, pname, param);
  late final _glListParameterfSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Float)>>('glListParameterfSGIX')
          .asFunction<void Function(int, int, double)>(isLeaf: true);

  void listParameterfvSGIX(int list, int pname, Pointer<Float> params) => _glListParameterfvSGIX(list, pname, params);
  late final _glListParameterfvSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glListParameterfvSGIX')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void listParameteriSGIX(int list, int pname, int param) => _glListParameteriSGIX(list, pname, param);
  late final _glListParameteriSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int)>>('glListParameteriSGIX')
          .asFunction<void Function(int, int, int)>(isLeaf: true);

  void listParameterivSGIX(int list, int pname, Pointer<Int> params) => _glListParameterivSGIX(list, pname, params);
  late final _glListParameterivSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glListParameterivSGIX')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void pixelTexGenSGIX(int mode) => _glPixelTexGenSGIX(mode);
  late final _glPixelTexGenSGIX = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glPixelTexGenSGIX')
      .asFunction<void Function(int)>(isLeaf: true);

  void deformationMap3dSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2,
          int vstride, int vorder, double w1, double w2, int wstride, int worder, Pointer<Double> points) =>
      _glDeformationMap3dSGIX(
          target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  late final _glDeformationMap3dSGIX = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Double, Double, Int, Int, Double, Double, Int, Int, Double, Double, Int, Int,
                  Pointer<Double>)>>('glDeformationMap3dSGIX')
      .asFunction<
          void Function(
              int, double, double, int, int, double, double, int, int, double, double, int, int, Pointer<Double>)>();

  void deformationMap3fSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2,
          int vstride, int vorder, double w1, double w2, int wstride, int worder, Pointer<Float> points) =>
      _glDeformationMap3fSGIX(
          target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  late final _glDeformationMap3fSGIX = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Float, Float, Int, Int, Float, Float, Int, Int, Float, Float, Int, Int,
                  Pointer<Float>)>>('glDeformationMap3fSGIX')
      .asFunction<
          void Function(
              int, double, double, int, int, double, double, int, int, double, double, int, int, Pointer<Float>)>();

  void deformSGIX(int mask) => _glDeformSGIX(mask);
  late final _glDeformSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glDeformSGIX').asFunction<void Function(int)>(isLeaf: true);

  void loadIdentityDeformationMapSGIX(int mask) => _glLoadIdentityDeformationMapSGIX(mask);
  late final _glLoadIdentityDeformationMapSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt)>>('glLoadIdentityDeformationMapSGIX')
          .asFunction<void Function(int)>(isLeaf: true);

  void referencePlaneSGIX(Pointer<Double> equation) => _glReferencePlaneSGIX(equation);
  late final _glReferencePlaneSGIX = _lookup<NativeFunction<Void Function(Pointer<Double>)>>('glReferencePlaneSGIX')
      .asFunction<void Function(Pointer<Double>)>(isLeaf: true);

  void spriteParameterfSGIX(int pname, double param) => _glSpriteParameterfSGIX(pname, param);
  late final _glSpriteParameterfSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float)>>('glSpriteParameterfSGIX')
          .asFunction<void Function(int, double)>(isLeaf: true);

  void spriteParameterfvSGIX(int pname, Pointer<Float> params) => _glSpriteParameterfvSGIX(pname, params);
  late final _glSpriteParameterfvSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Float>)>>('glSpriteParameterfvSGIX')
          .asFunction<void Function(int, Pointer<Float>)>(isLeaf: true);

  void spriteParameteriSGIX(int pname, int param) => _glSpriteParameteriSGIX(pname, param);
  late final _glSpriteParameteriSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int)>>('glSpriteParameteriSGIX')
          .asFunction<void Function(int, int)>(isLeaf: true);

  void spriteParameterivSGIX(int pname, Pointer<Int> params) => _glSpriteParameterivSGIX(pname, params);
  late final _glSpriteParameterivSGIX =
      _lookup<NativeFunction<Void Function(UnsignedInt, Pointer<Int>)>>('glSpriteParameterivSGIX')
          .asFunction<void Function(int, Pointer<Int>)>(isLeaf: true);

  void tagSampleBufferSGIX() => _glTagSampleBufferSGIX();
  late final _glTagSampleBufferSGIX =
      _lookup<NativeFunction<Void Function()>>('glTagSampleBufferSGIX').asFunction<void Function()>(isLeaf: true);

  void colorTableSGI(int target, int internalformat, int width, int format, int type, Pointer<Void> table) =>
      _glColorTableSGI(target, internalformat, width, format, type, table);
  late final _glColorTableSGI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, UnsignedInt, UnsignedInt, Pointer<Void>)>>(
              'glColorTableSGI')
          .asFunction<void Function(int, int, int, int, int, Pointer<Void>)>(isLeaf: true);

  void colorTableParameterfvSGI(int target, int pname, Pointer<Float> params) =>
      _glColorTableParameterfvSGI(target, pname, params);
  late final _glColorTableParameterfvSGI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glColorTableParameterfvSGI')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void colorTableParameterivSGI(int target, int pname, Pointer<Int> params) =>
      _glColorTableParameterivSGI(target, pname, params);
  late final _glColorTableParameterivSGI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glColorTableParameterivSGI')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void copyColorTableSGI(int target, int internalformat, int x, int y, int width) =>
      _glCopyColorTableSGI(target, internalformat, x, y, width);
  late final _glCopyColorTableSGI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Int, Int, Int)>>('glCopyColorTableSGI')
          .asFunction<void Function(int, int, int, int, int)>(isLeaf: true);

  void getColorTableSGI(int target, int format, int type, Pointer<Void> table) =>
      _glGetColorTableSGI(target, format, type, table);
  late final _glGetColorTableSGI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, UnsignedInt, Pointer<Void>)>>('glGetColorTableSGI')
          .asFunction<void Function(int, int, int, Pointer<Void>)>(isLeaf: true);

  void getColorTableParameterfvSGI(int target, int pname, Pointer<Float> params) =>
      _glGetColorTableParameterfvSGI(target, pname, params);
  late final _glGetColorTableParameterfvSGI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Float>)>>('glGetColorTableParameterfvSGI')
          .asFunction<void Function(int, int, Pointer<Float>)>(isLeaf: true);

  void getColorTableParameterivSGI(int target, int pname, Pointer<Int> params) =>
      _glGetColorTableParameterivSGI(target, pname, params);
  late final _glGetColorTableParameterivSGI =
      _lookup<NativeFunction<Void Function(UnsignedInt, UnsignedInt, Pointer<Int>)>>('glGetColorTableParameterivSGI')
          .asFunction<void Function(int, int, Pointer<Int>)>(isLeaf: true);

  void finishTextureSUNX() => _glFinishTextureSUNX();
  late final _glFinishTextureSUNX =
      _lookup<NativeFunction<Void Function()>>('glFinishTextureSUNX').asFunction<void Function()>(isLeaf: true);

  void globalAlphaFactorbSUN(int factor) => _glGlobalAlphaFactorbSUN(factor);
  late final _glGlobalAlphaFactorbSUN = _lookup<NativeFunction<Void Function(SignedChar)>>('glGlobalAlphaFactorbSUN')
      .asFunction<void Function(int)>(isLeaf: true);

  void globalAlphaFactorsSUN(int factor) => _glGlobalAlphaFactorsSUN(factor);
  late final _glGlobalAlphaFactorsSUN = _lookup<NativeFunction<Void Function(Short)>>('glGlobalAlphaFactorsSUN')
      .asFunction<void Function(int)>(isLeaf: true);

  void globalAlphaFactoriSUN(int factor) => _glGlobalAlphaFactoriSUN(factor);
  late final _glGlobalAlphaFactoriSUN = _lookup<NativeFunction<Void Function(Int)>>('glGlobalAlphaFactoriSUN')
      .asFunction<void Function(int)>(isLeaf: true);

  void globalAlphaFactorfSUN(double factor) => _glGlobalAlphaFactorfSUN(factor);
  late final _glGlobalAlphaFactorfSUN = _lookup<NativeFunction<Void Function(Float)>>('glGlobalAlphaFactorfSUN')
      .asFunction<void Function(double)>(isLeaf: true);

  void globalAlphaFactordSUN(double factor) => _glGlobalAlphaFactordSUN(factor);
  late final _glGlobalAlphaFactordSUN = _lookup<NativeFunction<Void Function(Double)>>('glGlobalAlphaFactordSUN')
      .asFunction<void Function(double)>(isLeaf: true);

  void globalAlphaFactorubSUN(int factor) => _glGlobalAlphaFactorubSUN(factor);
  late final _glGlobalAlphaFactorubSUN =
      _lookup<NativeFunction<Void Function(UnsignedChar)>>('glGlobalAlphaFactorubSUN')
          .asFunction<void Function(int)>(isLeaf: true);

  void globalAlphaFactorusSUN(int factor) => _glGlobalAlphaFactorusSUN(factor);
  late final _glGlobalAlphaFactorusSUN =
      _lookup<NativeFunction<Void Function(UnsignedShort)>>('glGlobalAlphaFactorusSUN')
          .asFunction<void Function(int)>(isLeaf: true);

  void globalAlphaFactoruiSUN(int factor) => _glGlobalAlphaFactoruiSUN(factor);
  late final _glGlobalAlphaFactoruiSUN = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glGlobalAlphaFactoruiSUN')
      .asFunction<void Function(int)>(isLeaf: true);

  void drawMeshArraysSUN(int mode, int first, int count, int width) => _glDrawMeshArraysSUN(mode, first, count, width);
  late final _glDrawMeshArraysSUN =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Int, Int)>>('glDrawMeshArraysSUN')
          .asFunction<void Function(int, int, int, int)>(isLeaf: true);

  void replacementCodeuiSUN(int code) => _glReplacementCodeuiSUN(code);
  late final _glReplacementCodeuiSUN = _lookup<NativeFunction<Void Function(UnsignedInt)>>('glReplacementCodeuiSUN')
      .asFunction<void Function(int)>(isLeaf: true);

  void replacementCodeusSUN(int code) => _glReplacementCodeusSUN(code);
  late final _glReplacementCodeusSUN = _lookup<NativeFunction<Void Function(UnsignedShort)>>('glReplacementCodeusSUN')
      .asFunction<void Function(int)>(isLeaf: true);

  void replacementCodeubSUN(int code) => _glReplacementCodeubSUN(code);
  late final _glReplacementCodeubSUN = _lookup<NativeFunction<Void Function(UnsignedChar)>>('glReplacementCodeubSUN')
      .asFunction<void Function(int)>(isLeaf: true);

  void replacementCodeuivSUN(Pointer<UnsignedInt> code) => _glReplacementCodeuivSUN(code);
  late final _glReplacementCodeuivSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>)>>('glReplacementCodeuivSUN')
          .asFunction<void Function(Pointer<UnsignedInt>)>(isLeaf: true);

  void replacementCodeusvSUN(Pointer<UnsignedShort> code) => _glReplacementCodeusvSUN(code);
  late final _glReplacementCodeusvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedShort>)>>('glReplacementCodeusvSUN')
          .asFunction<void Function(Pointer<UnsignedShort>)>(isLeaf: true);

  void replacementCodeubvSUN(Pointer<UnsignedChar> code) => _glReplacementCodeubvSUN(code);
  late final _glReplacementCodeubvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>)>>('glReplacementCodeubvSUN')
          .asFunction<void Function(Pointer<UnsignedChar>)>(isLeaf: true);

  void replacementCodePointerSUN(int type, int stride, Pointer<Pointer<Void>> pointer) =>
      _glReplacementCodePointerSUN(type, stride, pointer);
  late final _glReplacementCodePointerSUN =
      _lookup<NativeFunction<Void Function(UnsignedInt, Int, Pointer<Pointer<Void>>)>>('glReplacementCodePointerSUN')
          .asFunction<void Function(int, int, Pointer<Pointer<Void>>)>(isLeaf: true);

  void color4ubVertex2fSUN(int r, int g, int b, int a, double x, double y) => _glColor4ubVertex2fSUN(r, g, b, a, x, y);
  late final _glColor4ubVertex2fSUN =
      _lookup<NativeFunction<Void Function(UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar, Float, Float)>>(
              'glColor4ubVertex2fSUN')
          .asFunction<void Function(int, int, int, int, double, double)>(isLeaf: true);

  void color4ubVertex2fvSUN(Pointer<UnsignedChar> c, Pointer<Float> v) => _glColor4ubVertex2fvSUN(c, v);
  late final _glColor4ubVertex2fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>, Pointer<Float>)>>('glColor4ubVertex2fvSUN')
          .asFunction<void Function(Pointer<UnsignedChar>, Pointer<Float>)>(isLeaf: true);

  void color4ubVertex3fSUN(int r, int g, int b, int a, double x, double y, double z) =>
      _glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
  late final _glColor4ubVertex3fSUN = _lookup<
          NativeFunction<
              Void Function(UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar, Float, Float,
                  Float)>>('glColor4ubVertex3fSUN')
      .asFunction<void Function(int, int, int, int, double, double, double)>(isLeaf: true);

  void color4ubVertex3fvSUN(Pointer<UnsignedChar> c, Pointer<Float> v) => _glColor4ubVertex3fvSUN(c, v);
  late final _glColor4ubVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedChar>, Pointer<Float>)>>('glColor4ubVertex3fvSUN')
          .asFunction<void Function(Pointer<UnsignedChar>, Pointer<Float>)>(isLeaf: true);

  void color3fVertex3fSUN(double r, double g, double b, double x, double y, double z) =>
      _glColor3fVertex3fSUN(r, g, b, x, y, z);
  late final _glColor3fVertex3fSUN =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float, Float, Float)>>('glColor3fVertex3fSUN')
          .asFunction<void Function(double, double, double, double, double, double)>(isLeaf: true);

  void color3fVertex3fvSUN(Pointer<Float> c, Pointer<Float> v) => _glColor3fVertex3fvSUN(c, v);
  late final _glColor3fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<Float>)>>('glColor3fVertex3fvSUN')
          .asFunction<void Function(Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void normal3fVertex3fSUN(double nx, double ny, double nz, double x, double y, double z) =>
      _glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
  late final _glNormal3fVertex3fSUN =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float, Float, Float)>>('glNormal3fVertex3fSUN')
          .asFunction<void Function(double, double, double, double, double, double)>(isLeaf: true);

  void normal3fVertex3fvSUN(Pointer<Float> n, Pointer<Float> v) => _glNormal3fVertex3fvSUN(n, v);
  late final _glNormal3fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<Float>)>>('glNormal3fVertex3fvSUN')
          .asFunction<void Function(Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void color4fNormal3fVertex3fSUN(
          double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z) =>
      _glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
  late final _glColor4fNormal3fVertex3fSUN =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float, Float, Float, Float, Float, Float, Float)>>(
              'glColor4fNormal3fVertex3fSUN')
          .asFunction<void Function(double, double, double, double, double, double, double, double, double, double)>(
              isLeaf: true);

  void color4fNormal3fVertex3fvSUN(Pointer<Float> c, Pointer<Float> n, Pointer<Float> v) =>
      _glColor4fNormal3fVertex3fvSUN(c, n, v);
  late final _glColor4fNormal3fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<Float>, Pointer<Float>)>>(
              'glColor4fNormal3fVertex3fvSUN')
          .asFunction<void Function(Pointer<Float>, Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void texCoord2fVertex3fSUN(double s, double t, double x, double y, double z) =>
      _glTexCoord2fVertex3fSUN(s, t, x, y, z);
  late final _glTexCoord2fVertex3fSUN =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float, Float)>>('glTexCoord2fVertex3fSUN')
          .asFunction<void Function(double, double, double, double, double)>(isLeaf: true);

  void texCoord2fVertex3fvSUN(Pointer<Float> tc, Pointer<Float> v) => _glTexCoord2fVertex3fvSUN(tc, v);
  late final _glTexCoord2fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<Float>)>>('glTexCoord2fVertex3fvSUN')
          .asFunction<void Function(Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void texCoord4fVertex4fSUN(double s, double t, double p, double q, double x, double y, double z, double w) =>
      _glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
  late final _glTexCoord4fVertex4fSUN =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float, Float, Float, Float, Float)>>(
              'glTexCoord4fVertex4fSUN')
          .asFunction<void Function(double, double, double, double, double, double, double, double)>(isLeaf: true);

  void texCoord4fVertex4fvSUN(Pointer<Float> tc, Pointer<Float> v) => _glTexCoord4fVertex4fvSUN(tc, v);
  late final _glTexCoord4fVertex4fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<Float>)>>('glTexCoord4fVertex4fvSUN')
          .asFunction<void Function(Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void texCoord2fColor4ubVertex3fSUN(double s, double t, int r, int g, int b, int a, double x, double y, double z) =>
      _glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
  late final _glTexCoord2fColor4ubVertex3fSUN = _lookup<
          NativeFunction<
              Void Function(Float, Float, UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar, Float, Float,
                  Float)>>('glTexCoord2fColor4ubVertex3fSUN')
      .asFunction<void Function(double, double, int, int, int, int, double, double, double)>(isLeaf: true);

  void texCoord2fColor4ubVertex3fvSUN(Pointer<Float> tc, Pointer<UnsignedChar> c, Pointer<Float> v) =>
      _glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
  late final _glTexCoord2fColor4ubVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<UnsignedChar>, Pointer<Float>)>>(
              'glTexCoord2fColor4ubVertex3fvSUN')
          .asFunction<void Function(Pointer<Float>, Pointer<UnsignedChar>, Pointer<Float>)>(isLeaf: true);

  void texCoord2fColor3fVertex3fSUN(double s, double t, double r, double g, double b, double x, double y, double z) =>
      _glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
  late final _glTexCoord2fColor3fVertex3fSUN =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float, Float, Float, Float, Float)>>(
              'glTexCoord2fColor3fVertex3fSUN')
          .asFunction<void Function(double, double, double, double, double, double, double, double)>(isLeaf: true);

  void texCoord2fColor3fVertex3fvSUN(Pointer<Float> tc, Pointer<Float> c, Pointer<Float> v) =>
      _glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
  late final _glTexCoord2fColor3fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<Float>, Pointer<Float>)>>(
              'glTexCoord2fColor3fVertex3fvSUN')
          .asFunction<void Function(Pointer<Float>, Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void texCoord2fNormal3fVertex3fSUN(
          double s, double t, double nx, double ny, double nz, double x, double y, double z) =>
      _glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
  late final _glTexCoord2fNormal3fVertex3fSUN =
      _lookup<NativeFunction<Void Function(Float, Float, Float, Float, Float, Float, Float, Float)>>(
              'glTexCoord2fNormal3fVertex3fSUN')
          .asFunction<void Function(double, double, double, double, double, double, double, double)>(isLeaf: true);

  void texCoord2fNormal3fVertex3fvSUN(Pointer<Float> tc, Pointer<Float> n, Pointer<Float> v) =>
      _glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
  late final _glTexCoord2fNormal3fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<Float>, Pointer<Float>)>>(
              'glTexCoord2fNormal3fVertex3fvSUN')
          .asFunction<void Function(Pointer<Float>, Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void texCoord2fColor4fNormal3fVertex3fSUN(double s, double t, double r, double g, double b, double a, double nx,
          double ny, double nz, double x, double y, double z) =>
      _glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
  late final _glTexCoord2fColor4fNormal3fVertex3fSUN = _lookup<
          NativeFunction<
              Void Function(Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float,
                  Float)>>('glTexCoord2fColor4fNormal3fVertex3fSUN')
      .asFunction<
          void Function(
              double, double, double, double, double, double, double, double, double, double, double, double)>();

  void texCoord2fColor4fNormal3fVertex3fvSUN(Pointer<Float> tc, Pointer<Float> c, Pointer<Float> n, Pointer<Float> v) =>
      _glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
  late final _glTexCoord2fColor4fNormal3fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<Float>, Pointer<Float>, Pointer<Float>)>>(
              'glTexCoord2fColor4fNormal3fVertex3fvSUN')
          .asFunction<void Function(Pointer<Float>, Pointer<Float>, Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void texCoord4fColor4fNormal3fVertex4fSUN(double s, double t, double p, double q, double r, double g, double b,
          double a, double nx, double ny, double nz, double x, double y, double z, double w) =>
      _glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
  late final _glTexCoord4fColor4fNormal3fVertex4fSUN = _lookup<
          NativeFunction<
              Void Function(Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float,
                  Float, Float)>>('glTexCoord4fColor4fNormal3fVertex4fSUN')
      .asFunction<
          void Function(double, double, double, double, double, double, double, double, double, double, double, double,
              double, double, double)>();

  void texCoord4fColor4fNormal3fVertex4fvSUN(Pointer<Float> tc, Pointer<Float> c, Pointer<Float> n, Pointer<Float> v) =>
      _glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
  late final _glTexCoord4fColor4fNormal3fVertex4fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<Float>, Pointer<Float>, Pointer<Float>, Pointer<Float>)>>(
              'glTexCoord4fColor4fNormal3fVertex4fvSUN')
          .asFunction<void Function(Pointer<Float>, Pointer<Float>, Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void replacementCodeuiVertex3fSUN(int rc, double x, double y, double z) =>
      _glReplacementCodeuiVertex3fSUN(rc, x, y, z);
  late final _glReplacementCodeuiVertex3fSUN =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float)>>('glReplacementCodeuiVertex3fSUN')
          .asFunction<void Function(int, double, double, double)>(isLeaf: true);

  void replacementCodeuiVertex3fvSUN(Pointer<UnsignedInt> rc, Pointer<Float> v) =>
      _glReplacementCodeuiVertex3fvSUN(rc, v);
  late final _glReplacementCodeuiVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>, Pointer<Float>)>>('glReplacementCodeuiVertex3fvSUN')
          .asFunction<void Function(Pointer<UnsignedInt>, Pointer<Float>)>(isLeaf: true);

  void replacementCodeuiColor4ubVertex3fSUN(int rc, int r, int g, int b, int a, double x, double y, double z) =>
      _glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
  late final _glReplacementCodeuiColor4ubVertex3fSUN = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, UnsignedChar, UnsignedChar, UnsignedChar, UnsignedChar, Float, Float,
                  Float)>>('glReplacementCodeuiColor4ubVertex3fSUN')
      .asFunction<void Function(int, int, int, int, int, double, double, double)>(isLeaf: true);

  void replacementCodeuiColor4ubVertex3fvSUN(Pointer<UnsignedInt> rc, Pointer<UnsignedChar> c, Pointer<Float> v) =>
      _glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
  late final _glReplacementCodeuiColor4ubVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>, Pointer<UnsignedChar>, Pointer<Float>)>>(
              'glReplacementCodeuiColor4ubVertex3fvSUN')
          .asFunction<void Function(Pointer<UnsignedInt>, Pointer<UnsignedChar>, Pointer<Float>)>(isLeaf: true);

  void replacementCodeuiColor3fVertex3fSUN(int rc, double r, double g, double b, double x, double y, double z) =>
      _glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
  late final _glReplacementCodeuiColor3fVertex3fSUN =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float, Float, Float)>>(
              'glReplacementCodeuiColor3fVertex3fSUN')
          .asFunction<void Function(int, double, double, double, double, double, double)>(isLeaf: true);

  void replacementCodeuiColor3fVertex3fvSUN(Pointer<UnsignedInt> rc, Pointer<Float> c, Pointer<Float> v) =>
      _glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
  late final _glReplacementCodeuiColor3fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>)>>(
              'glReplacementCodeuiColor3fVertex3fvSUN')
          .asFunction<void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void replacementCodeuiNormal3fVertex3fSUN(int rc, double nx, double ny, double nz, double x, double y, double z) =>
      _glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
  late final _glReplacementCodeuiNormal3fVertex3fSUN =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float, Float, Float)>>(
              'glReplacementCodeuiNormal3fVertex3fSUN')
          .asFunction<void Function(int, double, double, double, double, double, double)>(isLeaf: true);

  void replacementCodeuiNormal3fVertex3fvSUN(Pointer<UnsignedInt> rc, Pointer<Float> n, Pointer<Float> v) =>
      _glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
  late final _glReplacementCodeuiNormal3fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>)>>(
              'glReplacementCodeuiNormal3fVertex3fvSUN')
          .asFunction<void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void replacementCodeuiColor4fNormal3fVertex3fSUN(int rc, double r, double g, double b, double a, double nx, double ny,
          double nz, double x, double y, double z) =>
      _glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
  late final _glReplacementCodeuiColor4fNormal3fVertex3fSUN = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Float, Float, Float, Float, Float, Float, Float, Float, Float,
                  Float)>>('glReplacementCodeuiColor4fNormal3fVertex3fSUN')
      .asFunction<void Function(int, double, double, double, double, double, double, double, double, double, double)>(
          isLeaf: true);

  void replacementCodeuiColor4fNormal3fVertex3fvSUN(
          Pointer<UnsignedInt> rc, Pointer<Float> c, Pointer<Float> n, Pointer<Float> v) =>
      _glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
  late final _glReplacementCodeuiColor4fNormal3fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>, Pointer<Float>)>>(
              'glReplacementCodeuiColor4fNormal3fVertex3fvSUN')
          .asFunction<void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>, Pointer<Float>)>(
              isLeaf: true);

  void replacementCodeuiTexCoord2fVertex3fSUN(int rc, double s, double t, double x, double y, double z) =>
      _glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
  late final _glReplacementCodeuiTexCoord2fVertex3fSUN =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float, Float)>>(
              'glReplacementCodeuiTexCoord2fVertex3fSUN')
          .asFunction<void Function(int, double, double, double, double, double)>(isLeaf: true);

  void replacementCodeuiTexCoord2fVertex3fvSUN(Pointer<UnsignedInt> rc, Pointer<Float> tc, Pointer<Float> v) =>
      _glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
  late final _glReplacementCodeuiTexCoord2fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>)>>(
              'glReplacementCodeuiTexCoord2fVertex3fvSUN')
          .asFunction<void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>)>(isLeaf: true);

  void replacementCodeuiTexCoord2fNormal3fVertex3fSUN(
          int rc, double s, double t, double nx, double ny, double nz, double x, double y, double z) =>
      _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
  late final _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN =
      _lookup<NativeFunction<Void Function(UnsignedInt, Float, Float, Float, Float, Float, Float, Float, Float)>>(
              'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN')
          .asFunction<void Function(int, double, double, double, double, double, double, double, double)>(isLeaf: true);

  void replacementCodeuiTexCoord2fNormal3fVertex3fvSUN(
          Pointer<UnsignedInt> rc, Pointer<Float> tc, Pointer<Float> n, Pointer<Float> v) =>
      _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
  late final _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN =
      _lookup<NativeFunction<Void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>, Pointer<Float>)>>(
              'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN')
          .asFunction<void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>, Pointer<Float>)>(
              isLeaf: true);

  void replacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(int rc, double s, double t, double r, double g, double b,
          double a, double nx, double ny, double nz, double x, double y, double z) =>
      _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
  late final _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = _lookup<
          NativeFunction<
              Void Function(UnsignedInt, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float,
                  Float)>>('glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN')
      .asFunction<
          void Function(
              int, double, double, double, double, double, double, double, double, double, double, double, double)>();

  void replacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(
          Pointer<UnsignedInt> rc, Pointer<Float> tc, Pointer<Float> c, Pointer<Float> n, Pointer<Float> v) =>
      _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
  late final _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = _lookup<
          NativeFunction<
              Void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>, Pointer<Float>,
                  Pointer<Float>)>>('glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN')
      .asFunction<
          void Function(Pointer<UnsignedInt>, Pointer<Float>, Pointer<Float>, Pointer<Float>, Pointer<Float>)>();
}
